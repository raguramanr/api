#!/usr/bin/tclsh

############################### MAIN #################################
source /auto/automation/Util/runReg.cfg
source /auto/automation/Lib/mysqlLib.tcl
global curAutoRoot
global DUTs_info


source ../Lib/mainLib.tcl
package require Tclx

load [lindex [glob "/usr/lib/libexpect*so*"] 0]

set curLocation [pwd]
set curDirList [split [string trim [string trim $curLocation ".."] "/"] "/"]
set v 0;
set pathList ""
set curAutoRoot ""
set skipCC 0
foreach cd $curDirList {
    if {$cd == "main" || $cd == "Lib" || $cd == "Util"} {
        for {set x 0} {$x<$v} {incr x} {
            lappend pathList [lindex $curDirList $x]
        }
        set curAutoRoot "/[join $pathList "/"]"
    } else {
        incr v;
    }
}
puts "CURRENT PATH: $curAutoRoot"
set cDir [file tail [pwd]]
set LIB_PATH "./../Lib"
lappend auto_path $LIB_PATH
puts "DEBUG: Appending $LIB_PATH to autopath:$auto_path"

gen_index "./../Lib"
#source the local lib until it gets moved to lib
source ./regtoolsLib.tcl

proc print_usage {} {
    puts "\r"
    puts {Usage: multi_CC.tcl}
    puts "\r"
}

# checking command parameters
set incfgs ""
if {$argc==1} {
    puts "We got $argv"
    set incfgs $argv
}

catch {exec clear >@ stdout} ww
## ----------------------------------------------------------------
##   Main 
## ----------------------------------------------------------------
fconfigure stdin -blocking 1
set chInts "1 2"
if {[regexp -nocase "rdureg|salemreg" $HOST]} {
    set choice "1"
    set ch(1) "RDUREG/SALEMREG"
    set ch(2) "RDU Automation"
    set chStr(1) "swdev"
    set chStr(2) "Production"
} elseif {[regexp -nocase "autoregrdu" $HOST]} {
    set choice "1"
    set ch(1) "RDU Automation"
    set ch(2) "RDUREG/SALEMREG"
    set chStr(1) "Production"
    set chStr(2) "swdev"
} else {
    set choice "1"
    set ch(1) "RDUREG/SALEMREG"
    set ch(2) "RDU Automation"
    set chStr(1) "swdev"
    set chStr(2) "Production"
}
while {1} {
    puts "\n\n";
    puts "Harness to run:"
    foreach x $chInts {
        puts "$x = $ch($x)"
    }
    puts -nonewline "What harness are you running in <cr>=default \[$choice\]: ";
    flush stdout;
    gets stdin userChoice;
    if {$userChoice==""} {
       set userChoice $choice
    }
    if {[lsearch $chInts $userChoice] >=0} {
       puts "You are running on: $ch($userChoice)";
       set server $chStr($userChoice);
       break;
    } else {
       puts "Error: You must choose either \[join $chInts ' or ']";
       continue;
    }
}
if {$server == "swdev"} {
    set cfgList [getlocked]
    set cfgList [concat $cfgList [getUserLocks]]
    #puts "Locked List $lockedList"
    #puts "Locked List $lockedList"
    set cfgList [swsharedbeds $cfgList]
    #puts "$server Locked List $cfgList"
    set cfgList [NumberedMenu -head "Available Test Beds" \
                -question1 "Select test beds to run check connections on" \
                -choices $cfgList \
                -menuWidth        75 \
                -keyWidth         3 \
                -headerPadChar    "=" \
                -chAppendList     "null" \
                -chPrependList    "null" \
                -barChar          "-" \
                -clearXterm       "yes" \
                -clearXtermInfo   "" ]

} else {
    while {1} {
        puts "";
        set choice "21.1"
        puts -nonewline "Enter a release \[$choice\]: ";
        flush stdout;
        gets stdin userChoice;
        if {$userChoice == ""} {
            set userChoice $choice
        }
        if {[regexp -nocase "^\[0-9]{2,2}\.\[0-9]{1,1}$" $userChoice]} {
            set rel $userChoice
            set cfgList [get_test_beds $userChoice];
            #puts "\nMAIN cfglist $cfgList";
            break;
        } else {
            puts "Error: Your choice must be in the format 21.1";
            continue;
        }
    }
    while {1} {
        puts "";
        set choice "No"
        puts ""
        puts "HIT ENTER TO SKIP"
        puts -nonewline "Regex filter on cfg and owner.  Enter the string '440_G|450_G|620|mix'\[$choice\]: ";
        flush stdout;
        gets stdin userChoice;
        if {$userChoice==""} {
            set autoUserBeds ""
            set userChoice $choice
        }
        if {[regexp -nocase "^n|^no" $userChoice]} {
            #puts "return nothing"
            break;
        } else {
            set newCList [get_filtered_test_beds $cfgList $userChoice]
            if {[llength $newCList] <= 0} {
                puts "No match.  Using the entire release based cfg file list"
                break;
            } else {
                set cfgList $newCList;
                break;
            }
        }
    }

    set mainL [maintestbeds];
    set ccL [cctestbeds];
    set qlL [qltestbeds];
    set vtL [vttestbeds];
    set lcL [lctestbeds];
    set cfgLen [llength $cfgList];
    set newCfgList ""
    for {set x 0} {$x<$cfgLen} {incr x} {
        if {[lsearch $mainL [lindex $cfgList $x]] >=0} {
            puts "Cfg [lindex $cfgList $x] is running main.tcl";
            continue;
        }
        if {[lsearch $ccL [lindex $cfgList $x]] >=0} {
            puts "Cfg [lindex $cfgList $x] is running checkConnections.tcl";
            continue;
        }
        if {[lsearch $qlL [lindex $cfgList $x]] >=0} {
            puts "Cfg [lindex $cfgList $x] is running QLoadImage.tcl";
            continue;
        }
        if {[lsearch $vtL [lindex $cfgList $x]] >=0} {
            puts "Cfg [lindex $cfgList $x] is running verifyTestBed.tcl";
            continue;
        }
        if {[lsearch $lcL [lindex $cfgList $x]] >=0} {
            puts "Cfg [lindex $cfgList $x] is sitting a loadConsoles";
            continue;
        }
        if {[llength $incfgs] > 0} {
            if {[lsearch $incfgs [lindex $cfgList $x]] < 0} {
                puts "Using Args Cfg [lindex $cfgList $x] is not passed in";
                continue;
            }
        }
        lappend newCfgList [lindex $cfgList $x]
    }
    set cfgList $newCfgList

    set cfgList [NumberedMenu -head "Available Test Beds" \
                -question1 "Select a $rel test bed" \
                -choices $cfgList \
                -menuWidth        100 \
                -keyWidth         5 \
                -headerPadChar    "=" \
                -chAppendList     "null" \
                -chPrependList    "null" \
                -barChar          "-" \
                -clearXterm       "yes" \
                -clearXtermInfo   "" ]

}

set pl ""
set pil ""
set partition ""
set useSame 0
foreach cfg $cfgList {
    while {1} {
        set choice y
        puts -nonewline "Would you like to download code on $cfg (y/n)\[$choice\]: ";
        flush stdout;
        gets stdin userChoice;
        if {$userChoice==""} {
           set userChoice $choice
           puts "choice $choice"
        }
        if {[regexp -nocase "y" $userChoice] || [regexp -nocase "n" $userChoice]} {
            if {[regexp -nocase "y" $userChoice]} {
                set go 1
            } else {
                set go 0
            }
           puts ""
           break;
        } else {
           puts "Error: Config selection must be either y or n"
           continue
        }
    }
    if {!$go} {
        continue;
    }
    if {$useSame} {
        puts "Using the same. Values = QLoadImage.tcl -cfg $cfg -pl \"pl\" -pil \"$pil\" -partition \"$partition\""
    } else {
        while {1} {
            set choice sec
            puts -nonewline "Which parition (sec/pri)\[$choice\]: ";
            flush stdout;
            gets stdin userChoice;
            if {$userChoice==""} {
               set userChoice $choice
               puts "choice $choice"
            }
            if {[regexp -nocase "sec" $userChoice] || [regexp -nocase "pri" $userChoice]} {
                set partition $userChoice
                break;
                puts ""
            } else {
                puts "Error: Config selection must be either pri or sec"
                continue
            }
        }
        set tCount 0
        set pl ""
        while {1} {
            set choice x460
            set legalList "x460 x480 x430 Aspen Everest x870 NWI Olympic Mariner Pioneer"
            set choice [lindex $legalList $tCount]
            puts "Legal Values: $legalList"
            puts -nonewline "Type to download (x460=All summitX) \[$choice\]: ";
            flush stdout;
            gets stdin userChoice;
            if {$userChoice==""} {
               set userChoice $choice
            }
            if {[lsearch $legalList $userChoice] < 0} {
                puts "Error: Must be one of $legalList"
                continue
            } elseif {[lsearch $pl $userChoice] >= 0} {
                puts "Error: $userChoice is already in the list \[$pl]. Try again"
                continue
            } else {
                lappend pl $userChoice
                unset userChoice
                set choice no
                puts "Current -platformList \"$pl\""
                puts -nonewline "Would you like to download another platform type? (Yes/No)\[no\]: ";
                flush stdout;
                gets stdin userChoice;
                if {$userChoice==""} {
                   set userChoice $choice
                }
                if {[regexp -nocase "y" $userChoice] || [regexp -nocase "n" $userChoice]} {
                    if {[regexp -nocase "y" $userChoice]} {
                        incr tCount
                        continue
                    } else {
                        break
                    }
                   puts ""
                } else {
                   puts "Error: Yes or No, y or n ... I am bailing"
                   exit
                }
            }
        }
        foreach p $pl {
            while {1} {
                puts -nonewline "Enter the $p image full path: ";
                flush stdout;
                gets stdin userChoice;
                if {$userChoice==""} {
                    puts "Error: No value entered!"
                    continue;
                }
                if {![regexp -nocase "^\/" $userChoice]} {
                    puts "   Error: File $userChoice \
                                      should start from /"
                    continue;
                } else {
                    if {![file isfile $userChoice]} {
                        puts "   Error: $p File $userChoice is invalid file"
                        continue
                    } else {
                        lappend pil $userChoice
                        break
                    }
                }
            }
        }

    }
    while {1} {
        set choice y
        puts "\nQLoadImage.tcl -cfg $cfg -pl \"$pl\" -pil \"$pil\" -p $partition"
        puts "If any of this is wrong. Ctrl+C and start over!"
        puts -nonewline "Is it okay to execute the download (y/n)\[$choice\]: ";
        flush stdout;
        gets stdin userChoice;
        if {$userChoice==""} {
           set userChoice $choice
        }
        if {[regexp -nocase "y" $userChoice] || [regexp -nocase "n" $userChoice]} {
           set go 1
           break;
        } else {
           puts "Error: Config selection must be either y or n"
           continue
        }
    }
    while {1} {
        set choice y
        puts -nonewline "Use the same values for all cfgs \
                   (A good idea if all plaform images are in place) (y/n)\[$choice\]: ";
        flush stdout;
        gets stdin userChoice;
        if {$userChoice==""} {
           set userChoice $choice
        }
        if {[regexp -nocase "y" $userChoice] || [regexp -nocase "n" $userChoice]} {
            if {[regexp -nocase "y" $userChoice]} {
                set useSame 1
            } else {
                set useSame 0
            }
           puts ""
           break;
        } else {
           puts "Error: Config selection must be either y or n"
           continue
        }
    }
    if {!$go} {
        continue;
    }
    cd ../main
    if {$cfg != "null"} {
        if {![regexp -nocase "^cfg" $cfg] } {
            puts "matched start with cfg"
            set cfgFile [format %s/%s cfg $cfg]
            set cfgFile [string trim $cfgFile];
        } else {
            puts "matched catch all"
            set cfgFile $cfg
        }
    }
    puts "Using config file: ($cfgFile) [pwd]"

    if {[file exists $cfgFile] == 0} {
        puts "Cannot find config file: $cfgFile\n"
        puts stderr "Cannot find config file: $cfgFile"
        return
    }

    puts "************** ABOUT TO source $cfgFile *****************"
    catch {source $cfgFile } reason
    if {$server == "swdev"} {
        proc result_debug {cmd} {puts "$cmd";}
        proc result_ok {cmd} {puts "$cmd";}
        proc result_error {cmd} {puts "$cmd";}
        proc result_warning {cmd} {puts "$cmd";}
        set numDUT 1
        while { [info exists DUT${numDUT}_CONNECT] } {
            puts "***** DUT${numDUT}_CONNECT***** "
            puts "***** numDUT=$numDUT ***** "
            PowerOffDUT $numDUT "on"
            incr numDUT 1
        }
        incr numDUT -1
    }
    set mydir [pwd]
    #puts "launching QLoadImage for cfg $cfgFile in xterm"
    #puts "/Util/bash_ql $cfgFile $cfgFile \"$pl\" \"$pil\" $partition"
    puts "$cfg"
    if {[catch {exec /usr/bin/xterm -e \
             "../Util/bash_ql $cfgFile $partition \"$pl\" \"$pil\" $cfgFile" &} reason]} {
         puts "OOOPPPSSSSS"
    }
    if {$useSame==0} {
        set pl "";
        set pil "";
        set partition "";
    }
    after 2000
    puts "\n\n"
    cd $mydir
}
