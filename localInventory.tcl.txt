#!/usr/bin/tclsh

package require Tclx
source ../Lib/mainLib.tcl
#package require IxTclHal
# Connect to chassis and get chassis ID

#set hostList {"10.69.1.250"}

load [lindex [glob "/usr/lib/libexpect*so*"] 0]

set LIB_PATH ../Lib
lappend auto_path $LIB_PATH

puts "DEBUG: Appending $LIB_PATH to autopath:$auto_path"
gen_index "./../Lib"


if [catch {source "../main/cfg/common.cfg"} rea] {
    puts "*** WARNING: Unable to source common.cfg:$rea............... ***"
    puts "*** WARNING: Application level variables may not be defined. ***"
    exit -1
}

set cTime [clock seconds]
set invFiles [glob -nocomplain -- ./Tmp/DUTINFO_*]


set cList ""
set gfList ""
set mdList ""
foreach if $invFiles {
    set fList [split $if "/"]
    set myFile [lindex $fList [expr [llength $fList] - 1]]
    puts "$if"
    puts "$myFile"

    # Get the cfg file name temp file name
    set cfgList [split $myFile " "]
    set cfgTxt [lindex $cfgList [expr [llength $cfgList] - 1]]
    regsub {[0-9]+_} $cfgTxt "" cfgTxt
    set cfgShortList [split $cfgTxt "."]
    set cfgfile "[lindex $cfgShortList 0].cfg"
    if {[lsearch $cfgfile $cList] == -1 && [file size $if] > 10} {
        lappend cList $cfgfile
        puts "Adding $cfgfile"
        lappend gfList $if
        lappend mdList [file mtime $if]
    } elseif {[lsearch $cfgfile $cList] >= 0} {
        set ci [lsearch $cfgfile $cList]
        puts "Replacing $cfgfile at index $ci"
        set cm [lindex $mdList $ci]
        if {$cm < [file mtime $if]} {
            lreplace $gfList $ci $ci "$if"
            lreplace $mdList $ci $ci [file mtime $if]
        }
    } else {
        puts "!!!!\n!!!!\n DID NOT ADD $if at all\n!!!!\n!!!!"
    }

}


set fd_in [open "./Tmp/local_inventory.csv" "w"]

set cCount 1
set hostList ""
puts $fd_in "Sys,Serial,Mac,Blades,FMs"
foreach if $gfList {
    if {[expr $cTime - [file mtime $if]] > 10000000} {
        puts "!!!\n!!!\nFile is not current skipping $if \n!!!\n!!!"
        file delete $if
        continue;
    }
    #init line list
    set linList ""
    set fList [split $if "/"]
    set myFile [lindex $fList [expr [llength $fList] - 1]]
    puts "IF -- $if"
    puts "CFG FILE FOUND $myFile"

    # Get the cfg file name temp file name
    set cfgList [split $myFile " "]
    set cfgTxt [lindex $cfgList [expr [llength $cfgList] - 1]]
    regsub {[0-9]+_} $cfgTxt "" cfgTxt
    set cfgShortList [split $cfgTxt "."]
    set cfgfile "[lindex $cfgShortList 0].cfg"

    # Clean out any previous iteration set ixiaCh1
    if [info exists ixiaCh1] {
        unset ixiaCh1
    } else {
        set ixiaCh1 NULL
    }
    # Clear out the info from the previous interation of the loop
    if [info exists DUTs_info(DUT1,sysType)] {
        unset DUTs_info
    }
    #source "./Tmp2/$myFile"
    if {[file exists ./cfg/$cfgfile]} {
       puts "SOURCING CFG FILE ./cfg/$cfgfile"
       source "./cfg/$cfgfile"
       set goodCfg "$cfgfile"
    } else {
       puts "NO EXIST - ./cfg/$cfgfile"
       set goodCfg ""
       set ixiaCh1 "NULL"
    }
    if {[catch {source "./Tmp/$myFile"} why]} {
        puts "\n@@@\n@@@\nFailed to source /Tmp/$myFile\n@@@\n@@@"
    } 
    set numDUT 0 
    # Figure out the number of DUT
    for {set i 1} {$i <= 10} {incr i} {
        if [info exists DUTs_info(DUT${i},imageBooted)] {
            incr numDUT
        } else {
            break
        }
    }
    if {$numDUT == 0} {
        puts "The info file $myFile had not data"
        continue;
    }

    if [info exists ixiaPath($ixiaCh1)] {
        set ixiaVer $ixiaPath($ixiaCh1)
        puts "Ixia Chassis IP Address"
        puts "$ixiaCh1"
        puts "$ixiaPath($ixiaCh1)"
        #lappend linList "$ixiaCh1"
        #lappend linList "$ixiaPath($ixiaCh1)"
        if {[lsearch $hostList [string trim $ixiaCh1]] == -1} {
            lappend hostList "[string trim $ixiaCh1]"
        }
    } else {
        puts "Ixia Path Does not Exist"
        set ixiaVer NULL
        puts "Ixia Chassis IP Address"
        puts "$ixiaCh1"
        #lappend linList "$ixiaCh1"
        #lappend linList ""
    }
    set csv($cCount,cfg) $goodCfg
    puts $fd_in "$goodCfg,$cCount,,,"
    for {set d 1} {$d <= $numDUT} {incr d} {
        set linList ""
        if [info exists DUTs_info(DUT${d},sysType)] {
            puts "DUTs_info(DUT${d},sysType) $DUTs_info(DUT${d},sysType)"
            lappend linList "$DUTs_info(DUT${d},sysType)"
        } else {
            lappend linList ""
        }
        if [info exists DUTs_info(DUT${d},serial)] {
            puts "DUTs_info(DUT${d},serial) $DUTs_info(DUT${d},serial) "
            lappend linList "$DUTs_info(DUT${d},serial)"
        } else {
            lappend linList ""
        }
        if [info exists DUTs_info(DUT${d},sysMAC)] {
            puts "DUTs_info(DUT${d},sysMAC) $DUTs_info(DUT${d},sysMAC) "
            lappend linList "$DUTs_info(DUT${d},sysMAC)"
        } else {
            lappend linList ""
        }
        if [info exists DUTs_info(DUT${d},hwList)] {
            puts "DUTs_info(DUT${d},hwList) $DUTs_info(DUT${d},hwList) "
            regsub -all "Empty" $DUTs_info(DUT${d},hwList) "" hwL
            lappend linList "$hwL"
        } else {
            lappend linList ""
        }
        if [info exists DUTs_info(DUT${d},hwListFM)] {
            puts "DUTs_info(DUT${d},hwListFM) $DUTs_info(DUT${d},hwListFM) "
            regsub -all "Empty" $DUTs_info(DUT${d},hwListFM) "" fmL
            lappend linList "$fmL"
        } else {
            lappend linList ""
        }
        puts $fd_in [join $linList ","]
    }
    
    puts $fd_in "$ixiaCh1,$ixiaVer,,,"
    set csv($cCount,ixia) $ixiaCh1
    puts $fd_in ",,,,"

    set iPString ""
    for {set u 1} {$u<=12} {incr u} {
        if {[info exists ixiaPortMappingArray($u)]} {
            #append iPString "([string trimleft $ixiaPortMappingArray($u) "1 "]) "
            if {$u == 1} {
                set iList [split $ixiaPortMappingArray($u) " "]
                set iv "[lindex $iList 1]:[lindex $iList 2]"
                append iPString "Ixia ports: $iv"
            } else {
                set iList [split $ixiaPortMappingArray($u) " "]
                set iv "[lindex $iList 0] [lindex $iList 1]:[lindex $iList 2]"
                append iPString " $iv"
            }
        } else {
            append iPString ""
        }
    }
    if {$iPString == ""} {
        set csv($cCount,is) "unknown"
    } else {
        set csv($cCount,is) "$iPString"
    }
    set csv($cCount,pml) "unknown"
    if {[info exists portMappingList]} {
        #set a [regsub -all {\{([0-9]+) } $portMappingList ""]
        #set c [regsub -all {(\} )} $a "space"]
        #set d [regsub -all { } $c ":"]
        #set e [regsub -all {space} $d " "]
        #set f [regsub -all {(\})} $e ""]
        set csv($cCount,pml) "DUT Ports: $portMappingList"
    }
    for {set u 1} {$u<=12} {incr u} {
        if {[info exists ixiaPortMappingArray($u)]} {
            unset ixiaPortMappingArray($u)
        }
    }
    incr cCount
}
puts $hostList
puts $fd_in ",,,,"
puts $fd_in ",,,,"
puts $fd_in "IXIAs,,,,"
puts $fd_in ",,,,"

foreach  hostname $hostList {
    if {$hostname == "NO_IXIA"} {
        continue;
    }
    set HOST [exec hostname -s]
    if {[regexp -nocase "autoregeni" $HOST]} {
        puts "@@@@\n@@@@\nIN ENI \n@@@@\n@@@@"
        if {[regexp -nocase "10\.69" $hostname]} {
            puts "$hostname is in RTP"
            continue
        }
    } else {
        puts "@@@@\n@@@@\nIN ENI \n@@@@\n@@@@"
        if {[regexp -nocase "10\.127" $hostname]} {
            puts "$hostname is in ENI"
            continue
        }
    }
    set auto_path_temp ""
    set savedType ""
    foreach var $auto_path {
        set var1 [split $var "/"]
        if {![regexp -nocase "ixia" $var1]} {
            lappend auto_path_temp $var
        }
    }
    set auto_path $auto_path_temp

    SetIxiaEnv "$ixiaPath($hostname)"
    lappend auto_path [file join $env(IXIA_HOME) "lib"]

    #set timeout 10
    set send_human {.1 .3 1 .05 2}
    set telnetOK 1
    #set send_slow {10 .001}
    # Get the chassis serial number
    if [catch "spawn telnet $hostname" reason] {
        puts "failed to spawn program: $reason\n"
        set label1 "Not Available"
    }
    expect {
        "?nable to ?onnect" {
            puts "failed to connect to ixia"
            set label1 "Not Available"
            set telnetOK 0
            continue
        }
        "?o route to ?ost" {
            puts "failed to connect to ixia"
            set label1 "Not Available"
            set telnetOK 0
            puts $fd_in "$host,not reachable,,,"
            continue
        }
        "?onnection refused" {
            puts "failed to connect to ixia"
            set label1 "Not Available"
            set telnetOK 0
            continue
        }
        "?onnected to" {
        #wait for all remaining characters to come
        #puts "Connection established"
        }
        timeout {

        }
    }

    if {$telnetOK} {
        sleep 2
        send  "\r"
        #sleep 2
        expect ">"
        sleep 1
        if {[catch {send -h "puts \$env(COMPUTERNAME)\r"} why]} {
            puts "BAD $why"
        }
        sleep 2
        expect {
            -re \[A-Z0-9]+\-\[A-Z0-9]+ {
                if {[regexp -nocase {([A-Z0-9]+\-[A-Z0-9]+)} $expect_out(buffer) dummy label1]} {
                    puts "Found regexp Chassis ID dummy $dummy label1 $label1"
                }
            }
            -re \[A-Z]+\[0-9]+ {
                if [regexp -nocase -all {(OPT[A-Z0-9]+|[0-9A-Z]+)} $expect_out(buffer) dummy label1] {
                    puts "Found regexp Chassis ID dummy $dummy label1 $label1"
                }
            }
            timeout {
                set label1 "NOT AVAILABLE"
                puts "Hit timeout $expect_out(buffer)"
            }
        }
        # Get the ixia version 'puts $env(IXTCLHAL_LIBRARY)'
        catch {exp_close}
        catch {wait}
    }
    package require IxTclHal

    set host $hostname
    #if {[regexp -nocase 1600 $label1]} {
    #    puts $fd_in "$host,IS 1600 Skip,,,"
    #    continue
    #}
    if [catch "set out [ixInitialize $host]" $reason] {
        puts "Ixia $host is not reachable"
        puts $fd_in "$host,not reachable,,,"
        continue;
    }
    if {[regexp -nocase "error" $out]} {
        puts "Ixia $host is not reachable"
        puts $fd_in "$host,not reachable,,,"
        continue;
    }

    # Grant Added
    version get
    ixPuts -nonewline "Company name is "
    ixPuts [version cget -companyName]
    ixPuts -nonewline "Copyright is "
    ixPuts [version cget -copyright]
    ixPuts -nonewline "Install Version is "
    ixPuts [version cget -installVersion]
    ixPuts -nonewline "ixTclHAL Version is "
    ixPuts [version cget -ixTclHALVersion]
    ixPuts -nonewline "Product Version is "
    ixPuts [version cget -productVersion]
    ixPuts -nonewline "Product Serial Number is  "
    ixPuts [version cget -productVersion]

    set chas [ixGetChassisID $host]
    # Get the chassis: number of cards
    chassis getFromID $chas
    set ctype [chassis cget -typeName]
    set ncards [chassis cget -maxCardCount]
    ixPuts "Chassis $ctype, id $chas,max card $ncards cards"
    puts $fd_in "$host,$ctype,$label1,[version cget -installVersion],#Slots $ncards"

    for {set i 1} {$i <= $ncards} {incr i} {
       # Check for missing card
       if {[card get $chas $i] != 0} {
         continue
       }
       set portList [list [list $chas $i 1]]
       # Get all of the card's characteristics
       set fpgaVersion [card cget -fpgaVersion]
       set hwVersion [card cget -hwVersion]
       set portCount [card cget -portCount]
       set type [card cget -type]
       set typeName [card cget -typeName]
       set serialNumber [card cget -serialNumber]
       # And list them
       ixPuts "Card $i: $typeName ($type), $portCount ports, \
       fpga: $fpgaVersion, hwVersion: $hwVersion serialNumber: $serialNumber"
       puts $fd_in "Card $i,$typeName,$serialNumber,,"
       # If the card is a 10/100 RMII, play with its settable parameters
       if {$type == $::card10100RMii} {
         card config -clockRxRisingEdge 0
         card config -clockTxRisingEdge 1
         if [card set $chas $i] {
           ixPuts "Could not card set $chas $i"
         }
         ixWriteConfigToHardware portList
       }
       # Just for fun, we'll export the data associated with the first card
       # and read it to any other cards of the same type
       puts "PRE IF"
       #if {$i == 1} {
       #  if {[card export cardfile $chas $i] != 0} {
       #    ixPuts "Could not export"
       #    set savedType "null"
       #  } else {
       #    set savedType $type
       #  }
       #} elseif {$type == $savedType} {
       #  if {[card import cardfile $chas $i] == 1} {
       #    ixPuts "Could not import"
       #  }
       #}
       puts "END of Loop"
    }
    #puts $fd_in ",,,,"
    #set csv($cCount,ixia) $ixiaCh1 csv($cCount,cfg)  csv($cCount,is)
    for {set x 1} {$x<=$cCount} {incr x} {
        if {[info exists csv($x,ixia)] && $csv($x,ixia) == "$host"} {
            puts $fd_in "$csv($x,cfg),$csv($x,is),,,"
            puts $fd_in ",$csv($x,pml),,,"
        }
    }
    puts $fd_in ",,,,"
}

close $fd_in
exit
