
##############################################################################
# Global Definitions
##############################################################################
global  protocolToTest
global  ixiaCh1
global  portsOnIxia
global  testConf SrcIpAddress DestDUTIpAddress SrcIpV6Address DestDUTIpV6Address IPXSourceSocket VlanID NumVlans

global reportDir
global ixScriptResultDir
global ixScriptReportDir


global portMappingList
global one2onePortList
global one2manyPortList
global many2onePortList
global many2manyPortList
global one2one_one2manyPortList

#upvar #0 ONETOONE one2oneArray
#upvar #0 ONETOMANY one2manyArray
#upvar #0 MANYTOONE many2oneArray
#upvar #0 MANYTOMANY many2manyArray
global one2oneArray
global one2manyArray
global many2oneArray
global many2manyArray

global ixIpAddr  
global dutIpAddr  
upvar #0 DUTIPADDR_ARRAY dutIpAddr
upvar #0 IXIPADDR_ARRAY ixIpAddr
set ixIpAddr(1) 192.168.1.100
set ixIpAddr(2) 192.168.2.100
set ixIpAddr(3) 192.168.3.100
set ixIpAddr(4) 192.168.4.100
set ixIpAddr(5) 192.168.5.100
set ixIpAddr(6) 192.168.6.100
set ixIpAddr(7) 192.168.7.100
set ixIpAddr(8) 192.168.8.100

set dutIpAddr(1) 192.168.1.1
set dutIpAddr(2) 192.168.2.1
set dutIpAddr(3) 192.168.3.1
set dutIpAddr(4) 192.168.4.1
set dutIpAddr(5) 192.168.5.1
set dutIpAddr(6) 192.168.6.1
set dutIpAddr(7) 192.168.7.1
set dutIpAddr(8) 192.168.8.1

set ixScriptResultDir [get_result_dir]
set ixScriptReportDir $reportDir

set portsOnIxia 0
foreach map $portMappingList {
    if {[lindex $map end] == 1} {
        if {[lindex $map 0] >= $portsOnIxia } {
            set portsOnIxia [lindex $map 0]
        }
    }
}

switch -exact $portsOnIxia {
    4 {
        set one2onePortList [list "1 2" "3 4"]
        set one2manyPortList [list "1 2 3 4"]
        set many2onePortList [list "2 3 4 1"]
        set many2manyPortList [list "1 2 3 4"]
        set one2one_one2manyPortList [list "1 2 3 4"]
    }

    8 {
        set one2onePortList [list "1 2" "3 4" "5 6" "7 8"]
        set one2manyPortList [list "1 2 3 4" "5 6 7 8"]
        set many2onePortList [list "2 3 4 1" "6 7 8 5"]
        set many2manyPortList [list "1 2 3 4" "5 6 7 8"]
        set one2one_one2manyPortList [list "1 2 3 4" "5 6 7 8"]
    }
    default {
        result_error "NUMBER of IXIA PORTS connected to DUT1 is $portOnIxia"
        result_error "Should be 4,8 or 12"
        return
    }
}

##############################################################################
# Common Scriptmate Settings
##############################################################################
logger config -directory $ixScriptResultDir
results config -directory $ixScriptReportDir


results config -logDutConfig true
logger config -fileBackup false ;#true
results config -fileBackup false ;#true
results config -generateCSVFile false; #true

##############################################################################
# User Configuration
##############################################################################

user config -productname  "Summit"
user config -version      "11.4"  
user config -serial#      "p4_s450"
user config -username     "automation"
user config -comments     "Scriptmate tests"

##############################################################################
# Test Configuration
##############################################################################

set testConf(hostname)                      $ixiaCh1
set testConf(chassisID)                     1
set testConf(chassisSequence)               1
set testConf(cableLength)                   cable3feet

set testConf(speed)                         {{100 10100} {Copper1000 10100Gigabit}}
set testConf(autonegotiate)                 {{true 10100} {true 10100Gigabit}}
set testConf(duplex)                        {{full 10100} {full 10100Gigabit}}
set testConf(hdlcHeader)                    ppp
set testConf(PPPnegotiation)                true
set testConf(dataScrambling)                true
set testConf(useRecoveredClock)             true
set testConf(enableIp)                      true
set testConf(enableIpv6)                    true
set testConf(enableOsi)                     true
set testConf(enableMpls)                    true
set testConf(useMagicNumber)                true
set testConf(enableAccmNegotiation)         false
set testConf(sonetTxCRC)                    sonetCrc32
set testConf(sonetRxCRC)                    sonetCrc32
set testConf(C2byteTransmit)                22
set testConf(C2byteExpected)                22
set testConf(atmInterfaceType)              atmInterfaceUni
set testConf(atmFillerCell)                 atmIdleCell
set testConf(atmEnableCoset)                true
set testConf(atmReassemblyTimeout)          10
set testConf(enable802dot1qTag)             false

##############################################################################
# assign the portnames to all ports on the ixia which connect to the DUT
##############################################################################
for {set j 1} {$j <= $portsOnIxia} {incr j} {
    MapIxiaPortId $j ixiaChassisN ixiaCardN ixiaPortN ;
    set testConf(portname,$ixiaChassisN,$ixiaCardN,$ixiaPortN)  port$j
    result_debug " Ajay: $testConf(portname,$ixiaChassisN,$ixiaCardN,$ixiaPortN) "
}

##################################################################################################################
#procedure : ixscriptmateConfigureOne2OneMap
# input : 
#
# descr : this procedure configures a new one2one map for ixia 
#       : uses the ports defined in the global one2onePortList
#       : portlist  -  one2one { {1 2} {3 4}  ....} : each port is source and dest
##################################################################################################################
proc ixscriptmateConfigureOne2OneMap {} {
    result_debug "ixscriptmateConfigureOne2OneMap: "
    global one2onePortList

    clearExistingIxiaMap 
    map new -type one2one ;
    map config -type one2one ;

    foreach portmap $one2onePortList {
        MapIxiaPortId [lindex $portmap 0] ixiaChassis ixiaCard1 ixiaPort1 ;
        MapIxiaPortId [lindex $portmap 1] ixiaChassis ixiaCard2 ixiaPort2 ;

        map add $ixiaChassis $ixiaCard1 $ixiaPort1    $ixiaChassis $ixiaCard2 $ixiaPort2 ;
        map add $ixiaChassis $ixiaCard2 $ixiaPort2    $ixiaChassis $ixiaCard1 $ixiaPort1 ;

   } ;#foreach portmap

}
##################################################################################################################
#procedure : ixscriptmateConfigureOne2ManyMap
# input : 
#
# descr : this procedure configures a new one2many map for ixia 
#       : uses the ports defined in the global one2onePortList
#       : portlist  -  one2many { {1 2 3 4} {5 6 7 8} .... } : the first port in each list is the src port
##################################################################################################################
proc ixscriptmateConfigureOne2ManyMap {} {
    result_debug "ixscriptmateConfigureOne2ManyMap: "
    global one2manyPortList

    clearExistingIxiaMap 
    map new -type one2many ;
    map config -type one2many ;

    foreach portmap $one2manyPortList {
        set length [llength $portmap]
        MapIxiaPortId [lindex $portmap 0] ixiaChassis ixiaSrcCard ixiaSrcPort ;

        for {set j 1} {$j < [llength $portmap]} {incr j} {
            MapIxiaPortId [lindex $portmap $j] ixiaChassis ixiaToCard ixiaToPort ;
            map add $ixiaChassis $ixiaSrcCard $ixiaSrcPort    $ixiaChassis $ixiaToCard $ixiaToPort ;

        }
        set testConf(mapTransmitPort)  [list $ixiaChassis $ixiaSrcCard $ixiaSrcPort] ;

   } ;#foreach portmap

}

##################################################################################################################
#procedure : ixscriptmateConfigureMany2OneMap
# input : 
#
# descr : this procedure configures a new many2one map for ixia 
#       : uses the ports defined in the global many2onePortList
#       : portlist  -  many2one { {2 3 4 1} {6 7 8 5} .... } : the last port in each list is the dest port
##################################################################################################################
proc ixscriptmateConfigureMany2OneMap {} {
    result_debug "ixscriptmateConfigureMany2OneMap: "
    global many2onePortList

    clearExistingIxiaMap 
    map new -type many2one ;
    map config -type many2one ;

    foreach portmap $many2onePortList {
        set length [llength $portmap]
        MapIxiaPortId [lindex $portmap end] ixiaChassis ixiaToCard ixiaToPort ;

        for {set j 0} {$j < [expr  $length - 1]} {incr j} {
            MapIxiaPortId [lindex $portmap $j] ixiaChassis ixiaCard ixiaPort ;
            map add $ixiaChassis $ixiaCard $ixiaPort    $ixiaChassis $ixiaToCard $ixiaToPort ;

        }
        set testConf(mapReceivePort)  [list $ixiaChassis $ixiaToCard $ixiaToPort] ;

   } ;#foreach portmap

}
##################################################################################################################
#procedure : ixscriptmateConfigureMany2ManyMap
# input : 
#
# descr : this procedure configures a new many2ManyMap map for ixia 
#       : uses the ports defined in the global many2onePortList
#       : portlist  -  many2many { {1 2 3 4} {5 6 7 8} .... } : each port in the list goes to all other ports
##################################################################################################################
proc ixscriptmateConfigureMany2ManyMap {} {
    result_debug "ixscriptmateConfigureMany2ManyMap: "
    global many2manyPortList

    clearExistingIxiaMap 
    map new -type many2many ;
    map config -type many2many ;

    foreach portmap $many2manyPortList {
        set length [llength $portmap]
        for {set i 0} {$i < $length } {incr i} {
            MapIxiaPortId [lindex $portmap $i]    ixiaChassis ixiaSrcCard ixiaSrcPort ;

            for {set j 0} {$j < $length } {incr j} {
                if {$j == $i} {
                    continue;
                }
                MapIxiaPortId [lindex $portmap $j]    ixiaChassis ixiaToCard ixiaToPort ;
                map add $ixiaChassis $ixiaSrcCard $ixiaSrcPort    $ixiaChassis $ixiaToCard $ixiaToPort ;
            }
        }

   } ;#foreach portmap

}
##################################################################################################################
#procedure : ixscriptmateConfigureOne2One_One2ManyMap
# input : 
#
# descr : this procedure configures a new many2ManyMap map for ixia 
#       : uses the ports defined in the global many2onePortList
##################################################################################################################
proc ixscriptmateConfigureOne2One_One2ManyMap {} {
    result_debug "ixscriptmateConfigureOne2One_One2ManyMap: "
    global one2one_one2manyPortList

    clearExistingIxiaMap 
    map new -type one2one one2many;
    foreach portmap $one2one_one2manyPortList {

         result_debug "$portmap"
         MapIxiaPortId  [lindex $portmap 0] ixiaChassis ixiaCard0 ixiaPort0 ;
         MapIxiaPortId  [lindex $portmap 1] ixiaChassis ixiaCard1 ixiaPort1 ;

         #map new -type one2one ;
         map config -type one2one ;

         MapIxiaPortId  [lindex $portmap 2] ixiaChassis ixiaCard2 ixiaPort2 ;
         map add $ixiaChassis $ixiaCard0 $ixiaPort0    $ixiaChassis $ixiaCard2 $ixiaPort2 ;

         #map new -type one2many ;
         map config -type one2many ;

         set length [llength $portmap]
         for {set j 2} {$j < $length } {incr j} {
              MapIxiaPortId [lindex $portmap $j]    ixiaChassis ixiaToCard ixiaToPort ;
              map add $ixiaChassis $ixiaCard1 $ixiaPort1    $ixiaChassis $ixiaToCard $ixiaToPort ;
         }
   } ;#foreach portmap
}
##################################################################################################################
#procedure : ixscriptmateConfigureMapsAndVlanMac
# input : maptype
#       : portlist 
#
# descr : this procedure configures the map for ixia and the vlans on the dut as per the test case
#       : For testing mac , all port pairs are added to same vlan 
#       : maptype -  one2one, one2many, many2one, many2many
# 
#       each  ixia port map will correspond to a vlan on the dut
#       
#       VLAN TAG CONVENTION
#       if the vlantag flag  is 1, then add vlan tag to the ixiaports and the created vlan
#       The vlan's will be tagged as 1001, 1002, 1003 ... as they are created
#       
#       VLAN NAMING CONVENTION
#       The vlan's will be named as ixVlan1 , ixVlan2, ixVlan3 ... as they are created
#       
#       PORT NAMING CONVENTION
#       The ports will be named as port1, port2, port3 
##################################################################################################################
proc ixscriptmateConfigureMapsAndVlanMac { maptype portlist args} {

     parse_args ixscriptmateConfigureMapsAndVlanMac $args {
       vlantag 1
       autoMapGeneration no
       protocol ""
       configMap 1
     }

    if {[string compare $protocol "igmp"] == 0 } {
        result_error "NO HANDLING of IGMP in ixscriptmateConfigureMapsAndVlanMac"
    }
    result_debug "ixscriptmateConfigureMapsAndVlan:  $maptype" 
    result_debug "ixscriptmateConfigureMapsAndVlan:  $portlist"

    global DUT1_CONNECT
    global  portsOnIxia
    global  testConf SrcIpAddress DestDUTIpAddress SrcIpV6Address DestDUTIpV6Address IPXSourceSocket VlanID NumVlans
    global one2onePortList
    global many2manyPortList
    global one2manyPortList
    global many2onePortList
    global one2one_one2manyPortList


    Login $DUT1_CONNECT
    map show
    if {$vlantag == 1} {
        set testConf(enable802dot1qTag)    true
        result_debug "802dot1qTag= $testConf(enable802dot1qTag)"
    }

    switch -exact $maptype {
        one2one { 
            result_debug "ixscriptmateConfigureMapsAndVlan:  $maptype" 
            set i 1 ;

            foreach portmap $one2onePortList {

                SendACmd "create vlan ixVlan$i" ;
                if {$vlantag == 0} {
                    SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId [lindex $portmap 0]  1] "
                    SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId [lindex $portmap 1]  1] "
                } 
                if {$vlantag == 1} {
                    SendACmd "configure vlan ixVlan$i tag 1$i"
                    SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId [lindex $portmap 0]  1] tag" ;
                    SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId [lindex $portmap 1]  1] tag" ;

                    MapIxiaPortId [lindex $portmap 0] ixiaChassis ixiaCard1 ixiaPort1 ;
                    MapIxiaPortId [lindex $portmap 1] ixiaChassis ixiaCard2 ixiaPort2 ;
                    set VlanID($ixiaChassis,$ixiaCard1,$ixiaPort1)     1$i
                    set VlanID($ixiaChassis,$ixiaCard2,$ixiaPort2)     1$i
                }
                incr i
           } ;#foreach portmap
        }
        one2many {
            set i 0 ;

            foreach portmap $one2manyPortList {
                incr i ;
                SendACmd "create vlan ixVlan$i" ;
                if {$vlantag == 0} {
                    foreach port $portmap {
                        SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $port 1] " ;
                    }
                }
                if {$vlantag == 1} {
                    SendACmd "configure vlan ixVlan$i tag 1$i" ;
                    foreach port $portmap {
                        SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $port 1] tag " ;

                        MapIxiaPortId $port ixiaChassis ixiaCard ixiaPort ;
                        set VlanID($ixiaChassis,$ixiaCard,$ixiaPort)     1$i ;
                    }
                }

            } ;#foreach portmap
        } 
        many2one {
            set i 0 ;

            foreach portmap $many2onePortList {
                incr i
                SendACmd "create vlan ixVlan$i" ;
                if { $vlantag == 0} { 
                    foreach port $portmap {
                        SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $port  1] ";
                    }
                }
                if { $vlantag == 1} { 
                    SendACmd "configure vlan ixVlan$i tag 1$i";

                    foreach port $portmap {
                        SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $port  1] tag " ;

                        MapIxiaPortId $port ixiaChassis ixiaCard ixiaPort ;
                        set VlanID($ixiaChassis,$ixiaCard,$ixiaPort)     1$i ;
                    }
                }

            } ;# foreach portmap
        } 
        many2many {
            set i 0 ;

            foreach portmap $many2manyPortList {
                incr i
                SendACmd "create vlan ixVlan$i" ;
                if {$vlantag == 0} {
                    foreach port $portmap {
                        SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $port 1] ";
                    }
                }
                if {$vlantag == 1} {
                    SendACmd "configure vlan ixVlan$i  tag 1$i"
                    foreach port $portmap {
                        SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $port 1] tag " ;

                        MapIxiaPortId $port    ixiaChassis ixiaCard ixiaPort ;
                        set VlanID($ixiaChassis,$ixiaCard,$ixiaPort) 1$i
                    }
                }

            } ;# foreach portmap
        } ; #many2many 
    } ;# end switch


    if {$configMap == 1} {
        switch -exact $maptype {
            one2one {
                ixscriptmateConfigureOne2OneMap
            }
            one2many {
                ixscriptmateConfigureOne2ManyMap
            }
            many2one {
                ixscriptmateConfigureMany2OneMap
            }
            many2many {
                ixscriptmateConfigureMany2ManyMap
            }
        }
    }

    map show
    if { [info exist VlanID] == 1} {
        result_debug "VlanID=  [array get VlanID]"
    }
    set testConf(protocolName) mac 
    set testConf(ethernetType) ethernetII

    set testConf(autoMapGeneration)    $autoMapGeneration 
    set testConf(mapDirection)         bidirectional 
    set testConf(mapFromPort)          {1 1 1}
    set testConf(mapToPort)            {1 16 4}
    set testConf(excludePorts)         {}
    set testConf(mapServerPort)        {}

    map config -echo true
    map show 
    #exit
}

#################################################################################################       
# procedure name: checkrfc2544PassCriteria
# input : fd_log file descriptor of the log file
# output : updates the result file
# return value: none
# description: parses the portion of log file which has the PASS criteria 
#################################################################################################       

proc checkrfc2544PassCriteria {fd_log} {
   
   result_debug "PASS CRITERIA EVALUATIOn"

    while (1) {
        if {[gets $fd_log line] == -1 } {
            return ; #break;
        } 
        if { [regexp -nocase -- {.*end.*} $line] == 1} { 
            return ; #break;
        } 
        if { [regexp -nocase -- {.*Of *Trials.*} $line] == 1} { 
            return ; #break;
        } 
        if { [regexp -nocase -- {^Actual *Duration *of *Test.*} $line] == 1} { 
            return ; #break;
        } 
        puts "$line"
        if { [regexp {.*Trial.*} $line ] == 1 } { 
           set match ""
           regexp {.*Trial[^0-9]*([0-9]+).*} $line match trialN
           ############################################################################
           set subTest "Trial = $trialN, FINAL Result"
           ############################################################################
           result_h2 $subTest
           report_start_test $subTest
           set linelist ""
        }
        if { [regexp -nocase -- {.*PASS.*} $line] == 1 } {  
            lappend linelist $line
            result_ok "$linelist"
            report_end_test
        } elseif { [regexp -nocase -- {.*FAIL.*} $line] == 1 } {  
            lappend linelist $line
            result_error "$linelist"
            report_end_test
        } else {
            lappend linelist $line
        }
    } ;# end while
}
#################################################################################################       
# procedure name: getlinefromfile
# input : fd_log file descriptor of the log file
#         index : The nth line to be returned from the file
# output : updates the result file
# return value: none
# description: parses the portion of log file and returns the n'th file from it
# if [catch { open $currLogFile r} fd_log] 
#################################################################################################       
proc getlinefromfile {fd_log index} {
     for {set i 1} {$i <= $index} {incr i} {
        if { [gets $fd_log line] == -1 } { 
           result_error "No more data.File Ended"
           return -1 
        }
     }
     return $line 
}

#################################################################################################       
# procedure name: deleteixVlan
# input : 
# output : 
# return value: none
# description: deletes all the vlan on the switch with name starting with ixVlan
# if [catch { open $currLogFile r} fd_log] 
#ixVlan2         12   192.168.102.20 /24  -f---------------    ANY    2 /2   VR-Default 
#ixVlan3         13   192.168.103.20 /24  -f---------------    ANY    2 /2   VR-Default 
#ixVlan4         14   192.168.104.20 /24  -f---------------    ANY    2 /2   VR-Default
#################################################################################################       
proc deleteixVlan {} {
    global DUT1_CONNECT
    Login $DUT1_CONNECT

    set vlanInfo [SendACmd "show vlan"]
    foreach line $vlanInfo {
        if { [regexp {^ixVlan.*} $line] } {
             regexp {(ixVlan[0-9]+).*} $line match vlanname
             SendACmd     "delete $vlanname"
        }
    }
}

##################################################################################################################
#procedure : ixscriptmateConfigureMapsAndVlanBrdcast
# input : maptype
#       : portlist 
#
# descr : this procedure configures the map for ixia and the vlans on the dut as per the BroadCast Leakage test case
#         ATSS 1.6
#         In this one2many map will be configured with 4 ports. First two ports will be in same vlan
#         and the rest will be in different vlan's    
#
#       : For testing mac , all port pairs are added to same vlan 
#       : maptype -  one2one, one2many, many2one, many2many
#       : portlist  -  one2one { {1 2} {3 4}  ....} : each port is source and dest
#       : portlist  -  one2many { {1 2 3 4} {5 6 7 8} .... } : the first port in each list is the src port
#       : portlist  -  many2one { {2 3 4 1} {6 7 8 5} .... } : the last port in each list is the dest port
#       : portlist  -  many2many { {1 2 3 4} {5 6 7 8} .... } : each port in the list goes to all other ports
# 
#       each  ixia port map will correspond to a vlan on the dut
#       
#       VLAN TAG CONVENTION
#       if the vlantag flag  is 1, then add vlan tag to the ixiaports and the created vlan
#       The vlan's will be tagged as 1001, 1002, 1003 ... as they are created
#       
#       VLAN NAMING CONVENTION
#       The vlan's will be named as ixVlan1 , ixVlan2, ixVlan3 ... as they are created
#       
#       PORT NAMING CONVENTION
#       The ports will be named as port1, port2, port3 
##################################################################################################################
proc ixscriptmateConfigureMapsAndVlanMBrdcast { maptype portlist args} {

     parse_args ixscriptmateConfigureMapsAndVlanMac $args {
       vlantag 1
       autoMapGeneration no
       protocol ""
       configMap 1
     }

    result_debug "ixscriptmateConfigureMapsAndVlan:  $maptype" 
    result_debug "ixscriptmateConfigureMapsAndVlan:  $portlist"
    global DUT1_CONNECT
    Login $DUT1_CONNECT

    global  portsOnIxia
    global  testConf SrcIpAddress DestDUTIpAddress SrcIpV6Address DestDUTIpV6Address IPXSourceSocket VlanID NumVlans

    map show
    if {$vlantag == 1} {
        set testConf(enable802dot1qTag)             true
    }
    switch -exact $maptype {
            result_debug "one2one"
        one2one { 
            result_debug "ixscriptmateConfigureMapsAndVlan:  $maptype" 
            result_debug "ixscriptmateConfigureMapsAndVlan:  $portlist"
            set i 1 ;
            map new -type one2one ;
            map config -type one2one ;

            # foreach potmap create a new vlan and add the ports to the vlan and the map
            foreach portmap $portlist {
                MapIxiaPortId [lindex $portmap 0] ixiaChassis ixiaCard1 ixiaPort1 ;
                MapIxiaPortId [lindex $portmap 1] ixiaChassis ixiaCard2 ixiaPort2 ;

                map add $ixiaChassis $ixiaCard1 $ixiaPort1    $ixiaChassis $ixiaCard2 $ixiaPort2 ;
                map add $ixiaChassis $ixiaCard2 $ixiaPort2    $ixiaChassis $ixiaCard1 $ixiaPort1 ;

                SendACmd "create vlan ixVlan$i" ;
                if {$vlantag == 0} {
                    SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId [lindex $portmap 0]  1] "
                    SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId [lindex $portmap 1]  1] "
                } 
                if {$vlantag == 1} {
                    SendACmd "configure vlan ixVlan$i tag 1$i"
                    SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId [lindex $portmap 0]  1] tag" ;
                    SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId [lindex $portmap 1]  1] tag" ;

                    set VlanID($ixiaChassis,$ixiaCard1,$ixiaPort1)     1$i
                    set VlanID($ixiaChassis,$ixiaCard2,$ixiaPort2)     1$i
                }
                if {[string compare $protocol "igmp"] == 0 } {
                    SendACmd "enable ipmcforwarding ixVlan$i" ;
                    SendACmd "configure pim add vlan ixVlan$i" ;
                }
                incr i
           } ;#foreach portmap

        }
        one2many {
            result_debug "one2many"
            set i 1 ;
            map new -type one2many ;
            map config -type one2many ;

            foreach portmap $portlist {
                set numPorts [llength $portmap]
                if { $numPorts < 3 } {
                     result_error "PORT MAP needs atleast 3 ports"
                     return
                }
                set srcport [lindex $portmap 0]
                set dstport [lindex $portmap 1]
                SendACmd "create vlan ixVlan$i" ;
                SendACmd "configure vlan ixVlan$i tag 1$i" ;
                SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $srcport 1]  tag " ;
                SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $dstport 1]  tag " ;

                MapIxiaPortId $srcport ixiaChassis ixiaSrcCard ixiaSrcPort ;
                set VlanID($ixiaChassis,$ixiaSrcCard,$ixiaSrcPort)     1$i ;
                MapIxiaPortId $dstport ixiaChassis ixiaCard ixiaPort ;
                set VlanID($ixiaChassis,$ixiaCard,$ixiaPort)     1$i ;
                map add $ixiaChassis $ixiaSrcCard $ixiaSrcPort    $ixiaChassis $ixiaCard $ixiaPort ;
                if {[string compare $protocol "igmp"] == 0 } {
                    SendACmd "enable ipmcforwarding ixVlan$i" ;
                    SendACmd "configure pim add vlan ixVlan$i" ;
                }

                for {set j 2} {$j < $numPorts} {incr j} {
                    incr i ;
                    set port [lindex $portmap $j]

                    SendACmd "create vlan ixVlan$i" ;
                    SendACmd "configure vlan ixVlan$i tag 1$i" ;
                    SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $port 1]  tag " ;

                    MapIxiaPortId $port ixiaChassis ixiaToCard ixiaToPort ;
                    map add $ixiaChassis $ixiaSrcCard $ixiaSrcPort    $ixiaChassis $ixiaToCard $ixiaToPort ;
                    set VlanID($ixiaChassis,$ixiaToCard,$ixiaToPort)     1$i ;

                    if {[string compare $protocol "igmp"] == 0 } {
                        SendACmd "enable ipmcforwarding ixVlan$i" ;
                        SendACmd "configure pim add vlan ixVlan$i" ;
                    }

                }
                set testConf(mapTransmitPort)  [list $ixiaChassis $ixiaSrcCard $ixiaSrcPort] ;
            } ;#foreach portmap
            SendACmd "show vlan"
        } 
        many2one {
            result_debug "many2one"
            set i 1 ;
            map new -type many2one ;
            map config -type many2one ;

            # foreach potmap create a new vlan and add the ports to the vlan and the map
            # the first port is added as source port and the other ports are added as dest ports
            foreach portmap $portlist {
                SendACmd "create vlan ixVlan$i" ;
                if { $vlantag == 0} { 
                    foreach port $portmap {
                        SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $port  1] ";
                    }
                }
                if { $vlantag == 1} { 
                    SendACmd "configure vlan ixVlan$i tag 1$i";

                    foreach port $portmap {
                        SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $port  1] tag " ;

                        MapIxiaPortId $port ixiaChassis ixiaCard ixiaPort ;
                        set VlanID($ixiaChassis,$ixiaCard,$ixiaPort)     1$i ;
                    }
                }   
                if {[string compare $protocol "igmp"] == 0 } {
                    SendACmd "enable ipmcforwarding ixVlan$i" ;
                    SendACmd "configure pim add vlan ixVlan$i" ;
                }

                MapIxiaPortId [lindex $portmap end]    ixiaChassis ixiaToCard ixiaToPort ;

                set length [llength $portmap]  
                for {set j 0} {$j < [expr  $length - 1]} {incr j} {
                    MapIxiaPortId [lindex $portmap $j]    ixiaChassis ixiaSrcCard ixiaSrcPort ;
                    map add $ixiaChassis $ixiaSrcCard $ixiaSrcPort    $ixiaChassis $ixiaToCard $ixiaToPort ;
                }
                set testConf(mapReceivePort)  [list $ixiaChassis $ixiaToCard $ixiaToPort] ;
                incr i
            } ;# foreach portmap
        } 
        many2many {
            result_debug "many2many"
            set i 1 ;
            map new -type many2many ;
            map config -type many2many ;

            # foreach potmap create a new vlan and add the ports to the vlan and the map
            # the first port is added as source port and the other ports are added as dest ports
            foreach portmap $portlist {
                SendACmd "create vlan ixVlan$i" ;
                if {$vlantag == 0} {
                    foreach port $portmap {
                        SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $port 1] ";
                    }
                }
                if {$vlantag == 1} {
                    SendACmd "configure vlan ixVlan$i  tag 1$i"
                    foreach port $portmap {
                        SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $port 1] tag " ;

                        MapIxiaPortId $port    ixiaChassis ixiaCard ixiaPort ;
                        set VlanID($ixiaChassis,$ixiaCard,$ixiaPort) 1$i
                    }
                }
                if {[string compare $protocol "igmp"] == 0 } {
                    SendACmd "enable ipmcforwarding ixVlan$i" ;
                    SendACmd "configure pim add vlan ixVlan$i" ;
                }

                set length [llength $portmap]
                for {set i 0} {$i < $length } {incr i} {
                    MapIxiaPortId [lindex $portmap $i]    ixiaChassis ixiaSrcCard ixiaSrcPort ;

                    for {set j 0} {$j < $length } {incr j} {
                        if {$j == $i} {
                            continue;
                        }
                        MapIxiaPortId [lindex $portmap $j]    ixiaChassis ixiaToCard ixiaToPort ;
                        map add $ixiaChassis $ixiaSrcCard $ixiaSrcPort    $ixiaChassis $ixiaToCard $ixiaToPort ;
                    }
                }
                incr i
            } ;# foreach portmap

        } ; #many2many 
    } ;# end switch


    map show
    if { [info exist VlanID] == 1} {
        result_debug "VlanID=  [array get VlanID]"
    }
    set testConf(protocolName) mac 
    set testConf(ethernetType) ethernetII

    set testConf(autoMapGeneration)    $autoMapGeneration 
    set testConf(mapDirection)         bidirectional 
    set testConf(mapFromPort)          {1 1 1}
    set testConf(mapToPort)            {1 16 4}
    set testConf(excludePorts)         {}
    set testConf(mapServerPort)        {}

    map config -echo true
}
##################################################################################################################
#procedure : ixscriptmateConfigureMapsAndVlanIP
# input : maptype
#       : portlist 
#
# descr : this procedure configures the map for ixia and the vlans on the dut as per the test case
#       : For testing IP , each pair is added to separate vlan, and configued with an ip address
#       : maptype -  one2one, one2many, many2one, many2many
#       : portlist  -  one2one { {1 2} {3 4}  ....} : each port is source and dest
#       : portlist  -  one2many { {1 2 3 4} {5 6 7 8} .... } : the first port in each list is the src port
#       : portlist  -  one2many { {2 3 4 1} {6 7 8 5} .... } : the last port in each list is the dest port
#       : portlist  -  one2many { {1 2 3 4} {5 6 7 8} .... } : each port in the list goes to all other ports
# 
#       each  ixia port map will correspond to a vlan on the dut
#       
#       VLAN TAG CONVENTION
#       if the vlantag flag  is 1, then add vlan tag to the ixiaports and the created vlan
#       The vlan's will be tagged as 1001, 1002, 1003 ... as they are created
#       
#       VLAN NAMING CONVENTION
#       The vlan's will be named as ixVlan1 , ixVlan2, ixVlan3 ... as they are created
#       
#       PORT NAMING CONVENTION
#       The ports will be named as port1, port2, port3 
##################################################################################################################
proc ixscriptmateConfigureMapsAndVlanIp { maptype portlist args} {
     parse_args ixscriptmateConfigureMapsAndVlanMac $args {
       vlantag 1
       autoMapGeneration no
       protocol ""
       configMap 1
     }

    result_debug "AUTOmAPgENERATION=  $autoMapGeneration "

    global DUT1_CONNECT
    global  portsOnIxia
    global  testConf SrcIpAddress DestDUTIpAddress SrcIpV6Address DestDUTIpV6Address IPXSourceSocket VlanID NumVlans
    global ixIpAddr
    global dutIpAddr
    global one2onePortList
    global many2manyPortList
    global one2manyPortList
    global many2onePortList
    global one2one_one2manyPortList

    if {$vlantag == 1} {
        set testConf(enable802dot1qTag) true
    }
    switch -exact $maptype {
        one2one { 
                 set portlist $one2onePortList
        }
        one2many {
                 set portlist $one2manyPortList
        } 
        many2one {
                 set portlist $many2onePortList
        } 
        many2many {
                 set portlist $many2manyPortList

        } 
        one2one_one2many {
                 set portlist $one2one_one2manyPortList
        } ; #end  one2one_many2many
    } ; #
    Login $DUT1_CONNECT
    set i 0 ;
    foreach portmap $portlist {
        foreach port $portmap {
           incr i
           MapIxiaPortId $port ixiaChassis ixiaCard ixiaPort ;
           SendACmd "create vlan ixVlan$i" ;

           if {$vlantag == 0} {
                SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $port 1] ";
           }
           if {$vlantag == 1} {
                SendACmd "configure vlan ixVlan$i  tag 1$i"
                SendACmd "configure vlan ixVlan$i add ports [MapDUTPortId $port 1] tag " ;

                set VlanID($ixiaChassis,$ixiaCard,$ixiaPort)     1$i
           }

           SendACmd "configure ixVlan$i ipaddress $dutIpAddr($port)/24" ;
           SendACmd "enable ipforwarding ixVlan$i" ;
    
           set SrcIpAddress($ixiaChassis,$ixiaCard,$ixiaPort)     $ixIpAddr($port) ;
           set DestDUTIpAddress($ixiaChassis,$ixiaCard,$ixiaPort)     $dutIpAddr($port) ;

           if {[string compare $protocol "igmp"] == 0 } {
               SendACmd "enable ipmcforwarding ixVlan$i" ;
               SendACmd "configure pim add vlan ixVlan$i" ;
           }
           if {[string compare $protocol "ospf"] == 0 } {
               SendACmd "configure ospf add vlan ixVlan$i area 0.0.0.0"
           }
        }
    }
    if {$configMap == 1} {
        switch -exact $maptype {
            one2one { 
                 ixscriptmateConfigureOne2OneMap
            }
            one2many {
                 ixscriptmateConfigureOne2ManyMap
            } 
            many2one {
                 ixscriptmateConfigureMany2OneMap
            } 
            many2many {
                 ixscriptmateConfigureMany2ManyMap
            } 
            one2one_one2many {
                 ixscriptmateConfigureOne2One_One2ManyMap
            } ; #end  one2one_many2many
        } ;# end switch
    } ;# 


    if { [info exist VlanID] == 1} {
        result_debug "VlanID=  [array get VlanID]"
    }

    set testConf(protocolName) ip 
    set testConf(ethernetType) ethernetII
    set testConf(firstSrcIpAddress) $ixIpAddr(1) 
    set testConf(firstDestDUTIpAddress) $dutIpAddr(1) 

    result_debug "testConf(firstSrcIpAddress)=$testConf(firstSrcIpAddress)"
    result_debug "testConf(firstDestDUTIpAddress)=$testConf(firstDestDUTIpAddress)"    

    set testConf(incrDUTaddress) false
    set testConf(autoMapGeneration)    $autoMapGeneration 
    set testConf(mapDirection)         bidirectional 
    set testConf(mapFromPort)          {1 1 1}
    set testConf(mapToPort)            {1 16 4}
    set testConf(excludePorts)         {}
    set testConf(mapServerPort)        {}

    map config -echo true
    map show 

}

proc ixScriptmateTempFunc { } {
result_debug "PROC TO HOOK UP THE GLOBAL VARIABLES"
}
############################################################################################
#procedure: clearExistingIxiaMap
#
#clears the global ixia arrays that hold the map configuration
############################################################################################
proc clearExistingIxiaMap {} {
upvar #0 ONETOONE one2oneArray
upvar #0 ONETOMANY one2manyArray
upvar #0 MANYTOONE many2oneArray
upvar #0 MANYTOMANY many2manyArray

global one2oneArray
global one2manyArray
global many2oneArray
global many2manyArray


if { [info exists one2oneArray] }  {
 unset one2oneArray
 result_debug "Unset map: one2one"
}
if { [info exists one2manyArray] }  {
unset one2manyArray
 result_debug "Unset map: one2many"
}
if { [info exists many2oneArray] }  {
unset many2oneArray
 result_debug "Unset map: many2one"
}
if { [info exists many2manyArray] }  {
unset many2manyArray
 result_debug "Unset map: many2many"
}
}
