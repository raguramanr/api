#!/usr/bin/tclsh
source ../Lib/parse_args.tcl
source ../Lib/mainLib.tcl
source ../Lib/login.tcl
source ../Lib/SendSwCmd.tcl
source ../Autoweb/cgi-bin/cgiScripts/modulesToBeSummarized.cfg
source ./runReg.cfg
source ../main/runReg.cfg
if {$tcl_platform(platform) == "windows"} {
    load "expect52.dll"
} else {
    load [lindex [glob "/usr/lib/libexpect*so*"] 0]
}

proc print_usage {} {
   global DEVREG
   puts "\r"
   puts {Usage: dyingSemiphore.tcl -cfg <config file> -qId <queueId> [-time <delay seconds>] [-help]}
   puts "   <cfg>: Path of the config file name (e.g. short/ptgm4x6.2.2b4.cfg)"
   puts "   <qId>: Queue that is calling this file ID"
   puts "   \[time\]:  Execution time in secs"
   puts {   \[help\]: Prints the help screen of this program)} 
   puts "\r"
}


parse_args dyingSemiphore $argv {
      cfg "null"
      qId "null"
      time "900"
      help "null"
}

# Check if "-help" asked, print_usage in that case
if {$help!="null"} {
   print_usage
   return 1
}

# checking command parameters
if {$argc<2} {
   puts "Not enough parameters"
   print_usage
   puts stderr "Not enough parameters"
   return
}
# ---------------------------------------------------------------
# The purpose of this file is to have a running process with this
#    cfg and qId in the ps -aux string.  Other queuing system tasks
#    can check for their cfg file name and queueId to make decisions
#
# This is used instead of writing to a file so that it will clean
#    itself up
# ---------------------------------------------------------------
set mSec ${time}000
after $mSec;
return;
