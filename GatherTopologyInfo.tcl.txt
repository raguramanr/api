
proc GatherAllInfo { DUTsUsed logfileStr } {

    set numDUT 0
    foreach item $DUTsUsed {
	if { [regexp -nocase DUT $item] } { incr numDUT }
    }

    set protocolTypes {VLAN LOADSHARE ELSM RIP}

    # This will contain all configuration lines for each DUT
    for {set dut 1} {$dut <= $numDUT} {incr dut 1} {
	set allRelevantDUTLines($dut) [GatherAllRelevantDUTLines $logfileStr $dut]
	if { $allRelevantDUTLines($dut) == "TOPOLOGY_INVALID" } {
	    return "TOPOLOGY_INVALID"
	}
    }

    for {set dut 1} {$dut <= $numDUT} {incr dut 1} {
	foreach prot $protocolTypes {
	    set TopologyInfo(DUT$dut,$prot) [Gather[set prot]TopologyInfo $allRelevantDUTLines($dut)]
	}
    }

    puts "\nnumDUT='$numDUT'"

    for {set dut 1} {$dut <= $numDUT} {incr dut 1} {
	foreach prot $protocolTypes {
	    lappend allList "DUT[set dut]_[set prot] $TopologyInfo(DUT$dut,$prot)"
	}
    }
    puts "\nallList='$allList'"

    return $allList
}

proc GatherAllRelevantDUTLines { logfileStr dut } {
    for { set i 0 } { $i <= [llength $logfileStr] } { incr i } {
	set line [lindex $logfileStr $i]
	if { ![regexp "\\\[\\\[\\\[\\\[ Login on device.*DUT$dut.*\\\]\\\]\\\]\\\]" $line] } {
	    continue
	} else {
	    for { set j [expr $i+1] } { $j <= [llength $logfileStr] } { incr j } {
		set line [lindex $logfileStr $j]
		if { ([regexp "\\\[\\\[\\\[\\\[ Login on device.*DUT.*\\\]\\\]\\\]\\\]" $line]) && \
			(![regexp "\\\[\\\[\\\[\\\[ Login on device.*DUT$dut.*\\\]\\\]\\\]\\\]" $line]) } {
		    break
		} else {
		    lappend allDUTLines $line
		}
	    }
	}
    }
    
    if { [info exists allDUTLines] } {
	return $allDUTLines
    } else {
	return ""
    }
}

proc GatherVLANTopologyInfo { buffer } {

    set vlanNum 0
    set totVlans 0

    foreach line $buffer {

	set line [string trim $line]
	if { [regexp "\\\-\\\-\\\- Send " $line] } {
	    set line [string range $line 9 end]
	}

	# Get Vlan Name
	if { [regexp "cr.* vl.* " $line] } {
	    incr vlanNum
	    incr totVlans
	    # What to do if duplicate vlan name created by mistake?
	    # In that case we need error check and not incr $vlanNum and $totVlans
	    set vlan($vlanNum,name) [lindex $line 2]
	    continue
	}

	for { set i 1 } { $i <= $totVlans } { incr i } {
	    if { [info exists vlan($i,name)] } {

		# Get Vlan Tag
		if { [regexp "co.* vl.* $vlan($i,name) *t" $line] } {
		    set vlan($i,tag) [lindex $line 4]
		} elseif { [regexp "co.* $vlan($i,name) *t" $line] } {
		    set vlan($i,tag) [lindex $line 3]
		}

		# Get Vlan Port Numbers
		if { [regexp "co.* vl.* $vlan($i,name).* ad.* po" $line] } {
		    set portNum [join [split [lrange $line 5 end] ","]]
		    if { ([regexp -nocase "t$" $portNum]) || ([regexp -nocase "tag$" $portNum]) } {
			lappend vlan($i,ports) "[lrange $portNum 0 end-1]"
		    } else {
			lappend vlan($i,ports) "$portNum"
		    }
		} elseif { [regexp "co.* $vlan($i,name).* ad.* po" $line] } {
		    set portNum [join [split [lrange $line 4 end] ","]]
		    if { ([regexp -nocase "t$" $portNum]) || ([regexp -nocase "tag$" $portNum]) } {
			lappend vlan($i,ports) "[lrange $portNum 0 end-1]"
		    } else {
			lappend vlan($i,ports) "$portNum"
		    }
		}

		# Get Vlan IPAddress
		if { [regexp "co.* vl.* $vlan($i,name).* ipa" $line] } {
		    set vlan($i,ipaddr) [lrange $line 4 end]
		} elseif { [regexp "co.* $vlan($i,name).* ipa" $line] } {
		    set vlan($i,ipaddr) [lrange $line 3 end]
		}

	    }
	}
    }

    #parray vlan

    for { set i 1 } { $i <= $totVlans } { incr i } {
	lappend vline "Name '$vlan($i,name)'"
	if { [info exists vlan($i,tag)] } {
	    lappend vline "Tag '$vlan($i,tag)'"
	}
	if { [info exists vlan($i,ports)] } {
	    lappend vline "Ports '[join $vlan($i,ports)]'"
	}
	if { [info exists vlan($i,ipaddr)] } {
	    lappend vline "IpAddr '$vlan($i,ipaddr)'"
	}
	lappend VLANTopologyInfoLines "[join $vline]"
	unset vline
    }

    if { [info exists VLANTopologyInfoLines] } {
	puts "\nVLANTopologyInfoLines=$VLANTopologyInfoLines"
	return $VLANTopologyInfoLines
    } else {
	return "NO_VLAN_INFO"
    }
}

proc GatherLOADSHARETopologyInfo { buffer } {

    set LSgroup 0
    set totLS 0

    foreach line $buffer {

	regsub ", *" $line "," line
	set line [string trim $line]
	if { [regexp "\\\-\\\-\\\- Send " $line] } {
	    set line [string range $line 9 end]
	}

	if { [regexp "^en.* sh.* g" $line] } {
	    incr LSgroup
	    incr totLS
	    set masterPort [lindex $line 2]
	    set groupedPorts [lindex $line 4]
	    set LS($LSgroup,master) $masterPort
	    set LS($LSgroup,grouped) $groupedPorts
	    if { [regexp "en.* sh.* g.* a.* a" $line] } {
		# Address-based sharing
		set LS($LSgroup,algo) "A"
	    } elseif { [regexp "en.* sh.* g.* a.* p" $line] } {
		# Port-based sharing
		set LS($LSgroup,algo) "P"
	    }
	}

	if { [regexp "co.* sh.* a.* p" $line] } {
	    set masterPort [lindex $line 2]
	    set groupedPorts [lindex $line 5]
	    for { set i 1 } { $i <= $totLS } { incr i } {
		if { $LS($i,master) == $masterPort } {
		    lappend LS($i,grouped) "$groupedPorts"
		    break
		}
	    }
	}
    }

    for { set i 1 } { $i <= $totLS } { incr i } {
	set LS($i,grouped) [split [join $LS($i,grouped) ","] ","]
    }

    #parray LS

    for { set i 1 } { $i <= $totLS } { incr i } {
	lappend vline "MasPort '$LS($i,master)'"
	if { [info exists LS($i,grouped)] } {
	    lappend vline "GrpPorts '$LS($i,grouped)'"
	}
	if { [info exists LS($i,algo)] } {
	    lappend vline "Algo '$LS($i,algo)'"
	}
	lappend LSTopologyInfoLines "[join $vline]"
	unset vline
    }

    if { [info exists LSTopologyInfoLines] } {
	puts "\nLSTopologyInfoLines=$LSTopologyInfoLines"
	return $LSTopologyInfoLines
    } else {
	return "NO_LOADSHARE_INFO"
    }

}

proc GatherELSMTopologyInfo { buffer } {
    return "NO_ELSM_INFO"

}

proc GatherRIPTopologyInfo { buffer } {

    return "NO_RIP_INFO"
}
