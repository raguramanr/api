
################################################################## 
# Procedure Name: SendRipFrame   
# Description: 
#	Send RIP packet(request or response) from an ixia port.  This Proc
#	mainly simulates a neighbor to advertise RIP routes to DUT. 
# Input args: args
# Output args: none
# Return value: Frame sent
# Typical usage: 
#	set frame [SendRipFrame -txPortId 1  -destMac $destMac -frameSize 130 \
#         -sourceIp 192.207.39.2  -destIp $destIP \
#         -command $ripCommand  -version $ver  -numRoute 4 \
#         -routeFamilyId {2 2 2 2}  -routeTag {00 00 00 00}\
#         -routeIp "$oldRoute(1) $oldRoute(2) $newRoute(1) $newRoute(2)"  \
#         -routeMask "$routeMask $routeMask $routeMask $routeMask" \
#         -routeNextHop {0.0.0.0  0.0.0.0 0.0.0.0 0.0.0.0} \
#         -routeMetric {2 5 1 3} ]     
# Category: SendTraffic
##################################################################
proc SendRipFrame {args} {
   parse_args SendRipFrame $args {
     txPortId "1"
     sourceMac "default"
     destMac "01 00 5e 00 00 09"
     sourceIp "127.0.0.1"
     destIp "224.0.0.9"
     gatewayIp "127.0.0.1"
     sourcePort "520"
     destPort "520"
     goodChecksum "true"
     numFrames "1"
     frameSize "70"
     ipOptions ""
     frameRate "default"
     dataPattern "0000"
     streamType "stopStream"
     fcsError "good"
     tag "none"
     TOS "0x00"
     userPriority "0"
     percentage "100"
     priority "0"
     saMode "idle"
     daMode "idle"
     ipSaMode "ipIdle"
     ipDaMode "ipIdle"
     id "0"
     command "ripRequest"
     version "2"
     authen ""
     authenType "2"
     numRoute "1"
     routeFamilyId {2}
     routeTag {00}
     routeIp {0.0.0.0}
     routeMask {0.0.0.0} 
     routeNextHop {0.0.0.0}
     routeMetric {16}
   }
   
   set numIxiaCd [GetNumIxiaCd $txPortId]
   set rxPo [MapIxiaPortId $txPortId chasisId card port]
   if {$tag != "none" } { set wTag "true" } else {set wTag "false" }
   global startCardNum
   set frameSent [ixiaConf_2Ports_ip -numIxiaCd $numIxiaCd  \
              -txChas $chasisId -txCard $card -txPort $port \
              -rxChas $chasisId -rxCard $card -rxPort $rxPo \
              -ipProtocol "udp" -sMacAddr $sourceMac -dMacAddr $destMac \
              -sIpAddr $sourceIp -dIpAddr $destIp -dDutIpAddr $gatewayIp \
              -pSrcPort $sourcePort -pDstPort $destPort -ttl 1 \
	      -goodChecksum $goodChecksum -numFrames $numFrames -frameSize $frameSize \
	      -frameRate $frameRate -dataPattern $dataPattern -streamType $streamType \
	      -fcsError $fcsError -wTag $wTag -tagNo $tag -TOS $TOS -userPriority $userPriority \
	      -percentage $percentage -priority $priority -ipOptions $ipOptions \
              -saMode $saMode -daMode $daMode -ipSaMode $ipSaMode -ipDaMode $ipDaMode \
              -id $id -ipApplication "rip" -ripCommand $command  -ripVersion $version \
              -ripAuthen $authen  -ripAuthenType $authenType  -ripNumRoute $numRoute \
              -ripRouteFamilyId $routeFamilyId  -ripRouteIp $routeIp  \
              -ripRouteMetric $routeMetric  -ripRouteNextHop $routeNextHop  \
              -ripRouteTag $routeTag  -ripRouteMask $routeMask ]
  if {$streamType != "contPacket" && $numFrames > 100} {
    ixiaCheckTxDone $chasisId $card $port $numFrames $txPortId
  }  
  return $frameSent           
}

##################################################################
# Procedure Name: CheckRIPRoutes    
# Description:
#     	This proc is used to verify if the required RIP routes exist in 
#	the specified list of RIP frames.  OneOrAll parameter determines
#	if all frames have to adverise the routes required to exist.
# Input args: args
# Output args: None.
# Return value: None.
# Typical usage:
#	set route(1) "00 02 00 00 C0 CF 27 00 FF FF FF 00 00 00 00 00 00 00 00 10"
#	set route(2) "00 02 00 00 C0 CF 28 00 FF FF FF 00 00 00 00 00 00 00 00 01"
#	lappend routeList "{$route(1)} exist"
#       lappend routeList "{$route(2)} notExist"
#       CheckRIPRoutes $ripFrameList $routeList "one" "-- on rif vlan1"
#       unset routeList
# Category: VerifyTraffic
##################################################################  
proc CheckRIPRoutes {ripFrameList routeList {oneOrAll "all"} {comment ""}} {

 report_start_test "Checking routes in RIP packets $comment" 
 set numFrame [llength $ripFrameList]

 if { $numFrame > 0 } {
   set numPass $numFrame
   for {set i 1} {$i <= $numFrame} {incr i 1} {
      set frame [lindex $ripFrameList [expr $i - 1]]
      set msgType [GetMessageType $frame]
      result_debug "$msgType frame($i):"
      result_debug "$frame"
      set routeCheck 1
      foreach routeItem $routeList {
        set route [lindex $routeItem 0]
        set flag [lindex $routeItem 1]
        set existence [string first $route [string range $frame 138 end] ]
        switch $flag {
          "notExist" 	{
             if { $existence != -1 } {
                set routeCheck 0
                result_debug "!!!! frame($i) advertises the unexpected route: ($route) !!!!"
             } else {   
             	result_debug "frame($i) doesn't advertise the unexpected route: ($route)"
             }
          }
          
          "exist" -
          default	{
             if { $existence != -1 } {
                result_debug "frame($i) advertises the expected route: ($route)"
             } else {
                set routeCheck 0
                result_debug "!!!! frame($i) doesn't advertise the expected route: ($route) !!!!"
             }
          }
        }
      }       
      if { !$routeCheck } { set numPass [expr $numPass - 1] }
   }
   
   switch $oneOrAll {
      "all"  	{ if { $numPass == $numFrame } {
   	            result_ok "ALL RIP frames advertising routes check passed"
   	         } else {
   	            result_error "ALL RIP frames advertising routes check failed" 
   	         }
   	       	}
      default 	{ if { $numPass >= 1 } {
   	            result_ok "At least one RIP frame advertising routes check passed"
   	         } else {
   	            result_error "At least one RIP frame advertising routes check failed" 
   	         }
   	       	}               
   }
 } else {
   result_debug "!!!! no frame in provided RIP frame list while invoking CheckRIPRoutes!!!!"
   result_error "routes in RIP packets check failed due to empty RIP frame list"
 }  

  report_end_test
}

################################################################## 
# Procedure Name: startRip
#   
# Description:  start the RIP protocol server on the ixia
#              
# Input args: txPortIdList
# Output args: none
# Return value: none
# Typical usage: 
#      startRip {1}
#
# Category Types (SetupSwitch,GetSwitchInfo,SendTraffic,CaptureTraffic,
#                 SetupTestTool,VerifySwitchOutput,Utility,VerifyTraffic)
# Category: SetupTestTool
##################################################################
proc startRip {txPortIdList} {

    set pList "";
   global TrafficGen
   switch -exact -- $TrafficGen {
      ixia -
      ixvm {
    foreach txPortId $txPortIdList {
        MapIxiaPortId $txPortId cha car por;
        result_debug "startRip - Chas: $cha Card: $car Port: $por";
        lappend pList "$cha $car $por";
    }
    
    if {[ixStartRip pList]} {
        error "startRip: ixStartRip failed.";
    }
}
      stc {
         set globalDeviceList ""
         foreach txPortId $txPortIdList {
            set txPortId [hMapPortIdToSpirentPort $txPortId]
            set deviceList [logcmd stc::get $txPortId -affiliationport-Sources]
            result_debug "startRip: Device List - $deviceList"
            set globalDeviceList [concat $globalDeviceList $deviceList]				
         }
         
         if {[catch {logcmd stc::perform DeviceStartCommand -DeviceList $globalDeviceList} retCode]} {
            error "startRip: Spirent device start failed."
         } 
      }
   }	
   
}

################################################################## 
# Procedure Name: stopRip
#   
# Description:  start the RIP protocol server on the ixia
#              
# Input args: txPortIdList
# Output args: none
# Return value: none
# Typical usage: 
#      stopRip {1}
#
# Category Types (SetupSwitch,GetSwitchInfo,SendTraffic,CaptureTraffic,
#                 SetupTestTool,VerifySwitchOutput,Utility,VerifyTraffic)
# Category: SetupTestTool
##################################################################
proc stopRip {txPortIdList} {

    set pList "";
   global TrafficGen
   switch -exact -- $TrafficGen {
      ixia -
      ixvm {	
    foreach txPortId $txPortIdList {	
        MapIxiaPortId $txPortId cha car por;
        result_debug "stopRip - Chas: $cha Card: $car Port: $por";
        lappend pList "$cha $car $por";
    }

    if {[ixStopRip pList]} {
        error "stopRip: ixStopRip failed.";
    }
}
      stc {
         
         set globalDeviceList ""
         foreach txPortId $txPortIdList {
            set txPortId [hMapPortIdToSpirentPort $txPortId]
            set deviceList [logcmd stc::get $txPortId -affiliationport-Sources]
            result_debug "stopRip: Device List - $deviceList"
				set globalDeviceList [concat $globalDeviceList $deviceList]				
         }
         
         if {[catch {logcmd stc::perform DeviceStopCommand -DeviceList $globalDeviceList} retCode]} {
            error "stopRip: Spirent device start failed."
         } 
      }
   }
}

################################################################## 
# Procedure Name: cleanupRip
#   
# Description:  cleanup the RIP protocol server on the ixia
#              
# Input args: txPortIdList, routerIp
# Output args: none
# Return value: none
# Typical usage: 
#      cleanupRip {4} "11.11.11.2"
#
# Category Types (SetupSwitch,GetSwitchInfo,SendTraffic,CaptureTraffic,
#                 SetupTestTool,VerifySwitchOutput,Utility,VerifyTraffic)
# Category: SetupTestTool
##################################################################
proc cleanupRip {txPortIdList routerIp} {
        
   global TrafficGen
   
   switch -exact -- $TrafficGen {
      
      stc {
         if { [catch {
            foreach txPortId $txPortIdList {
               set txPortId [hMapPortIdToSpirentPort $txPortId]
               foreach emulatedDevice [logcmd stc::get $txPortId -affiliationport-Sources] {
						set ipv4If [logcmd stc::get $emulatedDevice -children-Ipv4If]
                  if {$ipv4If != ""} {
                     if {[logcmd stc::get $ipv4If -Address] ==  $routerIp} {
                        logcmd stc::delete $emulatedDevice
                     }
                  }
               }
            }
            
         } msg ] } {
            result_error "cleanupRip : Failed to delete RIP configuration $msg"
				return 0
         }			
         
      }
      
      ixia -
      ixvm {
         
         
  set routerId 1   
  set rangeId 1   
  foreach txPortId $txPortIdList {    
    # get the port information
    MapIxiaPortId $txPortId chas card port;
    set pl [list [list $chas $card $port]] 
    result_debug "cleanupRip - Chas: $chas Card: $card Port: $port";
           
    # select the port           
    if {[ripServer select $chas $card $port]} {
        result_debug "Error Connecting to ripServer";
    }    
    ripServer clearAllRouters         
    ripInterfaceRouter clearAllRouteRange
    if [ripServer write] {
        error "Error writing ripServer" 
    }
 
    arpServer setDefault   
    DeleteIpAddress $txPortId $routerIp
    #--- This will delete the interface table 
    interfaceTable select $chas $card $port
    interfaceTable getInterface "Port $card:$port Interface"
    interfaceTable delInterface "Port $card:$port Interface"
    # EY-07-17-2008: Removed invalid parameter to "interfaceTable
    # clearAllInterfaces" command.
    interfaceTable clearAllInterfaces;
    interfaceTable write;

    
    protocolServer config -enableArpResponse false
    protocolServer config -enableRipService false 
    protocolServer set 1 $card $port
    
    if {[protocolServer write $chas $card $port]} {
        error "protocolServer write $chas $card $port failed."
    } 
    # Send to the hardware 
    ixWritePortsToHardware pl 
  }      
}
   }
}

################################################################## 
# Procedure Name: setupRipPeer
#   
# Description:  setup the RIP protocol server on the ixia
#              
# Input args: 
# Output args: none
# Return value: none
# Typical usage: 
#    setupRipPeer -routerIp "11.11.11.2" -txPortId 1 -rangeIpList $rangeIpList \
#                 -prefixList $prefixList -numberofrouteList $numberofrouteList \
#                 -metricList $metricList -nexthopList $nexthopList -tagList $tagList
#             
# Category Types (SetupSwitch,GetSwitchInfo,SendTraffic,CaptureTraffic,
#                 SetupTestTool,VerifySwitchOutput,Utility,VerifyTraffic)
# Category: SetupTestTool
##################################################################
proc setupRipPeer {args} {
   global TrafficGen
    parse_args setupRipPeer $args {
        routerIp "1.1.1.1"
        mask "255.255.255.0"
        txPortId 1
        updateInterval 30
        updateIntervalOffset 5              
        rangeIpList {}
        prefixList {}
        numberofrouteList {}
        metricList {}
        nexthopList {}
        tagList {}
    }

   switch -exact -- $TrafficGen {
      
      stc {
         if { [catch {
            set txPortId [hMapPortIdToSpirentPort $txPortId]
            cleanupBgp $txPortId
            array set cmdResults [logcmd stc::perform DeviceCreateCommand -ParentList [logcmd stc::get system1 -children-project] -port $txPortId -IfStack "Ipv4If EthIIIf" -IfCount "1 1"]
            set deviceHndl $cmdResults(-ReturnList)
            set gatewayIp [join "[lrange [split $routerIp .] 0 2] 1" .]  
            logcmd stc::config [logcmd stc::get $deviceHndl -children-Ipv4If] -Address $routerIp -Gateway $gatewayIp
            
            set ripRouterAttrs "-under $deviceHndl -RipVersion V2" ;# -DutIpv4Addr 224.0.0.9
            if {$updateInterval != ""} {
               append ripRouterAttrs  " -UpdateInterval $updateInterval"
            }
            if {$updateIntervalOffset != ""} {
               append ripRouterAttrs  " -UpdateJitter $updateIntervalOffset"
            }
            set ripRouterConfig [eval "logcmd stc::create RipRouterConfig [subst $ripRouterAttrs]"] 
            set idx 0 
            while {[llength $rangeIpList] > $idx} {    
               # Extract the information from the table and set the route ranges 
               set myIp [lindex $rangeIpList $idx]
               set prefix [lindex $prefixList $idx]
               set numRoutes [lindex $numberofrouteList $idx]
               set metric [lindex $metricList $idx]
               set nextHop [lindex $nexthopList $idx]
               set routeTag [lindex $tagList $idx]
               incr idx
               set ipv4RouteAttrs "-under $ripRouterConfig"
               if {$metric != ""} {
                  append ipv4RouteAttrs  " -Metric $metric"
               }
               if {$nextHop != ""} {
                  append ipv4RouteAttrs  " -NextHop $nextHop"
               }
               if {$routeTag != ""} {
                  append ipv4RouteAttrs  " -RouteTag $routeTag"
               }
               
               set ripv4Route [eval "logcmd stc::create Ripv4RouteParams [subst $ipv4RouteAttrs]"]
               set ipv4BlockAttrs "-StartIpList [cleanRoute $myIp $prefix]"
               if {$prefix != ""} {
                  append ipv4BlockAttrs  " -PrefixLength $prefix"
               }
               if {$numRoutes != ""} {
                  append ipv4BlockAttrs  " -NetworkCount $numRoutes"
               }
               eval "logcmd stc::config [logcmd stc::get $ripv4Route -children-Ipv4NetworkBlock] [subst $ipv4BlockAttrs]"
            }									
            
         } msg ] } {
            result_error "setupRipPeer : Failed to configure RIP  $msg"
            return 0
         }			
         
		}
		
		ixia -
                ixvm {
	
    #An array of multiple route ranges, organized as a table 
    # Num 
    # RangeIp Prefix Routes Metric Next-Hop Tag 
    #set routeRanges {{10.0.0.0 13 10 4 198.18.1.2 9} \
    #                {20.0.0.0 17 10 4 198.18.1.2 10}}
    set routerId 1
    set rangeId 1 
    
    # get the port information   
    MapIxiaPortId $txPortId chas card port
    result_debug "setupRipPeer - Chas: $chas Card: $card Port: $port"
    
    set pl [list [list $chas $card $port]] 
    set myMac [format "00 be ef 00 %02x %02x" $card $port]

    # Basic parameters for the RIP router 
    set sendType ripBroadcastV2 
    set receiveType ripReceiveVersion2 
    set updateInterval 30 
    set updateIntervalOffset 5
        
    # Initialize port 
#    port setFactoryDefaults $chas $card $port 
#    port setDefault 
#    port set $chas $card $port

    # Select the port and clear all defined routers 
    ripServer select $chas $card $port 
    ripServer clearAllRouters

    # For all the defined routers
    set idx 0 
    while {[llength $rangeIpList] > $idx} {    
        # Extract the information from the table and set the route ranges 
        set myIp [lindex $rangeIpList $idx]
        set prefix [lindex $prefixList $idx]
        set numRoutes [lindex $numberofrouteList $idx]
        set metric [lindex $metricList $idx]
        set nextHop [lindex $nexthopList $idx]
        set routeTag [lindex $tagList $idx]
        incr idx
                                            
        ripRouteRange setDefault 
        ripRouteRange config -enableRouteRange true 
        ripRouteRange config -routeTag $routeTag 
        ripRouteRange config -networkIpAddress $myIp 
        ripRouteRange config -networkMaskWidth $prefix 
        ripRouteRange config -numberOfNetworks $numRoutes 
        ripRouteRange config -nextHop $nextHop
        ripRouteRange config -metric $metric
    
        # Create a name for each individual route range 
        ripInterfaceRouter addRouteRange \
            [format "routeRange%02d" $rangeId] 
        incr rangeId 
    }

    arpServer setDefault 
    arpServer config -mode arpGatewayOnly 
    arpServer set $chas $card $port
    if {![regexp -nocase "3.50" [version cget -installVersion]]} {
       interfaceTable               select            $chas $card $port
       interfaceIpV4                setDefault        
       interfaceIpV4                config            -maskWidth                          24
       interfaceIpV4                config            -ipAddress                          "$routerIp"
       interfaceEntry               addItem           addressTypeIpV4
       interfaceEntry               setDefault        
       interfaceEntry               config            -enable                             true
       interfaceEntry               config            -description                        "Port $card:$port Interface"
       interfaceEntry               config            -macAddress                         "$myMac"
       interfaceEntry               config            -enableVlan                         false
       interfaceEntry               config            -vlanId                             0
       interfaceEntry               config            -vlanPriority                       0
       interfaceTable               addInterface      
 
       interfaceEntry               clearAllItems     addressTypeIpV6
       interfaceEntry               clearAllItems     addressTypeIpV4
    }
    
    ripInterfaceRouter           setDefault        
    ripInterfaceRouter           config            -enableRouter                       true
    ripInterfaceRouter           config            -ipAddress                          "$routerIp"
    ripInterfaceRouter           config            -ipMask                             "$mask"
    ripInterfaceRouter           config            -responseMode                       ripSplitHorizonSpaceSaver
    ripInterfaceRouter           config            -sendType                           $sendType
    ripInterfaceRouter           config            -receiveType                        $receiveType
    ripInterfaceRouter           config            -updateInterval                     $updateInterval
    ripInterfaceRouter           config            -updateIntervalOffset               $updateIntervalOffset
    if {[regexp -nocase "3.50" [version cget -installVersion]]} {
       # And add the router to the ripServer with a unique ID 
       ripServer addRouter [format "router%02d" $routerId]
    } else {
       ripInterfaceRouter           config            -enableAuthorization                false
       ripInterfaceRouter           config            -authorizationPassword              {}
       ripInterfaceRouter           config            -protocolInterfaceDescription       "Port $card:$port Interface"
       ripServer                    addRouter         router1
    }
    
    # Set up the IP address table, arp server and protocol server 
    # To respond to arps from the router 
    ipAddressTableItem setDefault 
    ipAddressTableItem config -numAddresses 1 
    ipAddressTableItem config -mappingOption oneIpToOneMac 
    ipAddressTableItem config -overrideDefaultGateway false 
    ipAddressTableItem config -fromIpAddress $routerIp 
    ipAddressTableItem config -fromMacAddress $myMac 
    ipAddressTable addItem 
    ipAddressTable set $chas $card $port



    protocolServer get $chas $card $port 
    protocolServer config -enableArpResponse true 
    protocolServer config -enableRipService true 
    protocolServer config -enablePingResponse false 
    protocolServer set 1 $card $port
    
    # Send to the hardware 
    ixWritePortsToHardware pl 
    #ixCheckLinkState pl
		}
	}

}
