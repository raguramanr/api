proc globalSetDefault {} {
}
########################################################################
# Procedure: incrHostIpAddr
#
# Description: Increments the host portion of the IP address
#              NOTE:  will carry!!
#
# Argument(s):
#   ipAddress      - ip address to increment
#   amount         - amount to increment by
#
########################################################################
proc incrHostIpAddr {ipAddress {amount 1}} \
{
    return [incrIpField $ipAddress 4 $amount]
}


########################################################################
# Procedure: lnumsort
#
# This command sorts a list (like ports) into numerical order
#
# Argument(s):
#       option        -decending
#       MyList        list of stuff
#
########################################################################
proc lnumsort {option {MyList ""}} \
{
    if {[string index [lindex $option 0] 0] != "-"} {
        set MyList  $option
        set sortedList  [lsort -dictionary $MyList]
    } else {
        set sortedList  [lsort -dictionary $option $MyList]
    }

    return $sortedList
}


########################################################################
# Procedure: mergeLists
#
# This command merges two lists
#
# Arguments(s):
#   MergedList  - returned merged list w/dups removed
#   args        - variable number of lists to be merged together
#   <sortedOrder - return list in sorted order, default is no sort>
#
# Return values:
#   If there are duplicate items in the list, returns number of dups, otherwise
#   returns 0
#
########################################################################
proc mergeLists {MergedList args} \
{
    upvar $MergedList   mergedList

    set mergedList  ""
    set sortFlag    0
    set duplicate   0

    foreach list $args {
        if {$list == "sortedOrder"} {
            set sortFlag    1
            continue
        }
        foreach item $list {
            if {[lsearch $mergedList $item] >= 0} {
                incr duplicate
            } else {
                lappend mergedList $item
            }
        }
    }

    if {$sortFlag} {
        set mergedList  [lnumsort $mergedList]
    }

    return $duplicate
}



########################################################################
# Procedure:    host2addr
#
# Description:  This command converts an IP address in form 100.101.102.103 
#               to a list of hex bytes all in upper case letters.
#
# Arguments(s): ipAddr: ip address to convert
#
# Return(s):    IP address in list of hex bytes
#
########################################################################
proc host2addr {ipAddr} \
{
    set ipHex        {}

    set delimiter .
    regexp {([:.])} $ipAddr match delimiter

    set protocol [expr [string match $delimiter :]?"ipV6":"ip"]

    switch $protocol {
        ipV6 {
            set ipHex [ipv6::host2addr $ipAddr]
        }
        ip {
            set ipname [split $ipAddr $delimiter]
            if {[llength [string trim [join $ipname]]] == 4} {
                foreach i $ipname {
                    if {$i > 255 || $i < 0} {
                        set ipHex {}
                        break
                    }
                    set hexCharacter [format "%02X" $i]
                    set ipHex [linsert $ipHex end $hexCharacter]
                }
            }
        }
    }

    return $ipHex
}


########################################################################
# Procedure:    long2IpAddr
#
# Description   Converts long word into an IP address in 
#                   form x.y.z.a
#
# Argument(s):  longword to convert
#
# Returns:      Ip Address x.y.z.a OR 
#               0.0.0.0 if invalid input arguments
#
#########################################################################
proc long2IpAddr {value} \
{
    if [catch {set ipAddress "[expr {(($value >> 24) & 0xff)}].[expr {(($value >> 16) & 0xff)}].[expr {(($value >> 8 ) & 0xff)}].[expr {$value & 0xff}]"} ipAddress] {
        set ipAddress 0.0.0.0
    }

    return $ipAddress
}


########################################################################
# Procedure:    byte2IpAddr
#
# Description   Converts 4 hexideciaml bytes into an IP address in 
#                   form x.y.z.a
#
# Argument(s):  hexBytes:   list of bytes to convert
#
# Returns:      Ip Address x.y.z.a OR 
#               0.0.0.0 if invalid input arguments
#
#########################################################################
proc byte2IpAddr {hexBytes} \
{
    set newIpAddr       "0.0.0.0"

    # Validate input parameters.

    # If given a string of 8 bytes instead of list of 4, convert it to a list.
    set hexBytes       [string trim $hexBytes]
    set hexBytesLength  [llength $hexBytes]

    if {$hexBytesLength == 1} {

        if {[string length [string trim $hexBytes]] == 8} {

            set hexBytesString  $hexBytes
            set hexBytes [list]
            for {set i 0} {$i < 4} {incr i} {
                lappend hexBytes   [string range   $hexBytesString 0 1]
                set hexBytesString [string replace $hexBytesString 0 1]
            }

        } else {
            set hexBytes [list 0 0 0 0]
        }

    } elseif {$hexBytesLength != 4} {
        set hexBytes [list 0 0 0 0]
    }


    # Convert to decimal.
    regsub -all {(.*) (.*) (.*) (.*)} $hexBytes \
        {[format "%d %d %d %d" "0x\1" "0x\2" "0x\3" "0x\4"]} newIpAddr
    if {[catch {subst $newIpAddr} newIpAddr]} {
        set newIpAddr [list 0 0 0 0]
    }

    # If any invalid values, return 0.0.0.0
    foreach byte $newIpAddr {
        if {$byte < 0 || $byte > 255} {
            set newIpAddr [list 0 0 0 0]
            break
        }
    }
    set newIpAddr [join $newIpAddr .]

    puts "byte2IpAddr: newIpAddr = $newIpAddr"
    return $newIpAddr
}




########################################################################
# Procedure: num2ip
#
# Description:
#   This command convert a number to an IP address.
# 
# Arguments(s):
#   num - number
#
# Returns: 
#   An IP address.
#             
########################################################################
proc num2ip {num} \
{
    set ipAddr [format "%d.%d.%d.%d" [expr {($num >> 24) & 255}] [expr {($num >> 16) & 255}] \
                                     [expr {($num >>  8) & 255}] [expr { $num        & 255}]]
    return $ipAddr
}



########################################################################
# Procedure: ip2num
#
# This command converts an IP address of the form d.d.d.d into a 32-bit
# unsigned number.
#
# Arguments(s):
#   ipAddr      - ip address of the form d.d.d.d
#
# Return:
#   ipNum
#
########################################################################
proc ip2num {ipAddr} \
{
    set ipNum   0

    if {[scan $ipAddr "%d.%d.%d.%d" a b c d] == 4} {
        set ipNum   [format %u [expr {($a<<24)|($b<<16)|($c<<8)|$d}]]
    }

    return $ipNum
}


########################################################################
# Procedure: long2octet
#
# This command converts a multi-byte number into multi octets in a list
#
# Argument(s):
#       value           the value to convert
#
#########################################################################
proc long2octet {value {sizeInBytes 2} } \
{

    switch $sizeInBytes {
            2 {
                return  [format "%02x %02x" \
                                    [expr {(($value >> 8) & 0xff)}]   \
                                    [expr   {$value & 0xff}]]
            }
            3 {
                return  [format "%02x %02x %02x" \
                                    [expr {(($value >> 16) & 0xff)}]  \
                                    [expr {(($value >> 8 ) & 0xff)}]  \
                                    [expr   {$value & 0xff}]]
            }
            4 {
                return  [format "%02x %02x %02x %02x" \
                                    [expr {(($value >> 24) & 0xff)}]  \
                                    [expr {(($value >> 16) & 0xff)}]  \
                                    [expr {(($value >> 8 ) & 0xff)}]  \
                                    [expr   {$value & 0xff}]]     
            }
            1 -
            default {
                return [list [format %02x $value ]]
            }
    }  
}


########################################################################
# Procedure: list2word
#
# This command converts a 2-byte list into a word
#
# Argument(s):
#       mylist           the value to convert
#
#########################################################################
proc list2word {mylist} \
{
    set listlength  [llength $mylist]
    set result      0

    if {$listlength <= 2 && $listlength > 0} {
        incr listlength -1
        set j 0
        for {set i $listlength} {$i >= 0} {incr i -1} {
            incr result  [expr [hextodec [lindex $mylist $i]] << ($j * 8)]
            incr j                
        }
    }

    return $result
}

########################################################################
# Procedure: value2Hexlist
#
# Description:	This command converts a number into a hex
#
# Argument(s):
#   value   - a number
#	width	- the hex list lenght to be generated
#
#########################################################################
proc value2Hexlist { value width } \
{
    set retValue {}
    while { $width } {
        set retValue [linsert $retValue 0 [format "%02x" [expr $value & 255]]]
        incr width -1
        set value [expr $value >> 8]
    }
    return $retValue
}

########################################################################
# Procedure: hexlist2Value
#
# Description:	This command converts a hex list into a number
#
# Argument(s):
#       hexlist		- the hex list ( example {01 02 03 04} )
#
#########################################################################
proc hexlist2Value { hexlist } \
{
   set retValue 0
   foreach byte $hexlist {
      set retValue [expr ($retValue << 8) | 0x$byte]
   }
   return $retValue
}



########################################################################
# Procedure:    expandHexString
#
# Description:  Expands a string of delimited hex values:
#
#                   0 a b 1  becomes 00 0a 0b 01
#                   0:a:b:21 becomes 00:0a:0b:21
#
#               Does not verify the validity of the original hex string.
#
# Argument(s):  bytesList
#               delimiter
#
# Returns:      expanded hex string
#
#########################################################################
proc expandHexString {byteList {delimiter :}} \
{
    set hexList [list]

    regsub -all $delimiter $byteList " " byteList
    foreach byte $byteList {
        regsub -all {(.*)} $byte \
            {[format "%02x " 0x\1]} byte 
        append hexList [subst "$byte"]
    }
    regsub -all " " [string trim $hexList] $delimiter hexList

    return $hexList
}


########################################################################
# Procedure: getMultipleNumbers
#
# This procedure gives two numbers that are multiples of each other but
# less than the allowed maximum number. If he "number" is a prime number
# than this procedure may not be useful.
#
# Argument(s):
#       number              the number whose multiple is to be found
#       maxAllowedNum   the maximum allowed number
#       numA                the multiplier
#       numB                    the divider
#
#########################################################################
proc getMultipleNumbers {number maxAllowedNum numA numB} \
{
    upvar $numA a
    upvar $numB b

    # just pick an arbitrary number for max value for loop
    for {set divider 2} {$divider <= 1000} {incr divider} {
        set result      [expr $number/$divider]
        set remainder   [expr $number%$divider]
        if {$remainder != 0} {
            continue
        }
        if {$result > $maxAllowedNum} {
            continue
        }
        set a $result
        set b $divider
        return 0
    }

    return 1
}


########################################################################
# Procedure: hextodec
#
# This command converts a hex number to a decimal number
#
# Argument(s):
#   number  - hex number to convert
#
########################################################################
proc hextodec {number} \
{
    if [catch {format "%u" "0x$number"} retCode] {
        puts "Invalid hex number: $number"
        set retCode -1
    }
    return $retCode
}


########################################################################
# Procedure: dectohex
#
# This command converts a decimal number to a hex number
#
# Argument(s):
#   number  - decimal number to convert
#
########################################################################
proc dectohex {number} \
{
    if [catch {format "%x" $number} retCode] {
        puts "Invalid decimal number: $number"
        set retCode -1
    }

    return $retCode
}


########################################################################
# Procedure: incrMacAddress
#
# This command increments the last three bytes (24-bit word) of the MAC
# address.
#
# Argument(s):
#   macaddr         mac address to increment
#   amt             increment the field by this number
#
########################################################################
proc incrMacAddress {macaddr amt} \
{
    upvar $macaddr valList

    set hexnum [format "%02x%02x%02x" "0x[lindex $valList 3]" \
                             "0x[lindex $valList 4]" "0x[lindex $valList 5]"]
    set decnum [hextodec $hexnum]
    set decnum [incr decnum $amt]
    set hexnum [format "%06x" "0x[dectohex $decnum]"]

    scan $hexnum "%02s%02s%02s" byte3 byte4 byte5

    set valList [lreplace $valList 3 3 $byte3]
    set valList [lreplace $valList 4 5 $byte4 $byte5]
    return $valList
}


########################################################################
# Procedure: incrIpField
#
# Description: Increments the specified byte of IP address
#
#
# Argument(s):
#   ipAddress       IP address whose byte to be incremented
#   byteNum         the byte field to be incremented
#   amount             increment the field by this number
#
########################################################################
proc incrIpField {ipAddress {byteNum 4} {amount 1}} \
{
    set one [ip2num $ipAddress]
    set two [expr {$amount<<(8*(4-$byteNum))}]

    return  [long2IpAddr [expr {$one + $two}]]
}



########################################################################
# Procedure: incrIpFieldHexFormat
#
# Description: Increments the specified byte of IP address.  Both the input
#              and returned IP address are in hex format.
#
#
# Argument(s):
#   ipAddress       IP address whose byte to be incremented (It's in the form
#                    of 4 byte hex number:  ex, "4c 2e 01 05"  
# 
#   byteNum         the byte field to be incremented
#   amount          increment the field by this number
#
########################################################################
proc incrIpFieldHexFormat {ipAddress {byteNum 4} {amount 1}} \
{
    set hexIpAddr   0x[join $ipAddress ""]

    set val [format %x [expr [format %d $hexIpAddr] + [expr {$amount<<(8*(4-$byteNum))}]]]
    return [long2octet [format %d "0x$val"] 4]
}
########################################################################
# Procedure: incrHostIpAddr
#
# Description: Increments the host portion of the IP address
#              NOTE:  will carry!!
#
# Argument(s):
#   ipAddress      - ip address to increment
#   amount         - amount to increment by
#
########################################################################
proc incrHostIpAddr {ipAddress {amount 1}} \
{
    return [incrIpField $ipAddress 4 $amount]
}

###############################################################################
# Procedure: isIpAddressValid
#
# Description: Verify that the ip address is valid.
#
# Arguments: ipAddress - the ip address to validate
#
# Returns: true if the ip address is valid, false otherwise.
###############################################################################
proc isIpAddressValid {ipAddress} {

    set retCode $::true

    if {[info tclversion] == "8.0"} {
        # Advanced regular expressions are not supported in 8.0

        # First check to see that there are four octets
        if {[regexp {^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$} $ipAddress]} {

            # Now check each octet for a legitimate value
            foreach byte [split $ipAddress .] {
                if {($byte < 0) || ($byte > 255)} {
                    set retCode $::false
                    break
                }
            }
        } else {
            set retCode $::false
        }
    } else {

        # The ip address should be four octets
        if {[regexp {^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$} \
                $ipAddress]} {

            # Now check each octet for a legitimate value
            foreach byte [split $ipAddress .] {
                if {($byte < 0) || ($byte > 255)} {
                    set retCode $::false
                    break
                }
            }
        } else {
            set retCode $::false
        }
    }

    return $retCode
}


###############################################################################
# Procedure:    isMacAddressValid
#
# Description:  Verify that the mac address is valid.
#
# Input:        macAddress:    address to validate
#
# Output:       TCL_OK if address is valid, else
#               TCL_ERROR
#
###############################################################################
proc isMacAddressValid {macAddress} \
{
    set retCode $::TCL_ERROR

    regsub -all { |:} $macAddress " " macAddress
    if {[llength $macAddress] == 6} {

    	set retCode $::TCL_OK
        foreach value $macAddress {
            if {[string length $value] == 2} {
                if {![regexp {[0-9a-fA-F]} $value match]} {
                    set retCode $::TCL_ERROR
                    break
                }
            } else {
                set retCode $::TCL_ERROR
                break
            }
        }
    }

    return $retCode
}


###############################################################################
# Procedure:   isPartialMacAddressValid
#
# Description: Given a mac address, is it valid.  The given address does not have 
#              to be complete
#
# Arguments:   macAddress - the partial address to verify
#
# Returns:     1 if it is valid, 0 if not valid
###############################################################################
proc isPartialMacAddressValid { macAddress } \
{
    set retCode 1

    if {[info tclversion] > 8.0} {
        if {![regexp {^([0-9a-fA-F]{1,2}( )*)*$} $macAddress]} {
            set retCode 0
        }
    } else {
        if {[string length $macAddress] > 2} {
            set splitChar [string index $macAddress 2]
            set macAddress [split $macAddress $splitChar]
        }

        foreach value $macAddress {
            if {![regexp {^([0-9a-fA-F]+)$} $value]} {
                set retCode 0
            }
        }
    }

    return $retCode
}




###############################################################################
# Procedure:   getIpV4MaskWidth
#
# Description: This proc gets ip mask as input and calculates the maskWidth.
#
# Arguments:   ip mask - ipV4 format.
#    
# Returns      mask width.
###############################################################################
proc getIpV4MaskWidth {ipV4Mask} \
{
    scan $ipV4Mask "%d.%d.%d.%d" b1 b2 b3 b4
	
	set result  [expr ($b4 | $b3 << 8 | $b2 << 16 | $b1 << 24) ^ 0xFFFFFFFF]
	
	for {set mask  0} { $mask < 32} {incr mask} {
		if { [expr $result >> $mask] == 0} {
			break;
		}
	}
	set mask [expr 32 - $mask]
	
    return $mask
}


###############################################################################
# Procedure:   getIpV4MaskFromWidth
#
# Description: This proc takes the mask prefix as input and calculates the ip mask.
#
# Arguments:   mask width - an integer number between 0 and 32.
#    
# Returns      mask ip.
###############################################################################
proc getIpV4MaskFromWidth {maskWidth} \
{
    set mask [expr (0xffffffff << (32 - $maskWidth)) & 0xffffffff]
    return [num2ip $mask]
}

########################################################################
# Procedure: buildIpMcastMacAddress
#
# This command builds the MAC address to use when transmitting multi-
# cast packets.
#
# Arguments(s):
#       groupAddress    IP multicast group address
#
# NOTE:The Ethernet directly supports the sending of local multicast
# packets by allowing multicast addresses in the destination field of 
# Ethernet packets. All that is needed to support the sending of
# multicast IP datagrams is a procedure for mapping IP host group
# addresses to Ethernet multicast addresses. 
#
# An IP host group address is mapped to an Ethernet multicast address 
# by placing the low-order 23-bits of the IP address into the low-order
# 23 bits of the Ethernet multicast address 01-00-5E-00-00-00 (hex)
# [RFC1112]. Because there are 28 significant bits in an IP host group
# address, more than one host group address may map to the same Ethernet
# multicast address. 
########################################################################
proc buildIpMcastMacAddress {groupAddress} \
{
    set mcastIP [host2addr $groupAddress]

    # the lower 3 bytes of DA need to match the lower 23 bits of the multicast IP addr
    set DA  [format "%02x %02x %02x %02x %02x %02x" 01 00 0x5e \
                    [expr "0x[lindex $mcastIP 1]" & 0x7f] \
                    "0x[lindex $mcastIP 2]" \
                    "0x[lindex $mcastIP 3]"]

    return $DA
}


