##################################################################
# $RCSfile: SendPacket.tcl,v $ - 
#
# Copyright (c) 2000 by Extreme Networks Inc.
# 
# Revision control history
# ------------------------
# $Header: /export/cvsroot/automation/Lib/SendPacket.tcl,v 2.37.6.38 2010/08/24 01:39:49 ghundertmark Exp $
#
# Extreme Networks modification history
# -------------------------------------
# $Log: SendPacket.tcl,v $
# Revision 2.37.6.38  2010/08/24 01:39:49  ghundertmark
# Merge branch 12_4 to trunk
#
# Revision 2.37.6.38  2010/08/24 01:39:49  ghundertmark
# Merge branch 12_4 to trunk
#
# Revision 2.37.6.37  2009/08/27 19:03:20  lagrawal
# merge from dev branch
#
# Revision 2.37.6.36  2009/07/07 22:39:01  lagrawal
# removed extra empty line causing issue in some procs
#
# Revision 2.37.6.35.2.5  2010/06/16 05:37:28  nellinivasu
# udfRepeat default value is set to 1.
#
# Revision 2.37.6.35.2.4  2010/05/26 06:02:16  anarayanan
# udfRepeat parameter added for CFM Frame support
#
# Revision 2.37.6.35.2.3  2009/08/10 08:46:27  rperumal
# Considered vlan tag to calculate ipTotalLength in proc SendIgmpFrame
#
# Revision 2.37.6.35.2.2  2009/07/07 22:37:02  lagrawal
# removed extra empty line causing issue in some procs
#
# Revision 2.37.6.35.2.1  2009/07/07 21:35:28  lagrawal
# fixed merge issue extra line was causing a issue
#
# Revision 2.37.6.35  2009/07/01 10:55:46  nellinivasu
# Merged From Branch 'branch-dev_v12-1-rel4'
#
# Revision 2.37.6.34  2009/06/05 00:25:06  jramarao
# Merged from DEV after May 26 2009
#
# Revision 2.37.6.33  2009/05/14 18:02:23  lagrawal
# Clean up tcl syntax
#
# Revision 2.37.6.32  2009/04/14 00:48:47  lagrawal
# merge from dev branch
#
# Revision 2.37.6.31  2009/03/18 21:48:26  jramarao
# From branch-dev_v12-1-rel4
#
# Revision 2.37.6.30  2008/11/20 22:59:01  jramarao
# lengthOverride
#
# Revision 2.37.6.29.2.2  2008/11/24 11:38:11  slakshmanan
# Added TOS, UserPriority and priority to "sendIgmpFrame"
#
# Revision 2.37.6.29.2.1  2008/10/20 20:04:20  lagrawal
# added lengthOverride to function ixiaConf_2Ports_ip use can set the value true/false to overide length/keep it same when sending packet , override packet simetime is treated as bad packet
#
# Revision 2.37.6.29.2.6  2009/05/11 20:07:49  mhannon
# backed out last change
#
# Revision 2.37.6.29.2.5  2009/05/11 19:54:20  mhannon
# added -frameSizeMAX -frameSizeMIN  to biSendFrame
#
# Revision 2.37.6.29.2.4  2009/04/03 09:29:27  lagrawal
# merge from branch-pioneer2_dev-v12-1-rel4 to branch-dev_v12-1-rel4
#
# Revision 2.37.6.29.2.3  2009/03/31 23:36:13  lagrawal
# merge from branch-pioneer_dev-v12-1-rel4
#
# Revision 2.37.6.29.2.2.2.2  2009/02/17 21:48:10  ghundertmark
# add protocolTag to enable 88a8 in the ethertype offset another proc.
#
# Revision 2.37.6.29.2.2.2.1  2009/02/17 21:43:19  ghundertmark
# add protocolTag to enable 88a8 in the ethertype offset.
#
# Revision 2.37.6.29.2.2  2008/11/24 11:38:11  slakshmanan
# Added TOS, UserPriority and priority to "sendIgmpFrame"
#
# Revision 2.37.6.29.2.1  2008/10/20 20:04:20  lagrawal
# added lengthOverride to function ixiaConf_2Ports_ip use can set the value true/false to overide length/keep it same when sending packet , override packet simetime is treated as bad packet
#
# Revision 2.37.6.29  2008/09/19 22:29:26  lagrawal
# merge from fixes
#
# Revision 2.37.6.28  2008/08/05 03:44:05  lagrawal
# Add option to skip the default ipTotalLength calculation in SendIgmpFrame
#
# Revision 2.37.6.27.4.1  2008/05/21 12:20:23  nellinivasu
# Added ipTotalLength to the proc SendIgmpFrame.
#
# Revision 2.37.6.27  2008/04/29 06:27:43  nellinivasu
# srcIpMask & dstIpMask options added in proc SendIgmpFrame.
#
# Revision 2.37.6.26  2008/01/04 00:44:09  achilukuri
# Added variable ZeroStats to get the correct tx-Tx pkts count when simultaneously tx  and rx from 2 ports
#
# Revision 2.37.6.25  2007/10/11 22:23:11  achilukuri
# Added dataPattern option to SendIgmpFrame proc
#
# Revision 2.37.6.24  2007/03/02 10:20:15  nellinivasu
# Modified proc SendArpFrame to support destHwAddr in ARP payload.
#
# Revision 2.37.6.23  2007/01/25 19:26:09  achilukuri
# Release  Q3FY07_11.6 Phase 1 commit
#
#
# Revision 2.37.6.21.2.1  2007/01/24 13:11:55  aprakasham
# Added UDF options to Proc SendArpframe
#
# Revision 2.37.6.22  2007/01/19 22:30:43  jramarao
# SendArpRequest procedure corrected
#
# Revision 2.37.6.21.2.1  2007/01/24 13:11:55  aprakasham
# Added UDF options to Proc SendArpframe
#
# Revision 2.37.6.21  2006/12/20 18:49:26  dsuk
# exos-Q2FY07-rel11_5-12202006 release commit
#
# Revision 2.37.6.20  2006/11/11 00:03:20  skumar
# DHCP changes from Justus
#
# Revision 2.37.6.19  2006/10/13 18:01:58  skumar
# Added FrameRate option
#
# Revision 2.37.6.18.2.1  2006/11/01 22:33:07  dsuk
# added frameSizeMIN and frameSizeMAX arguments
#
# Revision 2.37.6.18  2006/08/25 16:36:20  djain
# Merged from branch 11_4
#
# Revision 2.37.6.17.2.1  2006/08/23 11:13:14  nellinivasu
# Added sClass in proc SendIpFrame for BGP Graceful restart test cases.
#
# Revision 2.37.6.17  2006/06/30 22:35:33  ghundertmark
# Q4FY06 Release commit
#
# Changes made to debug ixia transmission problem.
#
# Revision 2.37.6.15  2006/05/29 13:19:30  nellinivasu
# Changes made to debug ixia transmission problem.
#
# Revision 2.37.6.14  2006/05/26 12:17:33  nellinivasu
# Changes made to debug ixia transmission problem.
#
# Revision 2.37.6.13  2006/02/15 14:42:08  eyoung
# Modified SendArpRequest to temporarily disable ARP protocol server.
#
# Revision 2.37.6.12  2005/12/21 22:24:18  smohanty
# Commit for Release 12
#
# Revision 2.37.6.11  2005/11/30 02:26:37  skumar
# Supply srcHwAddr option
#
# Revision 2.37.6.10.4.1  2005/11/08 01:55:03  dsuk
# added tag parameter to SendDhcpFrame
#
# Revision 2.37.6.10  2005/09/19 21:52:29  skumar
# Fix the dontTx condition
#
# Revision 2.37.6.9  2005/09/16 02:05:10  skumar
# Added dontTx arg. Default 0. Used for ONLY stream config
#
# Revision 2.37.6.8  2005/06/29 16:57:54  cshaw
# Release exos-br-10
#
# Revision 2.37.6.7  2005/03/09 22:21:23  alim
# Add saMode and daMode for SendArpFrame so we can increment
#
# Revision 2.37.6.6  2004/09/30 00:59:25  mverma
# Exos Rel7 check in.
#
# Revision 2.37.6.5.2.1  2004/09/08 00:27:27  skumar
# Added args for ACL support
#
# Revision 2.37.6.5  2004/07/28 18:34:49  skumar
# Add udf args to SendIpFrame procs
#
# Revision 2.37.6.4  2004/06/16 20:09:52  cshaw
# merge from main trunk again for ixOS3.70 stuff
#
# Revision 2.52  2004/01/24 01:48:49  mverma
# Add new options, tagMode and tagRepeat to biSendFrame
#
# Revision 2.51  2003/12/18 02:55:32  skumar
# Set default rxPortId to 0 to avoid messing with rx ports config unnecessarily in SendIpFrame
#
# Revision 2.50  2003/10/31 16:27:59  skumar
# Make tolernace in SendFrameToOtherPort to be 4%.
#
# Revision 2.49  2003/08/18 19:35:38  skumar
# Call ixia_groupPorts with addition params needed for ixiaGenMap.
#
# Revision 2.48  2003/07/25 18:02:58  cshaw
# Merged from br-1-6
#
# Revision 2.47  2003/07/13 00:46:00  skumar
# Added better debugability info.
#
# Revision 2.46.6.1  2003/07/01 22:33:55  cshaw
# Add new options, tagMode and tagRepeat to SendIpFrame
#
# Revision 2.37.6.3  2004/05/03 23:40:32  skumar
# Send Incremental/decremental igmp reports
#
# Revision 2.37.6.2  2004/04/01 21:57:03  skumar
# Commit as part of release5
#
# Revision 2.37.6.1  2003/08/20 03:20:05  cshaw
# trunk-exos release
#
# Revision 2.37.4.2  2003/07/17 17:08:00  cshaw
# Add new options, tagMode and tagRepeat to SendIpFrame
#
# Revision 2.37.4.1  2003/06/23 21:28:45  cshaw
# Merged in EW trunk
#
# Revision 2.46  2003/04/18 19:30:22  autotest
# Changes as taken from br-1-3.
#
# Revision 2.45.6.1  2003/04/14 19:36:18  autotest
# Add tagmode, tagRepeat and saCount,daCount.
#
# Revision 2.45  2003/02/06 03:19:33  tquach
# add more option on dhcp frame
#
# Revision 2.44  2002/12/10 22:50:22  skumar
# Merged from br-1-0.
#
# Revision 2.43.2.4  2002/12/10 21:07:27  skumar
# Put comments, Merged from br-1-0.
#
# Revision 2.43.2.3  2002/12/05 00:40:06  skumar
# Add dClass for ospf specific tests.
#
# Revision 2.43.2.2  2002/11/07 19:21:19  tquach
# add new function biSendFrame
#
# Revision 2.43.2.1  2002/11/05 20:23:33  eyoung
# Modified SendArpRequest to use SaveAndSetProtocolServer and
# RestoreSavedProtocolServer functions.
#
# Revision 2.43.2.3  2002/12/05 00:40:06  skumar
# Add dClass for ospf specific tests.
#
# Revision 2.43.2.2  2002/11/07 19:21:19  tquach
# add new function biSendFrame
#
# Revision 2.43.2.1  2002/11/05 20:23:33  eyoung
# Modified SendArpRequest to use SaveAndSetProtocolServer and
# RestoreSavedProtocolServer functions.
#
# Revision 2.43  2002/10/29 23:57:31  skumar
# Include sNode in SendIpxFrames call.
#
# Revision 2.42  2002/10/14 21:12:03  aleu
# give dest ip ($requestIp) in parameters of DisableProtocolServer{} to clean up the addressItem
#
# Revision 2.41  2002/09/15 23:52:29  autotest
# added parameter for new flow redirect test cases.
#
# Revision 2.40  2002/08/27 21:35:06  eyoung
# Enhanced SendIpFrame to allow address counts to be specified when doing MAC or IP address incrementing.
#
# Revision 2.39  2002/07/29 19:22:53  skumar
# Add headers.
#
# Revision 2.38  2002/07/19 00:33:27  skumar
# Put a after 500 in SendArpFrame.
#
# Revision 2.37  2002/06/28 17:11:49  aleu
# change rxPort to be same as txPort in SendIgmpFrame{}
#
# Revision 2.36  2002/05/25 02:04:15  tquach
# put percentage in sendarp
#
# Revision 2.35  2002/05/06 21:38:41  aleu
# remove usage of all cardSpeed global var
#
# Revision 2.34  2002/04/22 18:01:59  skumar
# Send rxProto for correct l2 learning pkt in SendIpxPacket.
#
# Revision 2.33  2002/04/10 17:10:35  skumar
# Add startCardNum to sendFrame.
#
# Revision 2.32  2002/04/01 18:51:15  skumar
# Expose frameRate via SendFrame.
#
# Revision 2.31  2002/03/28 21:25:24  aleu
# enable tcpConfig{} to set seqNum, syn/fin/ack/rst flags
#
# Revision 2.30  2002/03/28 18:21:14  skumar
# Fix dependency with startCardNum.
#
# Revision 2.29  2002/03/20 19:42:58  tquach
# change function name and code from getframepercentsent to sendframetoother port
#
# Revision 2.28  2002/01/22 00:06:42  tquach
# Add arp increment
#
# Revision 2.27  2001/12/12 01:00:46  tquach
# Fix problem with learning address
#
# Revision 2.26  2001/12/06 19:49:47  tnguyen
# Add some options needed in new performance module
#
# Revision 2.25  2001/09/28 20:50:41  aleu
# remove redundent calls in GetFramePercentSent()
#
# Revision 2.24  2001/09/12 23:21:07  tquach
# Add UDF feature
#
# Revision 2.23  2001/07/19 22:27:55  skumar
# Changes in SendIpxPacket in order to fix udf problem on IXIA GBIC.
#
# Revision 2.22  2001/06/20 00:04:03  Autotest
# Remove bracket
#
# Revision 2.21  2001/06/18 21:56:03  Autotest
# Add tagpriority
#
# Revision 2.20  2001/06/10 01:36:44  skumar
# Added a new function SendFrameFromMultiplePorts.
#
# Revision 2.19  2001/06/07 00:51:03  skumar
# Minor arg additions to various calls.
#
# Revision 2.18  2001/06/06 21:06:17  Autotest
# Add comment
#
# Revision 2.17  2001/05/04 19:59:05  tquach
# Send some initial package before collect information
#
# Revision 2.16  2001/05/03 01:20:45  tquach
# Add getframepercentsent function
#
# Revision 2.15  2001/04/13 23:00:20  skumar
# Put the direction 1Way in SendIpx...
#
# Revision 2.14  2001/03/21 18:25:07  aleu
# add frameSizeType stream option in SendIpFrame
#
# Revision 2.13  2001/02/16 23:35:03  aleu
# *** empty log message ***
#
# Revision 2.12  2001/01/14 02:26:54  tquach
# Add DHCP procedure
#
# Revision 2.9  2000/11/21 01:25:28  skumar
# Changed the direction flag to be "2Way" in sendIpx.
#
# Revision 2.8  2000/11/03 23:14:30  tnguyen
# Add info message
#
# Revision 2.7  2000/10/25 18:49:29  skumar
# Added SendGnsRequests related to IPX suite.
#
# Revision 2.6  2000/09/24 22:59:01  skumar
# Added proper SendLearn flag based on rxPortId value, added SendIpxFrames.
#
# Revision 2.5  2000/09/12 22:58:26  tnguyen
# Add special logic to response to arp request with unicast dest mac address
#
# Revision 2.4  2000/08/13 18:25:05  tnguyen
# Add goodCheckSum option to SendIgmpFrame
#
# Revision 2.3  2000/08/10 22:06:13  skumar
# Fixed default option to "destMac" and added ipOptions in SendIpFrame.
#
# Revision 2.2  2000/08/04 22:25:32  tnguyen
# Global change of commonly used funtions to conform with new conventions
#
# Revision 2.1  2000/08/04 18:26:13  tnguyen
# Initial uncommented version
#
#
##################################################################

################################################################## 
# Procedure Name: SendFrame
#   
# Description: Sends mac frame from a txPortId to rxPortId
#     
#     
#
# Input args: txPortId, rxPortId, protocol, protocol, sourceMac, destMac, numFrames
#             frameSize, frameSizeType, dataPattern, streamType, fcsError, saMode, daMode
#             percentage, tag, tagPriority, frameRate
# Output args: none
# Typical usage:
#             SendFrame $txPortId
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,VerifySwitchOutput
#                          VerifyTraffic)
# Category: SendTraffic
##################################################################
proc SendFrame {args} {
#puts "----Enter into SendFrame --------------"  
 parse_args SendFrame $args {
      txPortId "1"
      rxPortId "0"
      protocol "mac"
      sourceMac "default"
      destMac "default"
      numFrames "1"
      frameSize "64"
      frameSizeType "sizeFixed"
      frameSizeMAX "1518"
      frameSizeMIN "64"
      dataPattern "1234"
      ethernetType "noType"
      frameType "08 00"
      streamType "stopStream"
      fcsError "good"
      saMode "idle"
      daMode "idle"
      saCount ""
      daCount ""
      percentage "100"
      tag "none"
      tagPriority "0"	      
      protocolTagId "null"
      frameRate "null"
      tagMode "vIdle"
      tagRepeat 1
      udfEnable "false"
      udfInitval "00"
      udfOffset "0"
      udfCountertype "c8"
      udfContinuousCount "false"
      udfRepeat "1"
      protoOffsetEnable "false"
      protoOffset "14"
      userDefTag ""
      dontTx "0"
      ZeroStats "yes"
   }
   global portMappingList

   set portList [lindex $portMappingList [expr $txPortId-1]]
   result_debug "INFO: DUT[lindex $portList 2] [lindex $portList 1] ingresses from portId [lindex $portList 0]"

   
   global portMappingList

   set portList [lindex $portMappingList [expr $txPortId-1]]
   result_debug "INFO: DUT[lindex $portList 2] [lindex $portList 1] ingresses from portId [lindex $portList 0]"
#puts "--------------------------- l1 -----------------------------" 
  MapIxiaPortId $txPortId txChasisId txCard txPort
#puts "--------------------------- l2 -----------------------------" 
   if {$rxPortId == 0} {
      set sendLearn "false"
      set rxPort [MapIxiaPortId $txPortId rxChasisId rxCard rxPo]
   } else {
      set sendLearn "true"
      MapIxiaPortId $rxPortId rxChasisId rxCard rxPort
   }
   
#puts "--------------------------- l3 -----------------------------" 
   set numIxiaCd [GetNumIxiaCd $txPortId]
#puts "--------------------------- l4 -----------------------------" 
   
   if {$tag != "none" } { set wTag "true" } else {set wTag "false" }
   global startCardNum
   set frameSent [ixiaConf_2Ports -numIxiaCd $numIxiaCd -rate $frameRate \
                  -txChas $txChasisId -txCard $txCard -txPort $txPort -startCardNum $startCardNum \
                  -rxChas $rxChasisId -rxCard $rxCard -rxPort $rxPort -sendLearn $sendLearn \
                  -protocol $protocol -numFrames $numFrames -frameSize $frameSize -frameSizeType $frameSizeType \
                  -frameSizeMAX $frameSizeMAX -frameSizeMIN $frameSizeMIN \
                  -dataPattern $dataPattern -streamType $streamType -fcsError $fcsError \
		  -frameType $frameType -ethernetType $ethernetType -protocolTagId $protocolTagId \
                  -inSaMac $sourceMac -saMode $saMode -inDaMac $destMac -daMode $daMode \
                  -percentage $percentage -wTag $wTag -tagNo $tag -tagPriority $tagPriority \
                  -tagMode $tagMode -tagRepeat $tagRepeat -saCount $saCount -daCount $daCount \
		  -udfEnable $udfEnable -udfInitval $udfInitval -udfOffset $udfOffset -dontTx $dontTx \
                  -udfRepeat $udfRepeat \
		  -udfCountertype $udfCountertype -udfContinuousCount $udfContinuousCount -protoOffsetEnable $protoOffsetEnable -protoOffset $protoOffset \
          -userDefTag $userDefTag -ZeroStats $ZeroStats]
  if {$streamType != "contPacket" && $numFrames > 100 && $dontTx==0} {
    ixiaCheckTxDone $txChasisId $txCard $txPort $numFrames $txPortId
  }
  return $frameSent            
}



################################################################## 
# Procedure Name: SendFrameFromMultiplePorts
#   
# Description: Used to send uni/bi directional mac frames in a number of paired ports.
#     
#     
# Input args:
#      - <txPortId>   - Sending ixia portId
#      - <rxPortId>   - Receiving ixia portId
#      - <direction>  - direction of the mac traffic flow "1Way"/"2Way"
#      - <numFrames>  - Number of mac frames to be sent
#      - <protocol>   - protocol to be used to send mac frames (default mac but sometimes usr specified for protocol based vlan)
#      - <frameSize>  - frame size to be used default 64
#      - <frameSizeType>    - frame size type fixed or random (sizeFixed/sizeRandom)
#      - <dataPattern>   - data pattern to be used to pad
#      - <destIp>     - destination IP address           
#      - <numFrames>  - how many to send
#      - <streamType> - type of the stream stopStream/contStream...
#      - <fcsError> - fcsError in the ixia frame send
#      - <saMode>     - source side sending mode
#      - <daMode>     - receive side sending mode
#      - <percentage> - percentage of the line rate to be sent default 100
#      - <tag>        - tag value to be used if tagged vlan
#      - <applyFilter> - flag to indicate if filter/filterPallette to be applied on the receiving buffer
#
# Output args: none
# Return value: Retruns the frame sent
# Typical usage:
#             SendFrameFromMultiplePorts $txPortId $rxPortId
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,VerifySwitchOutput
#                          VerifyTraffic)
# Category: SendTraffic
##################################################################
proc SendFrameFromMultiplePorts {args} {
   parse_args SendFrame $args {
      txPortId "1"
      rxPortId "2"
      direction "1Way"
      numFrames "1"
      protocol "mac"
      frameSize "64"
      frameSizeType "sizeFixed"
      dataPattern "1234"
      streamType "stopStream"
      fcsError "good"
      saMode "idle"
      daMode "idle"
      percentage "100"
      tag "none"
      applyFilter "0"
      dontTx "0"
   }
   
   MapIxiaPortId $txPortId txChasisId txCard txPort
   MapIxiaPortId $rxPortId rxChasisId rxCard rxPort

   set sendLearn "true"
   set numIxiaCd [GetNumIxiaCd $rxPortId] 
   if {$tag != "none" } { set wTag "true" } else {set wTag "false" }
  
   if {$txCard <= $rxCard} {set startCardNum $txCard} else {set startCardNum $rxCard}
   
   ixiaConf_groupPorts -numIxiaCd $numIxiaCd -startCardNum $startCardNum -txPortId $txPortId -rxPortId $rxPortId \
                       -sendLearn $sendLearn -applyFilter $applyFilter -protocol $protocol \
                       -numFrames $numFrames -frameSize $frameSize -frameSizeType $frameSizeType \
                       -dataPattern $dataPattern -streamType $streamType -fcsError $fcsError \
                       -saMode $saMode -daMode $daMode -dontTx $dontTx \
                       -percentage $percentage -wTag $wTag -tagNo $tag

  if {$streamType != "contPacket" && $numFrames > 100 && $dontTx==0} {
    ixiaCheckTxDone $txChasisId $txCard $txPort $numFrames $txPortId
  }    
}

################################################################## 
# Procedure Name: SendIpFrame
#   
# Description: Used to send ip packets
#     
#     
# Input args: args
# clearStats "yes". By default the receive stats on the transmitting port will be cleared. Set this option to "no"
# if you don't want the receive stats of the port ot be cleared
#
#
# Output args: none
# Return value: Retruns the packet sent
# Typical usage:
#               set frameSent [SendIpFrame -txPortId 1 -destMac $destmac -sourceIp $srcIp -destIp $destaddr -ttl $ttl];
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,VerifySwitchOutput
#                          VerifyTraffic)
# Category: SendTraffic
##################################################################
proc SendIpFrame {args} {
   parse_args SendIpFrame $args {
     protocol "ip"
     txPortId "1"
     rxPortId "0"
     sourceMac "default"
     destMac "00 E0 2B 00 00 01"
     sourceIp "127.0.0.1"
     destIp "127.0.0.1"
     gatewayIp "127.0.0.1"
     dIpMask "255.255.255.0"
     sIpMask "255.255.255.0"
     dClass "classC"
     sClass "classC"
     sourcePort "00"
     destPort "00"
     ttl "64"
     goodChecksum "true"
     numFrames "1"
     frameSize "64"
     frameSizeType "sizeFixed"
     frameSizeMAX "1518"
     frameSizeMIN "64"
     ipOptions ""
     frameRate "default"
     frameType "08 00"
     dataPattern "0000"
     streamType "stopStream"
     fcsError "good"
     tag "none"
     tagMode "vIdle"
     tagRepeat "1"
     protocolTagId "null"
     TOS "default"
     userPriority "0"
     percentage "100"
     priority "0"
     saMode "idle"
     daMode "idle"
     saCount ""
     daCount ""
     ipSaMode "ipIdle"
     ipDaMode "ipIdle"
     ipSaCount ""
     ipDaCount ""
     dontFrag "true"
     tcpSynFlag "false"
     tcpFinFlag "false"
     tcpRstFlag "false"
     tcpAckFlag "false"
     tcpPushFlag "false"
     tcpUrgFlag "false"
     tcpSeqNum "0"
     type "8"
     code "0"
     id "0"
     sequence "00000000"
     direction "1Way"
     maxResponseTime "100"
     groupAddr "224.0.0.1"
     applyFilter "0"
     udfEnable "false"
     udfInitval "00"
     udfOffset "0"
     udfCountertype "c8"
     udfContinuousCount "false"
     protoOffsetEnable "false"
     protoOffset "14"
     userDefTag ""
     clearStats "yes"
     dontTx "0"
   }
   
   set numIxiaCd [GetNumIxiaCd $txPortId]
   MapIxiaPortId $txPortId chasisId card port
   if {$rxPortId==0} {
      set rxPortId $txPortId
   }
   MapIxiaPortId $rxPortId ch c rxPort
   global portMappingList

   set portList [lindex $portMappingList [expr $txPortId-1]]
   result_debug "INFO: DUT[lindex $portList 2] [lindex $portList 1] ingresses from portId [lindex $portList 0]"
   if {$tag != "none" } { set wTag "true" } else {set wTag "false" }
   global startCardNum
   set frameSent [ixiaConf_2Ports_ip -numIxiaCd $numIxiaCd \
              -txChas $chasisId -txCard $card -txPort $port -startCardNum $startCardNum \
              -rxChas $ch -rxCard $c -rxPort $rxPort -frameType $frameType \
              -ipProtocol $protocol -sMacAddr $sourceMac -dMacAddr $destMac \
              -sIpAddr $sourceIp -dIpAddr $destIp -dDutIpAddr $gatewayIp -ttl $ttl \
              -pSrcPort $sourcePort -pDstPort $destPort -frameSizeType $frameSizeType \
              -frameSizeMAX $frameSizeMAX -frameSizeMIN $frameSizeMIN \
	      -goodChecksum $goodChecksum -numFrames $numFrames -frameSize $frameSize \
	      -frameRate $frameRate -dataPattern $dataPattern -streamType $streamType \
	      -fcsError $fcsError -wTag $wTag -tagNo $tag -tagNo $tag -tagMode $tagMode -tagRepeat $tagRepeat \
	      -TOS $TOS -userPriority $userPriority -protocolTagId $protocolTagId \
	      -percentage $percentage -priority $priority -ipOptions $ipOptions -direction $direction \
              -saMode $saMode -saCount $saCount -daMode $daMode -daCount $daCount \
              -ipSaMode $ipSaMode -ipSaCount $ipSaCount -ipDaMode $ipDaMode -ipDaCount $ipDaCount \
              -dIpMask $dIpMask sIpMask $sIpMask -dClass $dClass -sClass $sClass \
              -dontFrag $dontFrag -tcpSeqNum $tcpSeqNum -tcpSynFlag $tcpSynFlag -tcpFinFlag $tcpFinFlag \
              -tcpPushFlag $tcpPushFlag -tcpUrgFlag $tcpUrgFlag \
              -tcpRstFlag $tcpRstFlag -tcpAckFlag $tcpAckFlag -sequence $sequence -type $type -code $code \
              -id $id -applyFilter $applyFilter -maxResponseTime $maxResponseTime -groupAddr $groupAddr \
              -udfEnable $udfEnable -udfInitval $udfInitval -udfOffset $udfOffset -udfCountertype $udfCountertype -udfContinuousCount $udfContinuousCount \
              -clearStats $clearStats -dontTx $dontTx \
              -protoOffsetEnable $protoOffsetEnable -protoOffset $protoOffset \
          -userDefTag $userDefTag]
                                  
  if {$streamType != "contPacket" && $numFrames > 100 && $dontTx==0} {
    ixiaCheckTxDone $chasisId $card $port $numFrames $txPortId
  }  
  return $frameSent           
}

################################################################## 
# Procedure Name: SendGnsRequests
#   
# Description: Sends IPX GNS request for all ethernet types ethernetII, ieee8023, ieee8022, iee8023snap.
#              Internally calls SendIpxFrames to send GNS request
#     
# Input args: args
#
#
#
# Output args: none
# Return value: Retruns the frame sent
# Typical usage:
#         set packet [SendGnsRequests -txPortId 1 -dNetwork "00 00 12 37" -etherType ieee8022 -sendLearn "true" \
#                     -serverType "00 04"]
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,VerifySwitchOutput
#                          VerifyTraffic)
# Category: SendTraffic
##################################################################
proc SendGnsRequests {args} {
   parse_args SendGnsRequests $args {
      txPortId "1"
      dNetwork "00 00 00 00"
      numRequests "1"
      etherType "ethernetII"
      sendLearn "true"
      serverType "4"
      sourceNodeCounterMode "0"
      destNodeCounterMode "0"
   }
   set dNode "FF FF FF FF FF FF"
   set sSocket "socketSap"
   set dSocket "socketSap"
   set udfCounterType "c32"
   regsub -all " " [format %04s [string trimleft $serverType " 0"]] "0" serverType
   set udfInitVal "00 03 [string range $serverType 0 1] [string range $serverType 2 3]"
   switch -- $etherType {
      "ethernetII" -
      "ieee8023" {
         set udfOffset "44"
      }
      "ieee8022" {
         # These changes are required since IXIA Gbic does not support udf on odd numbers
         # Kludge to start udf1 from 46 and udf2 from 50.
         set udfOffset "46"   ;# used to be 47
         set udfInitVal "52 00 03 [string range $serverType 0 1] [string range $serverType 2 3]"
      }
      "ieee8023snap" {
         set udfOffset "52"
      }
      default {
         result_debug "unknown etherType: $etherType"
         return -1;
      }
   }
   set frameSent [SendIpxFrames -txPortId $txPortId -etherType $etherType \
              -dNetwork $dNetwork -dSocket $dSocket -dNode $dNode -sSocket $sSocket \
              -sendLearn $sendLearn -enableUdf "true" -numFrames $numRequests \
              -sourceNodeCounterMode $sourceNodeCounterMode \
              -destNodeCounterMode $destNodeCounterMode \
              -udfOffset $udfOffset -udfCounterType $udfCounterType -udfInitVal "$udfInitVal"]

   return $frameSent   
}


################################################################## 
# Procedure Name: SendIpxFrames
#   
# Description: Sends IPX packets for all ethernet types ethernetII, ieee8023, ieee8022, iee8023snap.
#              Internally calls SendIpxFrames to send GNS request
#     
# Input args: args
#
#
#
# Output args: none
# Return value: Retruns the frame sent
# Typical usage:
#  set packet [SendIpxFrames -txPortId $txPortId -rxPortId 9 -sNetwork "00 00 $txPortNw" \
#               -sSocket "socketRipx"  -dNetwork $ixiaFormattedNw -dNode "00 A3 F1 00 00 01" \
#               -etherType $etherProto -sendLearn "true" \
#               -dSocket "socketRipx" -packetType "typeNcp"]
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,VerifySwitchOutput
#                          VerifyTraffic)
# Category: SendTraffic
##################################################################
proc SendIpxFrames {args} {
   parse_args SendIpxFrames $args {
      direction "1Way"
      txPortId "1"
      rxPortId "0"
      etherType "ethernetII"
      rxProto "ethernetII"
      sNetwork "00 00 00 00"
      sSocket "4000"
      dNetwork "00 00 00 00"
      sNode "00 00 00 00 00 00"
      dNode "00 00 00 00 00 00"
      dSocket "4000"
      packetType "typeUnknown"
      numFrames "1"
      frameSize "64"
      frameRate "default"
      dataPattern "0000"
      streamType "stopStream"
      fcsError "good"
      tag "none"
	   tagCfi "resetCFI"
      tagMode "vIdle"
	   tagRepeat "1"
	   userPriority "0"
      percentage "100"
      priority "0"
      sendLearn "true"
      saMode "idle"
      daMode "idle"
      chid "1"
      enableUdf "false"
      udfOffset "52"
      udfCounterType "c32"
      udfInitVal "08 00"
      sourceNodeCounterMode "0"
      destNodeCounterMode "0"

   }

   if {$tag != "none" } { set wTag "true" } else {set wTag "false" }
   set frameSent [ixia_SendIpxPackets -direction $direction -txPortId $txPortId -rxPortId $rxPortId \
              -etherType $etherType -sNetwork $sNetwork -sSocket $sSocket -sNode $sNode \
              -dNetwork $dNetwork -dSocket $dSocket -dNode $dNode -rxProto $rxProto \
              -packetType $packetType -numFrames $numFrames -frameSize $frameSize \
              -frameRate $frameRate -dataPattern $dataPattern -streamType $streamType \
              -fcsError $fcsError -wTag $wTag -tagNo $tag -tagCfi $tagCfi \
              -sourceNodeCounterMode $sourceNodeCounterMode \
              -destNodeCounterMode $destNodeCounterMode \
              -tagMode $tagMode -tagRepeat $tagRepeat -userPriority $userPriority \
              -percentage $percentage -priority $priority -sendLearn $sendLearn \
              -saMode $saMode -daMode $daMode -chid $chid -enableUdf $enableUdf \
              -offset $udfOffset -counterType $udfCounterType -initVal $udfInitVal]
  return $frameSent
}

################################################################## 
# Procedure Name: SendIgmpFrame
#   
# Description: Sends IGMP join/leave packet based on argument type
#
#     
# Input args: args
#
#
# Output args: none
# Return value: Retruns the frame sent
# Typical usage:
#        set frameSent [SendIgmpFrame -txPortId $txPortId -type $joinGroup -destMac $destMacMulticast \
#                        -sourceIp $clientIP1   -destIp $multicastIP -groupAddr $multicastIP ]
#
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,VerifySwitchOutput
#                          VerifyTraffic)
# Category: SendTraffic
##################################################################
proc SendIgmpFrame {args} {
   parse_args SendIgmpFrame $args {
     txPortId "1"
     sourceMac "default"
	  destMac "default"
	  sourceIp "127.0.0.1"
	  destIp "127.0.0.1"
	  ttl "1"
            TOS "default"
            priority "0"
            userPriority "0"
     numFrames "1"
     frameSize "64"
     dontFrag "true"
     ipTotalLength "default"
     ipDaMode "ipIdle"
     ipDaCount ""
	  tag "none"
	  type "22"
	  maxResponseTime "64"
	  groupAddr "224.0.0.1"
        igmpMode "Fixed"
        igmpRepeatCount ""
	  goodChecksum "true"
     streamType "stopStream"
     frameRate "default"
     udfEnable "false"
     udfInitval "00"
     udfOffset "0"
     udfCountertype "c8"
     udfContinuousCount "false"
     dataPattern "0000"	 
     srcIpMask "255.255.255.0"
     dstIpMask "255.255.255.0" 
     lengthOverride ""
   }
   global portMappingList

   if {$ipTotalLength == "default"} {
       if {$tag!="none"} {
       set MACHeaderLength "22"
       } else {
       set MACHeaderLength "18"
       }
       set ipTotalLength [expr $frameSize - $MACHeaderLength]
   }


   set portList [lindex $portMappingList [expr $txPortId-1]]
   result_debug "INFO: DUT[lindex $portList 2] [lindex $portList 1] ingresses from portId [lindex $portList 0]"
   result_debug "Sending a igmp ($type) on portId $txPortId to group $destIp"
   if {$destMac == "default"} {
      set destMac [GetMulticastMac $destIp]
   }
   set numIxiaCd [GetNumIxiaCd $txPortId]
   MapIxiaPortId $txPortId chasisId card port
   if {$tag != "none" } { set wTag "true" } else {set wTag "false" }
   global startCardNum
   set frameSent [ixiaConf_2Ports_ip -numIxiaCd $numIxiaCd \
              -txChas $chasisId -txCard $card -txPort $port -startCardNum $startCardNum \
              -rxChas $chasisId -rxCard $card -rxPort $port -streamType $streamType \
              -ipProtocol "igmp" -sMacAddr $sourceMac -dMacAddr $destMac -frameRate $frameRate \
              -sIpAddr $sourceIp -dIpAddr $destIp -ttl $ttl -goodChecksum $goodChecksum \
              -ipDaMode $ipDaMode -ipDaCount $ipDaCount -igmpMode $igmpMode -igmpRepeatCount $igmpRepeatCount \
	      -numFrames $numFrames -frameSize $frameSize -wTag $wTag -tagNo $tag -type $type -dataPattern $dataPattern \
              -maxResponseTime $maxResponseTime -groupAddr $groupAddr -ipTotalLength $ipTotalLength \
              -dontFrag $dontFrag -sIpMask $srcIpMask -dIpMask $dstIpMask\
           -udfEnable $udfEnable -udfInitval $udfInitval -udfOffset $udfOffset -udfCountertype $udfCountertype -udfContinuousCount $udfContinuousCount -lengthOverride $lengthOverride -TOS $TOS -priority $priority -userPriority $userPriority]
   result_debug "IGMPSent: $frameSent"
   return $frameSent
}

################################################################## 
# Procedure Name: SendArpFrame
#   
# Description: Sends ARP packet from txPortId to rxPortId
#
#     
# Input args: args
#
#
#
# Output args: none
# Return value: Retruns the frame sent
# Typical usage:
#          set frameSent [SendArpFrame -txPortId $portIdTx -sourceIp $srcIp -destIp $destIp -numFrames $nArpFrames];
#
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,VerifySwitchOutput
#                          VerifyTraffic)
# Category: SendTraffic
##################################################################
proc SendArpFrame {args} {
   parse_args SendArpFrame $args {
     txPortId "1"
     type "arpRequest"
     sourceMac "default"
     destMac "FF FF FF FF FF FF"
     saMode "idle"
     daMode "idle"
     sourceIp "127.0.0.1"
     destIp "127.0.0.1"
     arpSaMode "arpIdle"
     arpDaMode "arpIdle"
     numFrames "1"
     frameSize "64"
     frameRate "default"
     streamType "stopStream"
     srcHwAddr "default"
     destHwAddr "default"
     srcHwAddrMode "arpIdle"
     srcHwAddrRepeat "1"
     destHwAddrMode "arpIdle"
     destHwAddrRepeat "1"
     tag "none"
     arpSaRepeat "1"
     arpDaRepeat "1"
     percentage "0.01"
     udfEnable "false"
     udfInitval "00"
     udfOffset "0"
     udfCountertype "c8"
     udfContinuousCount "false"
     dontTx "0"
   }
   
   global portMappingList

   set portList [lindex $portMappingList [expr $txPortId-1]]
   result_debug "INFO: DUT[lindex $portList 2] [lindex $portList 1] ingresses from portId [lindex $portList 0]"
   set numIxiaCd [GetNumIxiaCd $txPortId]
   set rxPo [MapIxiaPortId $txPortId chasisId card port]
   if {$tag != "none" } { set wTag "true" } else {set wTag "false" }
   global startCardNum
   return [ixiaConf_2Ports_arp -numIxiaCd $numIxiaCd \
              -txChas $chasisId -txCard $card -txPort $port -startCardNum $startCardNum \
              -rxChas $chasisId -rxCard $card -rxPort $rxPo -frameRate $frameRate \
              -operation $type -sMacAddr $sourceMac -dMacAddr $destMac \
              -sIpAddr $sourceIp -dIpAddr $destIp -numFrames $numFrames \
	      -saMode $saMode -daMode $daMode -srcHwAddr $srcHwAddr -destHwAddr $destHwAddr \
	      -destHwAddrMode $destHwAddrMode -destHwAddrRepeat $destHwAddrRepeat \
	      -wTag $wTag -tagNo $tag -frameSize $frameSize -streamType $streamType \
	      -arpSaMode $arpSaMode -arpDaMode $arpDaMode -percentage $percentage \
	      -arpSaRepeat $arpSaRepeat -arpDaRepeat $arpDaRepeat -srcHwAddrMode $srcHwAddrMode \
              -srcHwAddrRepeat $srcHwAddrRepeat -dontTx $dontTx -udfEnable $udfEnable \
              -udfInitval $udfInitval -udfOffset $udfOffset -udfCountertype $udfCountertype \
              -udfContinuousCount $udfContinuousCount]
}

################################################################## 
# Procedure Name: SendDhcpFrame
#   
# Description: Sends DHCP frame from txPortId to rxPortId
#
#     
# Input args:
#      - <txPortId>   - Sending portId
#      - <sourceMac>  - source Mac
#      - <destMac>    - destination Mac
#      - <sourceIp>   - source IP address
#      - <destIp>     - destination IP address           
#      - <numFrames>  - how many to send
#      - <streamType> - how to send the frame
#      - <clientHwAddr> - gateway mac
#      - <opcode>     - DHCP code
#      - <optionCodeList> - DHCP option
#
#
# Output args: none
# Return value: Retruns the frame sent
# Typical usage:
#          set frameSent [SendArpFrame -txPortId $portIdTx -sourceIp $srcIp -destIp $destIp -numFrames $nArpFrames];
#
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,VerifySwitchOutput
#                          VerifyTraffic)
# Category: SendTraffic
##################################################################
proc SendDhcpFrame {args} {
   parse_args SendDhcpFrame $args {
     txPortId "1"
     sourceMac "default"
     destMac "00 E0 2B 00 00 01"
     sourceIp "127.0.0.1"
     destIp "127.0.0.1"
     sourcePort "68"
     destPort "67"
     numFrames "1"
     streamType "stopStream"
     fcsError "good"
     saMode "idle"
     daMode "idle"
     maxResponseTime "100"
     clientHwAddr "00 00 86 52 55 CB"
     clientIpAddr "0.0.0.0"
     yourIpAddr "0.0.0.0"
     opCode "dhcpBootRequest"
     optionCodeList "{dhcpMessageType dhcpDiscover}"
     tag "none"
     dontTx "0"
   }
   global portMappingList
#     puts "INSIDE SEND DHCP OPTIONS : $optionCodeList"

   set portList [lindex $portMappingList [expr $txPortId-1]]
   result_debug "INFO: DUT[lindex $portList 2] [lindex $portList 1] ingresses from portId [lindex $portList 0]"

   
   global portMappingList

   set portList [lindex $portMappingList [expr $txPortId-1]]
   result_debug "INFO: DUT[lindex $portList 2] [lindex $portList 1] ingresses from portId [lindex $portList 0]"
   set numIxiaCd [GetNumIxiaCd $txPortId]
   set rxPo [MapIxiaPortId $txPortId chasisId card port]
   if {$tag != "none" } { set wTag "true" } else {set wTag "false" }
   global startCardNum
   set frameSent [ixiaConf_2Ports_Dhcp -numIxiaCd $numIxiaCd \
              -txChas $chasisId -txCard $card -txPort $port -startCardNum $startCardNum \
              -rxChas $chasisId -rxCard $card -rxPort $rxPo \
              -sMacAddr $sourceMac -dMacAddr $destMac -sIpAddr $sourceIp -dIpAddr $destIp \
	      -srcPort $sourcePort -dstPort $destPort -numFrames $numFrames -streamType $streamType -fcsError $fcsError \
	      -saMode $saMode -daMode $daMode -opCode $opCode \
	      -optionCodeList $optionCodeList -clientHwAddr $clientHwAddr \
	      -clientIpAddr $clientIpAddr -yourIpAddr $yourIpAddr -wTag $wTag -tagNo $tag -dontTx $dontTx]
                    
   if {$streamType != "contPacket" && $numFrames > 100 && $dontTx==0} {
     ixiaCheckTxDone $chasisId $card $port $numFrames $txPortId
   }    
   return $frameSent           
}

################################################################## 
# Procedure Name: SendArpRequest
#   
# Description: Sends ARP request from ixPortId for a given IP address. It returns the
#              replier mac address
#
#     
# Input args:
#      - <txPortId> - Sending portId
#      - <myIp> - source Ip address
#      - <requestIp> - destination Ip address
#      - <rxPortId> - optional receiving portId. Will enable protocol server
#                     on this port if greater than 0, so it can reply to arp request
#      - <numTries> - maximum number of tries before quiting and return
#  Output Variables:
#      - none
#
#  Return Value:
#      - return the target MAC address if there is a reply, otherwise
#        "NO_ARP_REPLY"
#
# Typical usage:
#          set frameSent [SendArpRequest $rxPortId $destIp "194.1.1.1" -numTries "2"];
#
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,VerifySwitchOutput
#                          VerifyTraffic)
# Category: SendTraffic
##################################################################
proc SendArpRequest {txPortId myIp requestIp {tag "none"} {rxPortId 0} {numTries 2} {returnFrame 0}} {
     if { 0 } {
   if {$rxPortId > 0} {
      # Instead of the DUT replying to ARP requests, the caller wants the IXIA to reply.
      SaveAndSetProtocolServer $rxPortId $requestIp $requestIp ixInfo -arpService true;
   } else {
      # With certain types of IXIA cards (e.g. LM1000T-5 running at 1 Gbps), if a
      # protocol server is enabled, packets destined for that protocol server won't be
      # available in the capture buffer.  Instead, they get returned as "blank" frames
      # to IXIA's TCL HAL.  Since this function relies on ARP replies being in the
      # capture buffer, the ARP protocol server will be temporarily disabled.
      #SaveAndSetProtocolServer $txPortId $requestIp $requestIp ixInfo -arpService false;
      SaveAndSetProtocolServer $txPortId $myIp  $requestIp ixInfo -arpService false;
   }
}
   StartPortsCapture $txPortId;
   for {set index 0} {$index < $numTries} { incr index } {
      set frameSent [SendArpFrame -txPortId $txPortId -sourceIp $myIp -destIp $requestIp -tag $tag];
      # Ecooper change
      result_debug "Sleeping for 500 ms.";
      after 500;
      result_debug "Sending an arp request to $requestIp from $myIp on portId $txPortId:";
      result_debug "$frameSent";
      set receivedList [GetCapturedFrames $txPortId];
      foreach frameReceived $receivedList {
         result_debug "Frames received on portId $txPortId:";
         result_debug "$frameReceived";
         set messageType [GetMessageType $frameReceived];
         if {$messageType == "ARP_REPLY" } {
            #assume the reply is for us
#            RestoreSavedProtocolServer ixInfo;
            set mac [GetSourceMacAddress $frameReceived];
            result_debug "Got an arp reply from $requestIp ($mac) on [expr $index + 1] tries";
            if {$returnFrame == 1} {
                return $frameReceived;
            } else {
                return $mac;
            }
         } elseif {$messageType == "ARP_REQUEST" } {
            #this is done specifically for multinetting on BD, since the BD
            #will send out and arp request in response to an arp request
            result_debug "SourceIp: [GetSourceIPAddress $frameReceived] DestIp: [GetDestIPAddress $frameReceived]";
            set mac [GetSourceMacAddress $frameReceived];
            set frameSent [SendArpFrame -txPortId $txPortId -destMac $mac -type "arpReply" \
                          -sourceIp $myIp -destIp $requestIp -tag $tag];
            result_debug "Got an arp request. Sending an arp reply to $requestIp:";
            result_debug "$frameSent";
         }
      }
   }
#   RestoreSavedProtocolServer ixInfo;
   result_debug "No arp reply after $numTries tries for $requestIp";
   return "NO_ARP_REPLY";
}

################################################################## 
# Procedure Name: SendFrameToOtherPort
#   
# Description: Sends IP packets from txPortId to rxPortId and checks for 
#              number of packet sent equals number of packet received.
#
#     
# Input args:
#      - <txPortId>   - Sending portId
#      - <rxPortId>   - Receiving portId
#      - <destMac>    - Destination mac address
#      - <sourceIp>   - Source IP Address
#      - <destIp>     - Destination IP Address      
#      - <percentage> - Percentage of the line rate to be sent default 100         
#      - <destPort>   - Port number of destination 
#      - <frameSize>  - Size of the package
#  Output Variables:
#      - none
#
#  Return Value:
#
#
# Typical usage:
#          SendFrameToOtherPort -txPortId 1 -rxPortId 8 -destMac $dut1mac \
#                     -sourceIp "10.10.1.17" -destIp "10.20.1.2" \
#                     -destPortnumber 80 -frameSize "120" -protocol $protocol
#
#
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,VerifySwitchOutput
#                          VerifyTraffic)
# Category: SendTraffic
##################################################################
proc SendFrameToOtherPort {args} {
   parse_args SendFrameToOtherPort $args {
      txPortId "1"
      rxPortId "0"
      destMac "default"
      sourceIp "127.0.0.1"
      destIp "127.0.0.1"
      percentage "100"
      destPortnumber "0"
      srcPortnumber "0"
      protocol "tcp"
      frameSize "64"
      dataPattern "0102030405"
      flag "no"
   }   

   # ----- Environment variables setup
   global DUTs_info;
   global DUT1_CONNECT;
   global DUT2_CONNECT;

   # ----- Test variables setup
   set txport $txPortId;
   set rxport $rxPortId;

   set dip $destIp;
   set srip $sourceIp; 

   # ----- send a stream of IP frames
   # Send 10,000 frames at the begining because of the problem
   if {$flag == "yes"} {
       set frameSent [SendIpFrame -protocol $protocol -txPortId $txport -destMac $destMac \
                  -destIp $dip -sourceIp $srip -dataPattern $dataPattern \
                  -numFrames 10000 -percentage $percentage -destPort $destPortnumber \
                  -sourcePort $srcPortnumber -frameSize $frameSize];                     
      sleep 5
   }
   
   ClearPortsStats "$txport $rxport";
   set frameSent [SendIpFrame -protocol $protocol -txPortId $txport -destMac $destMac \
                  -destIp $dip -sourceIp $srip -dataPattern $dataPattern \
                  -numFrames 100000 -percentage $percentage -destPort $destPortnumber \
                  -sourcePort $srcPortnumber -frameSize $frameSize];         
   sleep 5;               
   result_debug "frame($protocol) sent: $frameSent";
   set numSent [GetNumFramesSent $txport];
   set numRece [GetNumFramesReceived $rxport];

   if {$numSent > $numRece} {
       set diff [expr (100 - (($numRece * 100)/$numSent))];
   } else {
       set diff 0;
   }    
   set percent 4;
   result_debug "No. Sent = $numSent : Received = $numRece : Percent = $diff";  
   if {$diff <= $percent} {
       report_start_test "No. of sent frames = $numSent and recieved frames = $numRece";
       result_ok "No. of sent frames = $numSent and recieved frames = $numRece";
   } else {
       report_start_test "Warning: No. of sent frames <$numSent> is different than recieved frames <$numRece>";   
       result_error "Warning: No. of sent frames <$numSent> is different than recieved frames <$numRece>";   
   } 
   report_end_test;
}

################################################################## 
# Procedure Name: biSendFrame
#   
# Description: Sends bidirectional mac frame from a txPortId to rxPortId
#     
# Input args: txPortId, rxPortId, protocol, protocol, sourceMac, destMac, numFrames
#             frameSize, frameSizeType, dataPattern, streamType, fcsError, saMode, daMode
#             percentage, tag, tagPriority, frameRate
# Output args: none
# Typical usage:
#             biSendFrame $txPortId
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,VerifySwitchOutput
#                          VerifyTraffic)
# Category: SendTraffic
##################################################################
proc biSendFrame {args} {
   parse_args SendFrame $args {
      txPortId "1"
      rxPortId "0"
      protocol "mac"
      sourceMac "default"
      destMac "default"
      numFrames "1"
      frameSize "64"
      frameSizeType "sizeFixed"
      dataPattern "1234"
      frameType "08 00"
      ethernetType "noType"
      streamType "stopStream"
      fcsError "good"
      saMode "idle"
      daMode "idle"
      saCount ""
      daCount ""
      percentage "100"
      tag "none"
      tagPriority "0"	      
      frameRate "null"
      direction "2Way"
      tagMode "vIdle"
      tagRepeat 1
      dontTx "0"

   }
   
   MapIxiaPortId $txPortId txChasisId txCard txPort
   if {$rxPortId == 0} {
      set sendLearn "false"
      set rxPort [MapIxiaPortId $txPortId rxChasisId rxCard rxPo]
   } else {
      set sendLearn "true"
      MapIxiaPortId $rxPortId rxChasisId rxCard rxPort
   }
   
  set numIxiaCd [GetNumIxiaCd $txPortId]
   
   if {$tag != "none" } { set wTag "true" } else {set wTag "false" }
   global startCardNum
   set frameSent [ixiaConf_2Ports -numIxiaCd $numIxiaCd -rate $frameRate \
                  -txChas $txChasisId -txCard $txCard -txPort $txPort \
		  -startCardNum $startCardNum -rxChas $rxChasisId \
		  -rxCard $rxCard -rxPort $rxPort -sendLearn $sendLearn \
		  -frameType $frameType -ethernetType $ethernetType \
                  -protocol $protocol -numFrames $numFrames \
		  -frameSize $frameSize -frameSizeType $frameSizeType \
                  -dataPattern $dataPattern -streamType $streamType \
		  -fcsError $fcsError -inSaMac $sourceMac -saMode $saMode \
		  -inDaMac $destMac -daMode $daMode -percentage $percentage \
		  -wTag $wTag -tagNo $tag -tagPriority $tagPriority \
                  -tagMode $tagMode -tagRepeat $tagRepeat -direction $direction \
                  -saCount $saCount -daCount $daCount -dontTx $dontTx ]
   if {$streamType != "contPacket" && $numFrames > 100 && $dontTx==0} {
       ixiaCheckTxDone $txChasisId $txCard $txPort $numFrames $txPortId
   }
  return $frameSent            
}
