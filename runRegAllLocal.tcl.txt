#!/usr/bin/expect --

proc runRegAllLocal { targetpc display i386ImagePath marinerImagePath \
                      aspenImagePath cougarImagePath x480ImagePath NWIImagePath {include ""} \
                     {exclude ""} {download "yes"} {mailTo ""} {obuild ""}} {

    global regplatform
    global autoScriptPath
    global regLogin
    global autoPath
    global staggerDelay

    # Parameters used to build runall_monitor
    set paramRegType    "-regType"
    set paramRegSubType "-regSubType"
    set paramPlatform   "-platform"
    set paramBlade      "-blade"
    set paramCfg        "-cfg"
    set paramI386Image   "-i386ImagePath"
    set paramMarinerImage "-marinerImagePath"
    set paramAspenImage   "-aspenImagePath"
    set paramCougarImage "-cougarImagePath"
    set paramx480Image "-x480ImagePath"
    set paramx870Image "-x870ImagePath"
    set paramNWIImage "-NWIImagePath"
    set paramInclude    "-include"
    set paramExclude    "-exclude"
    set paramDownload   "-download"
    set paramMailTo     "-mailTo"
    set paramOBuild     "-obuild"

    # Initialize Xterm Geometry
    set xgeom 0
    set ygeom 0
    
    set imageList ""

    result_debug "runRegAllLocal( targetpc: $targetpc display: $display \
	    i386ImagePath: $i386ImagePath marinerImagePath: $marinerImagePath\
            aspenImagePath: $aspenImagePath cougarImagePath: $cougarImagePath x480ImagePath: $x480ImagePath x870ImagePath: $x870ImagePath NWIImagePath: $NWIImagePath"

    if { $marinerImagePath != "" } {
        append imageList "$paramMarinerImage $marinerImagePath "
    }
    if { $i386ImagePath != "" } {
        append imageList "$paramI386Image $i386ImagePath "
    }
    if { $aspenImagePath != "" } {
        append imageList "$paramAspenImage $aspenImagePath "
    }
    if { $cougarImagePath !="" } {
        append imageList "$paramCougarImage $cougarImagePath "
    }
    if { $x480ImagePath !="" } {
        append imageList "$paramx480Image $x480ImagePath "
    }
    if { $x870ImagePath !="" } {
        append imageList "$paramx870Image $x870ImagePath "
    }
    if { $NWIImagePath !="" } {
        append imageList "$paramNWIImage $NWIImagePath "
    }
    if {$include == "" } { 
	set paramInclude ""  
    } else {
	set include \"$include\"  ;# Make sure the list is quoted when passing
    }
    if {$exclude == "" }  { 
	set paramExclude ""
    } else {
	set exclude \"$exclude\"  ;# Make sure the list is quoted when passing
    }

    if {$mailTo == "" }   { set paramMailTo ""}
    if {$download == "" } { set paramDownload ""}
    if {$obuild == "" } { set paramOBuild ""}


    # Execute FULL regression for each blade for this platform on this PC
    # We call runall_monitor.tcl
    foreach testBlade [array names regplatform] {

	set cmdLine "tclsh runall_monitor.tcl"

	# Parse out BD1,1 from regplatform(BD1,1) {config}
	regexp (.*),(.*) $testBlade ignore targetPlatformPC index	

	# Look for this PCs config only.
	if {! [string match $targetPlatformPC $targetpc] } {
	    continue;
	}

	# Config parameters from runReg.cfg for this platform
	# i.e. set regplatform(IPR,1) { Summit48si  Summit48Si ipr1s48si.cfg functional ipRoute1}
	set currentPlatform    [lindex $regplatform($testBlade) 0]
	set currentBlade       [lindex $regplatform($testBlade) 1]
	set currentCfg         [lindex $regplatform($testBlade) 2]
	set currentRegType     [lindex $regplatform($testBlade) 3]
	set currentRegSubType  [lindex $regplatform($testBlade) 4]
	
	if {$currentRegType == "" } {
	    set currentRegType "functional"
	}
	if {$currentRegSubType == "" } {
	    set currentRegSubType "standard"
	}
	
	
	set xtermTitle "\([string toupper $currentRegType]\) $currentPlatform $currentBlade $currentCfg $i386ImagePath $marinerImagePath [exec date]"

	# Add params to cmdLine
	set cmdLine "$cmdLine $paramRegType $currentRegType \
		$paramRegSubType $currentRegSubType \
		$paramPlatform $currentPlatform \
		$paramBlade $currentBlade \
		$paramCfg $currentCfg \
		$paramDownload $download \
		$paramInclude $include \
		$paramExclude $exclude \
		$paramMailTo $mailTo \
                $imageList \
                $paramOBuild $obuild"


	global XTERMTEST

	if {$XTERMTEST == 1} {
	    set cmdLine "ls -l"
	}

	# Start an xterm on specified display and execute $currentCmd in 
	# xterm window
	# Typically $currentCmd should be "tclsh runall_monitor.tcl <params>"
	puts "STARTING: $xtermTitle"
	puts "     CMD: $cmdLine"

        send "cd $autoPath/main\r"	

	expect "$regLogin@"
	
	send "xterm -T \"$xtermTitle\" -bg white -fg black -geometry +$xgeom+$ygeom -hold +wf -display $display -e $cmdLine &\r"
	expect "$regLogin@"
	
	;# TODO: Verify that the xterm actually started!

	# Set xterm geometry so all xterms don't sit on top of each other
	incr xgeom 150
	incr ygeom 150

	# Sleep x seconds between runs to stagger the DUT downloads
	sleep $staggerDelay
    }    
} 


proc runRegAllLocalDoCommand { targetpc command } {

    global regplatform
    global autoScriptPath
    global regLogin
    global autoPath
    global DUT1_CONNECT
    global DUT2_CONNECT
    global DUT3_CONNECT
    global DUT4_CONNECT
    global DUT5_CONNECT
    global DUT1_IP
    global DUT2_IP
    global DUT3_IP
    global DUT4_IP
    global DUT5_IP
    global connectionTimeout
    global spawn_ids
    global numDUT
    set maxNumDUT 5

    set cfgPath "./cfg"
    
    result_debug "runRegAllLocalDoCommand( targetpc: $targetpc $command )"

    # Execute unconfig for each blade for this platform on this PC
    foreach testBlade [array names regplatform] {

	# Parse out BD1,1 from regplatform(BD1,1) {config}
	regexp (.*),(.*) $testBlade ignore targetPlatformPC index	

	# Look for this PCs config only.
	if {! [string match $targetPlatformPC $targetpc] } {
	    continue;
	}

	# Config parameters from runReg.cfg for this platform
	# i.e. set regplatform(IPR,1) { Summit48si  Summit48Si ipr1s48si.cfg functional ipRoute1}
	set currentCfg         [lindex $regplatform($testBlade) 2]
	
	;# Clear out old DUT settings so we get correct numDut 
	for {set i 1} {$i <= $maxNumDUT} {incr i} {
	    if { [info exists DUT${i}_CONNECT] } {
		unset DUT${i}_CONNECT
	    }
	}
	# Source the current cfg
	if [file exists $cfgPath/$currentCfg] {
	    catch {source $cfgPath/$currentCfg} reason
	} else {
	    result_error "ERROR: Config file:  $cfgPath/$currentCfg  does NOT exist"
	    continue
	}

	set numDUT 0
	# Determine number of DUTs
	for {set i 1} {$i <= $maxNumDUT} {incr i} {
	    if { [info exists DUT${i}_CONNECT] } {
		incr numDUT
	    }
	}
	
	result_debug "numDuts: $numDUT"
	# Login to each DUT and unconfigure
	for {set i 1} {$i <= $numDUT} {incr i} {
	    set terminalIP [set DUT${i}_CONNECT]
	    puts "IP $terminalIP"
	    set whichDutNow $i

	    ;# Login to a DUT
	    if {[catch {Login $terminalIP} reason]} {
		result_error "LOGIN ERROR ($terminalIP): $reason"
		set spawn_id $spawn_ids($terminalIP)
		wait
		set spawn_ids($terminalIP) "INVALID"
		continue
	    }
	    after 1000
	    switch $command {
		"unconfig" {
		    if {[catch {UnconfigSwAll 1} reason]} {
			result_error "UNCONFIG ERROR ($terminalIP): $reason"
		    }
		}
		"defDelete" {
		    if {[catch {SendACmd "config default del po all"} reason]} {
			result_error "DEFAULT DELETE ERROR ($terminalIP): $reason"
		    }
		}
	    }
	    set spawn_id $spawn_ids($terminalIP)
	    close 
	    wait
	    set spawn_ids($terminalIP) "INVALID"
	    
	}

    }
} 
