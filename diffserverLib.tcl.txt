
proc setupCodePtQoSMapping { { dut  1 } } {
global DUT1_CONNECT
global DUT2_CONNECT
global bcmPlatform
global pioneerPlatform

Login [set DUT${dut}_CONNECT]
if [regexp -nocase "$pioneerPlatform" [GetPlatform DUT${dut}]] {
    SendACmd "unconfig diffserv replacement port all"
    SendACmd "unconfig diffserv examination port all"
} else {
    SendACmd "unconfig diffserv replacement"
    SendACmd "unconfig diffserv examination"
}
# ---- they are not created by default in bcmPlatform
if [regexp -nocase "$bcmPlatform" [GetPlatform DUT${dut}]] {
   SendACmd "create qosprofile qp2"
   foreach codepoint {08 09 10 11 12 13 14 15} {
      SendACmd "config diffserv examination code-point $codepoint qp2"
   }
   SendACmd "create qosprofile qp3"
   foreach codepoint {16 17 18 19 20 21 22 23} {
      SendACmd "config diffserv examination code-point $codepoint qp3"
   }
   SendACmd "create qosprofile qp4"
   foreach codepoint {24 25 26 27 28 29 30 31} {
      SendACmd "config diffserv examination code-point $codepoint qp4"
   }
   SendACmd "create qosprofile qp5"
   foreach codepoint {32 33 34 35 36 37 38 39} {
      SendACmd "config diffserv examination code-point $codepoint qp5"
   }
   SendACmd "create qosprofile qp6"
   foreach codepoint {40 41 42 43 44 45 46 47} {
      SendACmd "config diffserv examination code-point $codepoint qp6"
   }
   SendACmd "create qosprofile qp7"
   foreach codepoint {48 49 50 51 52 53 54 55} {
      SendACmd "config diffserv examination code-point $codepoint qp7"
   }
}
}

proc cleanupCodePtQoSMapping { { dut  1 } } {
global DUT1_CONNECT
global DUT2_CONNECT
global bcmPlatform
global pioneerPlatform

Login [set DUT${dut}_CONNECT]
if [regexp -nocase "$pioneerPlatform" [GetPlatform DUT${dut}]] {
    SendACmd "unconfig diffserv replacement port all"
    SendACmd "unconfig diffserv examination port all"
} else {
    SendACmd "unconfig diffserv replacement"
    SendACmd "unconfig diffserv examination"
}

# ---- delete created qp in bcmPlatform
if [regexp -nocase "$bcmPlatform" [GetPlatform DUT${dut}]] {
   SendACmd "delete qosprofile qp2"
   SendACmd "delete qosprofile qp3"
   SendACmd "delete qosprofile qp4"
   SendACmd "delete qosprofile qp5"
   SendACmd "delete qosprofile qp6"
   SendACmd "delete qosprofile qp7"
}
}

;# Looks for TOS bits in frames contained in frameList
proc checkTOSinFrameList { frameList ixSrcIp TOS } {
    set goodTOS 0
    foreach frame $frameList {
	set srcIp [GetSourceIPAddress $frame]
	result_debug "SRC Ip: $srcIp"
	if { $srcIp == $ixSrcIp} { 
	    set TOSbits [GetTOSHex $frame]
	    result_debug "TOSBits: $TOSbits"
	    
	    if {$TOSbits == $TOS} {
		set goodTOS 1
		break;
	    }
	}
    }
    return $goodTOS
}


;# Looks for dot1p bits in frames contained in frameList
proc checkDOT1PinFrameList { frameList ixSrcIp DOT1P } {
    set goodDOT1P 0
    foreach frame $frameList {
        set srcIp [GetSourceIPAddress $frame]
        result_debug "SRC Ip: $srcIp"
        if { $srcIp == $ixSrcIp} {
            set DOT1Pbits [GetDot1pPriority $frame]
            result_debug "DOT1PBits: $DOT1Pbits"

            if {$DOT1Pbits == $DOT1P} {
                set goodDOT1P 1
                break;
            }
        }
    }
    return $goodDOT1P
}

