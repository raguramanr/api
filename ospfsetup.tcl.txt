
proc intraMakeOspfRouter {args} {
 parse_args intraMakeOspfRouter $args {
        interfaceIp ""
	ipMask ""
	areaId 0
        helloInterval 10
        deadInterval 40
        networkType "ospfBroadcast"
        metric 10
        routeMetric 10
        linkType "ospfLinkTransit"
	mtuSize "1500"
        numNetworks 0
        prefix ""
        routeOrigin "ospfRouteOriginArea"
        networkIp ""
        routerId ""
        txPortId  "1"
	nRow "20"
	nCol "20"    
}

    	ospfRouter setDefault
    	ospfRouter clearAllInterfaces
    	ospfRouter clearAllRouteRanges
    	ospfRouter config -enable true
    	ospfRouter config -routerId $routerId
	
 	ospfInterface setDefault
	ospfInterface config -enable true
	ospfInterface config -connectToDut true
	ospfInterface config -ipAddress $interfaceIp
	ospfInterface config -ipMask $ipMask
	ospfInterface config -areaId $areaId
	ospfInterface config -priority 0
    	ospfInterface config -options 2
    	ospfInterface config -helloInterval $helloInterval
    	ospfInterface config -deadInterval $deadInterval
    	ospfInterface config -networkType $networkType
    	ospfInterface config -metric $metric
    	ospfInterface config -protocolInterfaceDescription ""
    	ospfInterface config -numberOfLearnedLsas 0
    	ospfInterface config -enableTrafficEngineering false
    	ospfInterface config -maxBandwidth 0.0
    	ospfInterface config -maxReservableBandwidth 0.0
    	ospfInterface config -linkMetric 0
    	ospfInterface config -unreservedBandwidthPriority0 0.0
    	ospfInterface config -unreservedBandwidthPriority1 0.0
    	ospfInterface config -unreservedBandwidthPriority2 0.0
    	ospfInterface config -unreservedBandwidthPriority3 0.0
    	ospfInterface config -unreservedBandwidthPriority4 0.0
    	ospfInterface config -unreservedBandwidthPriority5 0.0
    	ospfInterface config -unreservedBandwidthPriority6 0.0
    	ospfInterface config -unreservedBandwidthPriority7 0.0
    	ospfInterface config -linkType $linkType
    	ospfInterface config -neighborRouterId 0.0.0.0
    	ospfInterface config -mtuSize $mtuSize
    	ospfInterface config -enableValidateMtu true
    	ospfInterface config -enableAdvertiseNetworkRange false
        set var [ospfRouter addInterface interface1]
        puts "value of var is $var"
    if {$var} {
        puts "issue is here ";
        error "intraMakeOspfRouter: ospfRouter addInterface interface1 failed."
    }

# Adding 2nd interface not connected to DUT

        ospfNetworkRange setDefault
        ospfNetworkRange config -entryPointRow 1
        ospfNetworkRange config -entryPointColumn 1
        ospfNetworkRange config -numRows 45
        ospfNetworkRange config -numColumns 57
        ospfNetworkRange config -firstRouterId "0.0.0.0"
        ospfNetworkRange config -firstSubnetIpAddress "0.0.0.0"
        ospfNetworkRange config -routerIdIncrementBy "0.0.0.1"
        ospfNetworkRange config -subnetIpIncrementBy "0.0.0.1"
        ospfNetworkRange config -enableIncrementIpFromMask true
        ospfNetworkRange config -maskWidth 24
        ospfNetworkRange config -linkType ospfNetworkRangeLinkBroadcast
        ospfNetworkRange config -enableBBit false
        ospfNetworkRange config -enableEBit false
        ospfNetworkRange config -enableAdvertiseRouterLsaLoopback false
        ospfNetworkRange config -enableTe false
        ospfNetworkRange config -maxBandwidth 0.0
        ospfNetworkRange config -maxReservableBandwidth 0.0
        ospfNetworkRange config -linkMetric 0
        ospfNetworkRange config -unreservedBandwidthPriority0 0.0
        ospfNetworkRange config -unreservedBandwidthPriority1 0.0
        ospfNetworkRange config -unreservedBandwidthPriority2 0.0
        ospfNetworkRange config -unreservedBandwidthPriority3 0.0
        ospfNetworkRange config -unreservedBandwidthPriority4 0.0
        ospfNetworkRange config -unreservedBandwidthPriority5 0.0
        ospfNetworkRange config -unreservedBandwidthPriority6 0.0
        ospfNetworkRange config -unreservedBandwidthPriority7 0.0

	ospfInterface setDefault
        ospfInterface config -enable true
        ospfInterface config -connectToDut false
        ospfInterface config -ipAddress 11.11.11.20 
        ospfInterface config -ipMask 255.255.255.0
        ospfInterface config -areaId 0
        ospfInterface config -priority 0
        ospfInterface config -options 2
        ospfInterface config -helloInterval $helloInterval
        ospfInterface config -deadInterval $deadInterval
        ospfInterface config -networkType $networkType
        ospfInterface config -metric $metric
        ospfInterface config -numberOfLearnedLsas 0
        ospfInterface config -enableTrafficEngineering false
        ospfInterface config -maxBandwidth 0.0
        ospfInterface config -maxReservableBandwidth 0.0
        ospfInterface config -protocolInterfaceDescription ""
        ospfInterface config -linkMetric 0
        ospfInterface config -unreservedBandwidthPriority0 0.0
        ospfInterface config -unreservedBandwidthPriority1 0.0
        ospfInterface config -unreservedBandwidthPriority2 0.0
        ospfInterface config -unreservedBandwidthPriority3 0.0
        ospfInterface config -unreservedBandwidthPriority4 0.0
        ospfInterface config -unreservedBandwidthPriority5 0.0
        ospfInterface config -unreservedBandwidthPriority6 0.0
        ospfInterface config -unreservedBandwidthPriority7 0.0
        ospfInterface config -linkType ospfLinkTransit
        ospfInterface config -neighborRouterId 0.0.0.0
        ospfInterface config -mtuSize $mtuSize
        ospfInterface config -enableValidateMtu true
        ospfInterface config -enableAdvertiseNetworkRange true

        if {[ospfRouter addInterface interface2]} {
        error "intraMakeOspfRouter: ospfRouter addInterface interface2 failed."
    }


    result_debug "step 4"
    ospfRouteRange setDefault
    ospfRouteRange config -enable true
    ospfRouteRange config -routeOrigin $routeOrigin
    puts " routeOrigin : $routeOrigin";
    ospfRouteRange config -metric $routeMetric
    puts "routeMetric : $routeMetric";
    ospfRouteRange config -numberOfNetworks $numNetworks
    puts "numberOfNetworks : $numNetworks";
    ospfRouteRange config -prefix $prefix
    puts "prefix : $prefix";
    ospfRouteRange config -networkIpAddress $networkIp
    puts "networkIp : $networkIp";
    if {[ospfRouter addRouteRange routeRange1]} {
        error "intraMakeOspfRouter: ospfRouter addRouteRange routeRange1 failed."
    }
    if {[ospfServer addRouter router1]} {
        error "intraMakeOspfRouter: ospfServer addRouter router1 failed."
    }

    return 0
} ;# intraMakeOspfRouter

##################################################################
# Procedure Name: setupOSPFIntraRouter
#
# Description: This proc is used to setup ixia port as a ospf router. It can create multiple interfaces
#              supplied via interfaceIpList
#
#
#
# Input args:  args
# Output args: None.
# Return value: -1 on error only
# Typical usage:
#setupOSPFRouter -dutIp "62.1.0.109" -interfaceIpList "62.1.0.23" -maskList "255.255.255.0" -areaIdList "0" -helloIntervalList "10" \
#                -deadIntervalList "40" -networkTypeList "ospfBroadcast" -metricList "10" -mtuSizeList 1500 \
#                -linkTypeList "ospfLinkTransit" -numNetworksList 10000 -prefixList "30" -routeOriginList "ospfRouteOriginArea" \
#                -networkIpList "37.0.0.0" -routerIdList "62.1.0.23" -txPortId 2
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,VerifySwitchOutput
#                          VerifyTraffic)
# Category: SendTraffic
##################################################################

proc setupOSPFIntraRouter {args} {
    parse_args setupOSPFIntraRouter $args {
        dutIp ""
        interfaceMacList ""
        interfaceIpList ""
        maskList "255.255.255.0"
        areaIdList "0"
        helloIntervalList "10"
        deadIntervalList "40"
        networkTypeList "ospfBroadcast"
        metricList "10"
        mtuSizeList "1500"
        linkTypeList "ospfLinkTransit"
	numNetworksList "0"
        prefixList ""
        routeOriginList "ospfRouteOriginArea"
        networkIpList ""
        routeMetricList "10"
        routerIdList ""
        txPortId  "1"
        nRow "20"
	nCol "20"
	}

    # get the port information
    MapIxiaPortId $txPortId cha car por
    result_debug "setupOSPFRouter: Chas: $cha Card: $car Port: $por"

    # select the port
    ipAddressTable clear
    ipAddressTable setDefault
    ipAddressTable config -defaultGateway $dutIp
    ipAddressTableItem setDefault
    ipAddressTableItem config -fromIpAddress [lindex $interfaceIpList 0]
    if {[llength $interfaceMacList] > 0} {
        set macAddr [lindex $interfaceMacList 0]
        if {$macAddr == "default"} {
            if {[port get $cha $car $por]} {
                error "setupOSPFRouter: port get $chas $card $port failed."
            }
            set macAddr [port cget -MacAddress]
        }
    } else {
        set macAddr [uniqMac $cha $car $por]
    }
    ipAddressTableItem config -fromMacAddress $macAddr
    ipAddressTableItem config -numAddresses 1
    ipAddressTableItem config -mappingOption oneIpToOneMac
    ipAddressTableItem config -enableUseNetwork true
    ipAddressTableItem config -netMask 24
    ipAddressTableItem set
    ipAddressTable addItem
    ipAddressTable set $cha $car $por

    if {[ospfServer select $cha $car $por]} {
        error "setupOSPFIntraRouter: ospfServer select $cha $car $por failed."
    }
    if {[ospfServer clearAllRouters]} {
        error "setupOSPFIntraRouter: ospfServer clearAllRouters failed."
    }

    for {set i 0} {$i<[llength $interfaceIpList]} {incr i} {
        puts "i : $i";
        
        set interfaceIp [lindex $interfaceIpList $i]
        puts "interfaceIp : $interfaceIp"
	set mask [lindex $maskList $i]
        puts "mask : $mask";
        set areaId [lindex $areaIdList $i]
        puts "areaId : $areaId";
        set helloInterval [lindex $helloIntervalList $i]
        puts "helloInterval : $helloInterval";
        set deadInterval [lindex $deadIntervalList $i]
        puts "deadInterval : $deadInterval";
        set networkType [lindex $networkTypeList $i]
        puts "networkType : $networkType";
        set metric [lindex $metricList $i]
        puts "metric : $metric";
        set mtuSize [lindex $mtuSizeList $i]
        puts "mtuSize : $mtuSize";
        set linkType [lindex $linkTypeList $i]
        puts "linkType : $linkType";
        set numNetworks [lindex $numNetworksList $i]
        puts "numNetworks : $numNetworks";
        set prefix [lindex $prefixList $i]
        puts "prefix : $prefix";
        set routeOrigin [lindex $routeOriginList $i]
        puts "routeOrigin : $routeOrigin";
        set networkIp [lindex $networkIpList $i]
        puts "networkIp : $networkIp";
        set routeMetric [lindex $routeMetricList $i]
        puts "routeMetric : $routeMetric";
        set routerId [lindex $routerIdList $i]
        puts "routerId : $routerId";
        puts "txPortId : $txPortId";
	set returnCode [intraMakeOspfRouter -interfaceIp $interfaceIp -ipMask $mask \
                                           -areaId $areaId -helloInterval $helloInterval \
                                           -deadInterval $deadInterval \
                                           -networkType $networkType -metric $metric \
                                           -linkType $linkType -mtuSize $mtuSize \
                                           -numNetworks $numNetworks -prefix $prefix \
                                           -routeOrigin $routeOrigin \
                                           -networkIp $networkIp \
                                           -routeMetric $routeMetric -routerId $routerId \
                                           -txPortId $txPortId]
        if {$returnCode==-1} {
            return -1
        }
    }

    protocolServer setDefault
    protocolServer config -enableArpResponse true
    protocolServer config -enablePingResponse true
    protocolServer config -enableOspfService true
    if {[protocolServer set $cha $car $por]} {
        error "setupOSPFRouter: protocolServer set $cha $car $por failed."
    }

 set portList [list [list $cha $car $por]]
    result_debug "Writing Configuration to Hardware..."
   result_debug "Intra Routes are been populated"
    if {[ixWriteConfigToHardware portList]} {
        result_debug "Error writing config to hardware"
    }
} ;# setupOSPFRouter


proc setupOSPFIntraRouterVlan {args} {
    parse_args setupOSPFIntraRouterVlan $args {
        dutIp ""
        interfaceMacList ""
        interfaceIpList ""
        maskList "255.255.255.0"
        areaIdList "0"
        helloIntervalList "10"
        deadIntervalList "40"
        networkTypeList "ospfBroadcast"
        metricList "10"
        mtuSizeList "1500"
        linkTypeList "ospfLinkTransit"
	numNetworksList "0"
        prefixList ""
        routeOriginList "ospfRouteOriginArea"
        networkIpList ""
        routeMetricList "10"
        routerIdList ""
        txPortId  "1"
        nRow "20"
	nCol "20"
	}

    # get the port information
    MapIxiaPortId $txPortId cha car por
    result_debug "setupOSPFRouter: Chas: $cha Card: $car Port: $por"

    # select the port
    ipAddressTable clear
    ipAddressTable setDefault
    ipAddressTable config -defaultGateway $dutIp
    ipAddressTableItem setDefault
    ipAddressTableItem config -fromIpAddress [lindex $interfaceIpList 0]
    if {[llength $interfaceMacList] > 0} {
        set macAddr [lindex $interfaceMacList 0]
        if {$macAddr == "default"} {
            if {[port get $cha $car $por]} {
                error "setupOSPFRouter: port get $chas $card $port failed."
            }
            set macAddr [port cget -MacAddress]
        }
    } else {
        set macAddr [uniqMac $cha $car $por]
    }
    ipAddressTableItem config -fromMacAddress $macAddr
    ipAddressTableItem config -numAddresses 1
    ipAddressTableItem config -mappingOption oneIpToOneMac
    ipAddressTableItem config -enableUseNetwork true
    ipAddressTableItem config -netMask 24
    ipAddressTableItem set
    ipAddressTable addItem
    ipAddressTable set $cha $car $por

    if {[ospfServer select $cha $car $por]} {
        error "setupOSPFIntraRouter: ospfServer select $cha $car $por failed."
    }
    if {[ospfServer clearAllRouters]} {
        error "setupOSPFIntraRouter: ospfServer clearAllRouters failed."
    }

    for {set i 0} {$i<[llength $interfaceIpList]} {incr i} {
        set interfaceIp [lindex $interfaceIpList $i]
	set mask [lindex $maskList $i]
        set areaId [lindex $areaIdList $i]
        set helloInterval [lindex $helloIntervalList $i]
        set deadInterval [lindex $deadIntervalList $i]
        set networkType [lindex $networkTypeList $i]
        set metric [lindex $metricList $i]
        set mtuSize [lindex $mtuSizeList $i]
        set linkType [lindex $linkTypeList $i]
        set numNetworks [lindex $numNetworksList $i]
        set prefix [lindex $prefixList $i]
        set routeOrigin [lindex $routeOriginList $i]
        set networkIp [lindex $networkIpList $i]
        set routeMetric [lindex $routeMetricList $i]
        set routerId [lindex $routerIdList $i]
	set returnCode [intraMakeOspfRouter -interfaceIp $interfaceIp -ipMask $mask \
                                           -areaId $areaId -helloInterval $helloInterval \
                                           -deadInterval $deadInterval \
                                           -networkType $networkType -metric $metric \
                                           -linkType $linkType -mtuSize $mtuSize \
                                           -numNetworks $numNetworks -prefix $prefix \
                                           -routeOrigin $routeOrigin \
                                           -networkIp $networkIp \
                                           -routeMetric $routeMetric -routerId $routerId \
                                           -txPortId $txPortId]
        if {$returnCode==-1} {
            return -1
        }
    }

    protocolServer setDefault
    protocolServer config -enableArpResponse true
    protocolServer config -enablePingResponse true
    protocolServer config -enableOspfService true
    if {[protocolServer set $cha $car $por]} {
        error "setupOSPFRouter: protocolServer set $cha $car $por failed."
    }

 set portList [list [list $cha $car $por]]
    result_debug "Writing Configuration to Hardware..."
   result_debug "Intra Routes are been populated"
    if {[ixWriteConfigToHardware portList]} {
        result_debug "Error writing config to hardware"
    }
} ;# setupOSPFRouter
