##################################################################
# $RCSfile: ixiaMisc.tcl,v $ - SQA Library
#
# Copyright (c) 1999 by Extreme Networks Inc.
# 
# Revision control history
# ------------------------
# $Header: /export/cvsroot/automation/Lib/ixiaMisc.tcl,v 2.11.2.1.4.26.2.1 2010/11/03 07:09:07 mshabeer Exp $
#
# Extreme Networks modification history
# -------------------------------------
# $Log: ixiaMisc.tcl,v $
# Revision 2.11.2.1.4.26.2.1  2010/11/03 07:09:07  mshabeer
# Add ixia 5.50 client version
#
# Revision 2.11.2.1.4.26  2010/08/24 01:39:52  ghundertmark
# Merge branch 12_4 to trunk
#
# Revision 2.11.2.1.4.26  2010/08/24 01:39:52  ghundertmark
# Merge branch 12_4 to trunk
#
# Revision 2.11.2.1.4.25  2010/08/18 19:48:24  ghundertmark
# Add ixia version 5.60
#
# Revision 2.11.2.1.4.24  2010/06/08 18:03:07  ghundertmark
# Add ixia 5.30 client version
#
# Revision 2.11.2.1.4.23  2009/07/07 22:39:03  lagrawal
# removed extra empty line causing issue in some procs
#
# Revision 2.11.2.1.4.22.2.3  2010/08/23 22:06:51  ghundertmark
# Add new ixia version check for ixia 5_60 version
#
# Revision 2.11.2.1.4.22.2.2  2009/08/10 20:17:51  jramarao
# Ixia version 5.30 addition
#
# Revision 2.11.2.1.4.22.2.1  2009/07/07 22:37:05  lagrawal
# removed extra empty line causing issue in some procs
#
# Revision 2.11.2.1.4.22  2009/07/01 10:55:41  nellinivasu
# Merged From Branch 'branch-dev_v12-1-rel4'
#
# Revision 2.11.2.1.4.21  2009/05/01 18:07:10  lagrawal
# merge from dev
#
# Revision 2.11.2.1.4.20.6.1  2009/03/24 16:34:09  jramarao
# Timeout increased to avoid warning Tx error checking
#
# Revision 2.11.2.1.4.20  2008/08/05 03:44:07  lagrawal
# merge from branch-fixes_v12-1-rel0
#
# Revision 2.11.2.1.4.19.6.2  2008/07/25 23:02:00  lagrawal
# merged changes from branch-dev_v12-1-rel2 and trunk-exos. cmd cvs update -dj branch-dev_v12-1-rel2 automation
#
# Revision 2.11.2.1.4.19.6.1.2.1  2008/07/02 22:59:08  jramarao
# Support for 5.2
#
# Revision 2.11.2.1.4.19.6.1  2008/06/27 23:16:26  lagrawal
# merged from branch-dev_v12-1-rel1 to branch-fixes_v12-1-rel0 , cvs update -dj branch-dev_v12-1-rel1
#
# Revision 2.11.2.1.4.19.8.1  2008/06/25 23:39:58  msubramanian
# To support Ixia Client 5.10 in SetupIxiaEnv
#
# Revision 2.11.2.1.4.19  2007/10/18 21:46:52  djain
# Added result_debug statement
#
# Revision 2.11.2.1.4.18  2007/09/24 19:17:39  dsuk
# added getIxiaPortType function
#
# Revision 2.11.2.1.4.17  2007/04/05 00:16:10  igokhale
# updated SetIxiaEnv to set default ixia ver
#
# Revision 2.11.2.1.4.16  2007/03/08 18:51:50  eyoung
# Changed SetIxiaEnv code to check existence of environment variables before referencing them.
#
# Revision 2.11.2.1.4.15  2007/02/21 01:42:46  achilukuri
# Merging  Q3FY07-11.6-Phase-2
#
# Revision 2.11.2.1.4.11.4.1  2007/02/09 20:43:01  ghundertmark
# Merge trunk to branch
#
# Revision 2.11.2.1.4.14  2007/01/30 00:36:29  skumar
# Fix dependency on 5.00
#
# Revision 2.11.2.1.4.13  2007/01/16 16:34:46  skumar
# SetupIxiaEnv
#
# Revision 2.11.2.1.4.12  2007/01/03 22:00:09  skumar
# Do not call package req at top
#
# Revision 2.11.2.1.4.11  2006/07/12 19:41:47  skumar
# Removed debug code for linkdown
#
# Revision 2.11.2.1.4.10  2006/06/30 22:35:34  ghundertmark
# Q4FY06 Release commit
#
# Revision 2.11.2.1.4.9  2006/06/09 09:06:22  nellinivasu
#  Changes made to debug ixia transmission problem.
#
# Revision 2.11.2.1.4.8  2006/05/31 05:11:10  nellinivasu
# Changes made to debug ixia transmission problem.
#
# Revision 2.11.2.1.4.7  2006/05/29 13:19:30  nellinivasu
# Changes made to debug ixia transmission problem.
#
# Revision 2.11.2.1.4.6  2006/05/26 12:17:34  nellinivasu
# Changes made to debug ixia transmission problem.
#
# Revision 2.11.2.1.4.5  2006/03/14 19:51:24  skumar
# Updated loopCount proc with right math computation
#
# Revision 2.11.2.1.4.4  2005/12/21 22:24:18  smohanty
# Commit for Release 12
#
# Revision 2.11.2.1.4.3  2005/11/30 02:27:44  skumar
# New proc decideLoopCount for large numFrames
#
# Revision 2.11.2.1.4.2.14.2  2005/10/12 01:51:38  skumar
# Fix wrong spelling in couint
#
# Revision 2.11.2.1.4.2.14.1  2005/10/12 00:43:57  skumar
# Added workaround for > 16Mil pkt count
#
# Revision 2.11.2.1.4.2.14.2  2005/10/12 01:51:38  skumar
# Fix wrong spelling in couint
#
# Revision 2.11.2.1.4.2.14.1  2005/10/12 00:43:57  skumar
# Added workaround for > 16Mil pkt count
#
# Revision 2.11.2.1.4.2  2004/06/16 20:09:52  cshaw
# merge from main trunk again for ixOS3.70 stuff
#
# Revision 2.14  2003/08/18 19:33:01  skumar
# Redo ixiaGenMap to work correctly with 1port 10Gig card in mixed speed chassis
#
# Revision 2.11.2.1.4.1  2003/08/20 03:20:05  cshaw
# trunk-exos release
#
# Revision 2.11.2.1.2.3  2003/08/14 02:10:01  cshaw
# Merged in trunk for 3.65 related changes
#
# Revision 2.11.2.1.2.2  2003/08/14 00:44:41  cshaw
# Merged in trunk for 3.65 related changes
#
# Revision 2.13  2003/07/25 18:02:58  cshaw
# Merged from br-1-6
#
# Revision 2.12.20.1  2003/07/19 21:38:35  skumar
# Added decidePercentage call due to avoid calling deprecated calls.
#
# Revision 2.11.2.1.2.1  2003/06/23 21:28:45  cshaw
# Merged in EW trunk
#
# Revision 2.11.2.1  2002/09/27 00:21:48  jna
# Modified for L2 testing
#
# Revision 2.12  2002/07/29 18:06:46  aleu
# add description header for each proc
#
# Revision 2.11  2002/06/04 00:15:52  aleu
# add ixia card type 3 (2 port GigaBit card)
#
# Revision 2.10  2002/05/15 21:08:57  aleu
# add ixia card types 6/26/28 in findNumPortPerIxiaCard{}
#
# Revision 2.9  2002/05/06 21:30:26  aleu
# remove all cardSpeed global var and rewrite related ixia msic procs
#
# Revision 2.9  2002/05/06 21:30:26  aleu
# remove all cardSpeed global var and rewrite related ixia msic procs
#
# Revision 2.8  2002/04/24 21:28:58  aleu
# add ixia TXS8 card (type 57) checking and check numPortPerCd card by card
#
# Revision 2.7  2001/12/06 19:48:47  tnguyen
# decideFrameRate now return correct framerate for any framesize
#
# Revision 2.6  2000/09/11 23:33:17  tnguyen
# Add timeout so this function will return instead of going into an infinite loop
#
# Revision 2.5  2000/06/02 23:58:43  tnguyen
# Fix frameRate error
#
# Revision 2.4  2000/01/06 23:58:45  jfan
# Modify for different speed Ixia port number conversion
#
# Revision 2.3  1999/10/11 16:13:41  jfan
# Modify program fir IxiaCardSpeed & IxiaStartingCardNumber options
#
# Revision 2.2  1999/09/16 23:45:57  jfan
# Add "standard" map option
#
# Revision 2.1  1999/07/23 14:50:21  aedem
# Merge for 2.0
#
# Revision 1.1.1.1.2.1  1999/06/30 15:16:12  aedem
# Updated for Linux and Ixia 2.0 Beta
#
# Revision 1.1.1.1  1999/06/25 17:53:46  jfan
# Initial import.
#
#
##################################################################

#load {expect52.dll}
set auto_path [linsert $auto_path 0 . ]

##################################################################    
# Procedure Name: ixiaGenMap
# Description:
#     	Generate ixia one2one map by adding all ixia ports.
# Input args: {numIxiaCd} {startCardNum} {ixMapOption} {direction} {chid}
# Output args: None
# Typical usage: 
#	ixiaGenMap $numIxiaCd $startCardNum $ixMapOption $direction $chid
# Category: SetupTestTool
##################################################################
proc ixiaGenMap {{txPortId 1}
                 {rxPortId 2}
                 {ixMapOption standard}
                 {direction 2Way}
                 {chid 1}} {

   global one2oneArray
   set portList ""

   map new 	-type   one2one
   map config 	-type 	one2one

   switch $ixMapOption {
   	standard {
           for {set p $txPortId} {$p<=$rxPortId} {incr p} {
               set rxPort [MapIxiaPortId $p chas card port]
               lappend portList "{$chas $card $port}"
           }
           for {set i 0} {$i<[llength $portList]} {incr i 2} {
              set txPort [lindex [lindex $portList $i] 0]
              set rxPort [lindex [lindex $portList [expr $i+1]] 0]
              map add [lindex $txPort 0] [lindex $txPort 1] [lindex $txPort 2] [lindex $rxPort 0] [lindex $rxPort 1] [lindex $rxPort 2]
              if {$direction == "2Way"} {
                 map add [lindex $rxPort 0] [lindex $rxPort 1] [lindex $rxPort 2] [lindex $txPort 0] [lindex $txPort 1] [lindex $txPort 2]
              }
           }
	}
   }
}

##################################################################    
# Procedure Name: ixiaConf_clearStat
# Description:
#     	Clear all ports statistics on the specified ixia chassis/card.
# Input args: {cardNo} {chid}
# Output args: None
# Typical usage: 
#	ixiaConf_clearStat $cardNo
# Category: SetupTestTool
##################################################################
proc ixiaConf_clearStat {{cardNo 1} {chid 1}} {
   global one2oneArray
   set numPorts [findNumPortPerIxiaCard $cardNo]
   for {set p 1} {$p<=$numPorts} {incr p 1} {zeroPortStats $chid $cardNo $p}
}

##################################################################    
# Procedure Name: ixiaStartCaptureCards
# Description:
#     	Start capture on all ports of the specified ixia card range.
# Input args: {numIxiaCd} {startCardNum} {chid}
# Output args: None
# Typical usage: 
#	ixiaStartCaptureCards $numIxiaCd $startCardNum
# Category: SetupTestTool
##################################################################
proc ixiaStartCaptureCards {{numIxiaCd 1} {startCardNum 1} {chid 1}} {
   set lastCardNum [expr $startCardNum + $numIxiaCd - 1]
   for {set c $startCardNum} {$c<=$lastCardNum} {incr c 1} {
      set numPorts [findNumPortPerIxiaCard $c]
      for {set p 1} {$p<=$numPorts} {incr p 1} {
         startPortCapture $chid $c $p
      }
   }
}

##################################################################    
# Procedure Name: ixiaStopCaptureCards
# Description:
#     	Stop capture on all ports of the specified ixia card range.
# Input args: {numIxiaCd} {startCardNum} {chid}
# Output args: None
# Typical usage: 
#	ixiaStopCaptureCards $numIxiaCd $startCardNum
# Category: SetupTestTool
##################################################################
proc ixiaStopCaptureCards {{numIxiaCd 1} {startCardNum 1} {chid 1}} {
   set lastCardNum [expr $startCardNum + $numIxiaCd - 1]
   for {set c $startCardNum} {$c<=$lastCardNum} {incr c 1} {
      set numPorts [findNumPortPerIxiaCard $c]
      for {set p 1} {$p<=$numPorts} {incr p 1} {
         stopPortCapture $chid $c $p
      }
   }
}

##################################################################    
# Procedure Name: ixiaStopTxCards
# Description:
#     	Stop transmission on all ports of the specified ixia card range.
# Input args: {numIxiaCd} {startCardNum} {chid}
# Output args: None
# Typical usage: 
#	ixiaStopTxCards $numIxiaCd $startCardNum
# Category: SetupTestTool
##################################################################
proc ixiaStopTxCards {{numIxiaCd 1} {startCardNum 1} {chid 1}} {
   set lastCardNum [expr $startCardNum + $numIxiaCd - 1]
   for {set c $startCardNum} {$c<=$lastCardNum} {incr c 1} {
      set numPorts [findNumPortPerIxiaCard $c]
      for {set p 1} {$p<=$numPorts} {incr p 1} {
         stopPortTx $chid $c $p
      }
   }
}

##################################################################    
# Procedure Name: ixiaCheckTxDone
# Description:
#     	 Check if ixia transmission is done as expected no. of frames.
# Input args: {chid} {c} {p} {targetTxNum}
# Output args: None
# Typical usage: 
#	ixiaCheckTxDone $chid $card $port $targetTxNum
# Category: VerifyTraffic
##################################################################
proc ixiaCheckTxDone {{chid 1}
                      {c 1}
                      {p 1}
                      {targetTxNum 1}
                      {txPortId 1}} {
        global DUTs_info;
        global whichDutNow;
       
	set timeout	[expr 60 + $targetTxNum/10]
	set retCode 0

	if { [stat get statFramesSent $chid $c $p] } {
		logMsg "Error getting Tx statistics for $chid $c $p"
		set retCode 1
	}
#        puts "Param values :$chid:$c:$p:$targetTxNum:$txPortId"
    	set numTxFrames [stat cget -counterVal]

#        puts "NumTXFrames : $numTxFrames"
	while {$numTxFrames < $targetTxNum} {
#                puts "INSIDE ixiaCheckTxdone" 
		if { [stat get statFramesSent $chid $c $p] } {
#                puts "INSIDE ixiaCheckTxdone if" 
			logMsg "Error getting Tx statistics for $chid $c $p"
			set retCode 1
		}
#                puts "INSIDE ixiaCheckTxdone after if" 
        	set numTxFrames [stat cget -counterVal]
#                puts "INSIDE ixiaCheckTxdone after counterval" 
        	after 100
		incr timeout -1
		if { $timeout == 0 } {
		   result_warning "Error checking Tx Done on $chid $c $p. Timeout after [expr $timeout/10] seconds"

         	   set retCode 1
		   break
		}
	}

#                puts "After While Loop" 
    if {$retCode == 0} { return $numTxFrames
    } else {             return 0 }
}

################################################################## 
# Procedure Name: findNumPortPerIxiaCard   
# Description: 
#	Find the right number of ports on the specified Ixia card
# Input args: {cardNum}
# Output args: none
# Typical usage: 
#	set numPorts [findNumPortPerIxiaCard $c]
# Category: Utility
##################################################################
proc findNumPortPerIxiaCard {{cardNum 1}} {
if {0} {
   if {[card get 1 $cardNum] == 0} {
     set cardType [card cget -type]
     switch $cardType {
	2  -
	6  -
	26 		{ set numPorts 4 }
	3  -
	7  -
	28 		{ set numPorts 2 }
	42 -
	46 -
	61 		{ set numPorts 1 }
	57 		{ set numPorts 8 }
        default 	{ set numPorts 4 }
     }
   } else {
     set numPorts 0
   }   
}
   return 8
}

################################################################## 
# Procedure Name: decideFrameRate   
# Description: 
#	Decide the ixia frame rate based on the given portSpeed, FrameSize, 
#	& percentage bandwidth
# Input args: {portSpeed} {frameSize} {percentage}
# Output args: none
# Typical usage: 
#	set frameRate [decideFrameRate $txSpeed $frameSize $percentage]
# Category: Utility
##################################################################
proc decideFrameRate {{portSpeed 100}
                      {frameSize 64}
		      {percentage 100}} {
   switch $frameSize {
            	64	{ set frameRate 1488.1	}
            	128	{ set frameRate 844.6	}
		256	{ set frameRate 452.9	}
		512	{ set frameRate 235.0	}
		1024	{ set frameRate 119.8	}
		1280	{ set frameRate 96.2		}
		1518	{ set frameRate 81.3 	}
		default { set frameRate [expr (1488.1*64)/$frameSize] }
   }

   set frameRate [expr $frameRate * $portSpeed * $percentage / 100 ]
   return $frameRate
}

################################################################## 
# Procedure Name: GetPortIdSpeed   
# Description: 
#	Get the ixia port speed on the specified port ID
# Input args: {portId}
# Output args: none
# Typical usage: 
#	set txSpeed [GetPortIdSpeed $portID]
# Category: Utility
##################################################################
proc GetPortIdSpeed { {portId 1} } {
  
   MapIxiaPortId $portId chasisId card port
#   port get $chasisId $card $port
#   return [port cget -speed]
   return 100
   
}   

##################################################################
# Procedure Name: decidePercentage
# Description:
#       Decide the ixia percentage given portSpeed, FrameSize,
#       & frameRate
# Input args: {portSpeed} {frameSize} {frameRate}
# Output args: none
# Typical usage:
#         set percentage [decidePercentage $txSpeed $frameSize $frameRate]
# Category: Utility
##################################################################
proc decidePercentage {{portSpeed 100}
                      {frameSize 64}
                      {frameRate default}} {
   switch $frameSize {
                64      { set full [expr 1488.1* $portSpeed]}
                128     { set full [expr 844.6*$portSpeed]      }
                256     { set full [expr 452.9*$portSpeed]      }
                512     { set full  [expr 235.0*$portSpeed]     }
                1024    { set full  [expr 191.8*$portSpeed]     }
                1280    { set full  [expr 96.2*$portSpeed]      }
                1518    { set full  [expr 81.3*$portSpeed]      }
                default { set full [expr (1488.1*64*$portSpeed)/$frameSize] }
   }

   set percentage [expr $frameRate * 100 / $full]
   return $percentage
}

##################################################################
# Procedure Name: decideLoopCount
# Description:
#       Decides the loopCount if numFrames > 16Mil due to ixia bug
# Input args: {portSpeed} {frameSize} {frameRate}
# Output args: none
# Typical usage:
# decideLoopCount $numFrames $streamType
# Category: Utility
##################################################################
proc decideLoopCount {numFrames streamType} {
 
      if {$numFrames>16777215} {
         for {set i 1} {$i<900000} {incr i 1} {
            set framesCount [mpexpr $numFrames/[mpexpr 1e$i]]
            if {$framesCount<16770000} {
               break
            }
         }
         stream config -numFrames  $framesCount
         stream config -loopCount [expr 1e$i]
         stream config -dma    firstLoopCount
      } else {
      stream config -dma    $streamType
      }
   return
}

proc SetIxiaEnv {ixiaPath} {
global env
   set env(DEFAULT_IXIA_HOME) $env(IXIA_HOME)
   set env(IXIA_HOME) "$ixiaPath"
   set TCLver 8.3

# USER MAY NEED TO CHANGE THESE IF USING OWN TCL LIBRARY 
   set env(TCL_HOME) "$ixiaPath"

# USER NORMALLY DOES NOT CHANGE ANY LINES BELOW
   set env(IxiaLibPath) "$env(IXIA_HOME)/lib"
   set env(IxiaBinPath) "$env(IXIA_HOME)/bin"
   set env(TCLLibPath) "$env(TCL_HOME)/lib"
   set env(TCLBinPath) "$env(TCL_HOME)/bin"
   set env(TCL_LIBRARY) "$env(TCLLibPath)/tcl$TCLver"
   set env(TK_LIBRARY) "$env(TCLLibPath)/tk$TCLver"

   # EY-03-08-2007: Check if variable exists when referencing.
   set env(PATH) "$env(IxiaBinPath):.:$env(TCLBinPath):[expr {[info exists env(PATH)] ? $env(PATH) : ""}]";

   set env(TCLLIBPATH) "$env(IxiaLibPath)"

   # EY-03-08-2007: Check if variable exists when referencing.
   set env(LD_LIBRARY_PATH) "$env(IxiaLibPath):$env(TCLLibPath):[expr {[info exists env(LD_LIBRARY_PATH)] ? $env(LD_LIBRARY_PATH) : ""}]";
   set env(IXIA_RESULTS_DIR) "$env(IXIA_HOME)/results"
   set env(IXIA_LOGS_DIR) "$env(IXIA_HOME)/logs"
   set env(IXIA_TCL_DIR) "$env(IxiaLibPath)"
   set env(IXIA_SAMPLES) "$env(IxiaLibPath)/ixTcl1.0"
   if {[regexp -nocase "5_00" $ixiaPath]} {
      set env(IXIA_VERSION) 5.00.300.20
   } elseif {[regexp -nocase "4_10" $ixiaPath]} {
      set env(IXIA_VERSION) 4.10.250.15
   } elseif {[regexp -nocase "5_10" $ixiaPath]} {
      set env(IXIA_VERSION) 5.10.350.28
   } elseif {[regexp -nocase "5_20" $ixiaPath]} {
      set env(IXIA_VERSION) 5.20.400.3
   } elseif {[regexp -nocase "5_30" $ixiaPath]} {
      set env(IXIA_VERSION) 5.30.450.31
   } elseif {[regexp -nocase "5_60" $ixiaPath]} {
      set env(IXIA_VERSION) 5.60.550.7
   } elseif {[regexp -nocase "5_50" $ixiaPath]} {
      set env(IXIA_VERSION) 5.50.500.27
   } else {
      set env(IXIA_VERSION) 3.80.125.27
   }

}

#############################################################################################
# Procedure Name: getIxiaPortType
#
# Description: This proc returns the type of a ixia port.
# ex:
# 1     port10100BaseTX
# 8     portGbic
# 63    port10100Txs
# 82    port1000Stxs4
# see Ixia manual for more definitions
#
# Input args:
#
#  -ixPort             - Ixia port
#
# Output args: none
#
# Typical usage: getIxiaPortType 8
#
##############################################################################################
proc getIxiaPortType {ixPort} {

MapIxiaPortId $ixPort chasis card port
  result_debug "chasis : $chasis card : $card port : $port"
  port get $chasis $card $port
  set portType [port cget -type]
  result_debug "portType - $portType"
  return $portType
}

