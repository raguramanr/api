proc SendIpv6Frame {args} {
     parse_args SendIpv6Frame $args {
     txPortId "1"
     rxPortId "0"
     protocol "ipV6"
     nHeader "tcp"
     trafficClass "3"
     flowLabel "0"
     hopLimit  "255"
     #sourceMac "default"
     #destMac "00 00 00 00 00 02"
     sourceMac "default"
     destMac "00 e0 2b 00 00 01"
     sourceIp "335:5555:6666:6666:7777:7777:8888:8888"
     destIp "FE80:0:0:0:2A1:F1FF:FE00:1"
     dIpMask "0:ffff:ffff:ffff:0:ffff:ffff:ffff"
     sIpMask "0:ffff:ffff:ffff:0:ffff:ffff:ffff"
     sourcePort "0"
     destPort "0"
     goodChecksum "true"
     numFrames "1"
     frameSize "128"
     frameSizeType "sizeFixed"
     frameRate "default"
     frameType "86 DD"
     dataPattern "0000"
     streamType "stopStream"
     fcsError "good"
     tag "none"
     tagMode "vIdle"
     tagRepeat "1"
     percentage "1"
     saMode "idle"
     daMode "idle"
     saCount ""
     daCount ""
     ipSaMode "ipV6Idle"
     ipDaMode "ipV6Idle"
     ipSaCount ""
     ipDaCount ""
     tcpSynFlag "false"
     tcpFinFlag "false"
     tcpRstFlag "false"
     tcpAckFlag "false"
     tcpPushFlag "false"
     tcpUrgFlag "false"
     tcpSeqNum "0"
     type "8"
     code "0"
     id "0"
     sequence "0"
     direction "1Way"
     maxResponseTime "100"
     applyFilter "0"
     udfEnable "false"
     udfInitval "00"
     udfOffset "0"
     udfCountertype "c8"
     udfContinuousCount "false"
     udfUpdown "uuuu"
     udfRepeat "1"
     udfStep "1"
     clearStats "yes"
     dontTx "0"
     udpInvalidCheckSum "0"
    	 }
	
    set numIxiaCd [GetNumIxiaCd $txPortId]
    MapIxiaPortId $txPortId chasisId card port
    if {$rxPortId==0} {
      set rxPortId $txPortId
    }
	
   MapIxiaPortId $rxPortId ch c rxPort
   global portMappingList

   set portList [lindex $portMappingList [expr $txPortId-1]]
   result_debug "INFO: DUT[lindex $portList 2] [lindex $portList 1] \
                               ingresses from portId [lindex $portList 0]"

   if {$tag != "none" } { set wTag "true" } else {set wTag "false" }
   	global startCardNum
   	set frameSent [ixiaConf_2Ports_ipv6 -numIxiaCd $numIxiaCd \
                  -txChas $chasisId -txCard $card -txPort $port \
		  -startCardNum $startCardNum  -rxChas $ch -rxCard $c \
                  -rxPort $rxPort -frameType $frameType \
                  -ipProtocol $protocol -sMacAddr $sourceMac \
                  -dMacAddr $destMac -sIpAddr $sourceIp -dIpAddr $destIp \
                  -flowLabel $flowLabel -trafficClass $trafficClass \
                  -pSrcPort $sourcePort -pDstPort $destPort -frameSizeType \
                  $frameSizeType -hopLimit $hopLimit \
                  -numFrames $numFrames -frameSize $frameSize \
                  -percentage $percentage -frameRate $frameRate -dataPattern \
                  $dataPattern -streamType $streamType \
                  -wTag $wTag -tagNo $tag -tagMode $tagMode \
                  -tagRepeat $tagRepeat -direction $direction -saMode $saMode \
                  -saCount $saCount -daMode $daMode -daCount $daCount \
                  -ipSaMode $ipSaMode -ipSaCount $ipSaCount -ipDaMode \
                  $ipDaMode -ipDaCount $ipDaCount \
                 -dIpMask $dIpMask sIpMask $sIpMask  -nHeader $nHeader \
                 -tcpSeqNum $tcpSeqNum -tcpSynFlag $tcpSynFlag \
                 -tcpFinFlag $tcpFinFlag \
                 -tcpPushFlag $tcpPushFlag -tcpUrgFlag $tcpUrgFlag \
                 -tcpRstFlag $tcpRstFlag -tcpAckFlag $tcpAckFlag \
                 -sequence $sequence -type $type -code $code \
                 -id $id -applyFilter $applyFilter -maxResponseTime \
                 $maxResponseTime  -udfEnable $udfEnable -udfInitval \
                 $udfInitval -udfOffset $udfOffset -udfCountertype \
                 $udfCountertype -udfContinuousCount $udfContinuousCount \
                 -udfUpdown $udfUpdown -udfRepeat $udfRepeat -udfStep $udfStep \
                 -clearStats $clearStats -dontTx $dontTx \
                 -invalidUdpChk $udpInvalidCheckSum ]

  if {$streamType != "contPacket" && $numFrames > 100 && $dontTx==0} {
    	ixiaCheckTxDone $chasisId $card $port $numFrames $txPortId
  }
  	return $frameSent
  }

##################################################################
# Procedure Name: CookIPv6Addr
#
# Description: Translate v6 addresses from / to many formats
#
#
# Input args: In address, output format
#
#
# Output args: none
# Return value: Returns the packet sent
# Typical usage:
#               set newIPv6 [CookIPv6Addr 3ffe::1:2 space]
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,
#                VerifySwitchOutput,  VerifyTraffic)
# Category: CookIPv6Addr
##################################################################
proc CookIPv6Addr {Addr {output colon}} {
   set mode ""
   set v6Addr ""
   regsub -all {\:\:} "$Addr" "X" Addr1;
   
   # 3ffe:2::1
   set aList [split $Addr1 X]
   if {[llength $aList] > 1} {
      #Work on the left side of the ::
      set mode "short"
      #result_debug "MODE = Short"
      set v6List ""
      regsub -all {\:} [lindex $aList 0] "X" AddrLeft;
      regsub -all {\:} [lindex $aList 1] "X" AddrRight;
      set bList [split $AddrLeft "X"]
      set leftCount [llength $bList]
      foreach leftBlock $bList {
         if {[string length $leftBlock] < 4} {
            if {[string length $leftBlock] == 1} {
               set newBlock "000$leftBlock"
            } elseif {[string length $leftBlock] == 2} {
               set newBlock "00$leftBlock"
            } elseif {[string length $leftBlock] == 3} {
               set newBlock "0$leftBlock"
            } else {
               set newBlock $leftBlock
            }
         } else {
            set newBlock $leftBlock
         }
         lappend v6List $newBlock
      }
      #Work on the right side of the address
      set cList [split $AddrRight "X"]
      set rightCount [llength $cList]
      #At this point we know how many null words have been skipped
      #  by the use of ::
      set skipCount [expr 8 - $rightCount - $leftCount]
      for {set x 0} {$x<$skipCount} {incr x} {
         lappend v6List "0000";
      }
      foreach rightBlock $cList {
         if {[string length $rightBlock] < 4} {
            if {[string length $rightBlock] == 1} {
               set newBlock "000$rightBlock"
            } elseif {[string length $rightBlock] == 2} {
               set newBlock "00$rightBlock"
            } elseif {[string length $rightBlock] == 3} {
               set newBlock "0$rightBlock"
            } else {
               set newBlock $rightBlock
            }
         } else {
            set newBlock $rightBlock
         }
         lappend v6List $newBlock
      }
      if {$output == "colon"} {
         set cookedAddr [join $v6List ":"]
      } else {
         foreach word $v6List {
            lappend newList [string range $word 0 1 ]
            lappend newList [string range $word 2 3 ]
         }
         set cookedAddr [join $newList " "]
      }
   } else {
      # This will be a 16 word colon delimited addr passed in
      #   Probably the only desired output is byte spaced
      regsub -all {\:} "$Addr" "X" Addr1;
      # -- split the v6Addr by colon
      set aList [split $Addr1 X]
      if {$mode != "short" && [llength $aList] == "8"} {
         set mode "normal"
         #result_debug "MODE = NORMAL"
   
         # -- split the v6Addr by colon
         
         set v6List ""
         foreach block $aList {
            if {[string length $block] < 4} {
               if {[string length $block] == 1} {
                  set newBlock "000$block"
               } elseif {[string length $block] == 2} {
                  set newBlock "00$block"
               } elseif {[string length $block] == 3} {
                  set newBlock "0$block"
               } else {
                  set newBlock $block
               }
            } else {
               set newBlock $block
            }
            if {$output == "space"} {
               lappend v6List [string range $newBlock 0 1 ]
               lappend v6List [string range $newBlock 2 3 ]
            } else {
               # A 8 word colon delimited addr was input and colon out desired
               lappend v6List $block
            }
         }
         if {$output == "space"} {
            set cookedAddr [join $v6List " "]            
         } else {
            # A 8 word colon delimited addr was input and colon out desired
            set cookedAddr [join $v6List ":"]
         }

      }
      # This will be a 16 byte space delimited addr passed in
      #   
      set aList [split $Addr1 " "]
      if {$mode != "normal" && $mode != "short" && [llength $aList] == "16"} {
         set mode "space"
         #result_debug "MODE = Space"
         # -- split the v6Addr by colon
         set v6List ""
         for {set i 0} {$i<16} {incr i 2} {
            lappend v6List "[lindex $aList $i][lindex $aList [expr $i + 1]]"
         }
         #result_debug "\nOutput: $output"
         set cookedAddr [join $v6List ":"]
      }
   }
   if {$mode != "normal" && $mode != "short" && $mode != "space"} {
      set cookedAddr "ERROR: no address matches"
   }
   # -- join by space
   
   # -- to upper case
   set cookedAddr [string toupper $cookedAddr]
   #result_debug "cookedAddr=$cookedAddr"
   return $cookedAddr
}

##################################################################
# Procedure Name: SendNDMessage
#
# Description:
#     This proc is used to send a neighbor advertisement of solicit.
#
#     Use ipSaMode "incrIPv6" and NumFrames to incr SA
#
# Input args: args
#
# Output args: None.
# Return value: Neighbor Messages in ixia raw frame format
# Typical usage:
#     set NeighborMsg [SendNDMessage -mType "adv" \
#           -sourceMac -destMac ]
#
# Category Types (Setup,GetSwitchInfo,SendTraffic,CaptureTraffic,
#     VerifySwitchOutput,VerifyTraffic)
# Category: SendTraffic
##################################################################
proc SendNDMessage {args} {
   parse_args SendNDMessage $args {
      txPortId        "1"
      protocol        "ipV6"
      destMac         "33:33:00:00:00:11"
      sourceMac       "default"
      sourceIp        "fe80::02a1:f1ff:fe00:0001"
      destIp          "3ffe:0001:0000:0000:0000:0000:0000:0002"
      targetAddr      "3ffe:0002:0000:0000:0000:0000:0000:0002"
      numFrames       "1"
      ipSaMode        "ipV6Idle"
      sIpMask         "96"
      tag             "none"
      percentage      "1"
      frameRate       "default"
      ndType          "00"
      ndLength        "00"
      ndLinkLocal     "00:a1:f1:00:00:01"
      mType           "adv"
      advType         "OverRide"
      ipV6HopLimit    "255"
      mCode           "00"
   }

   set ndLinkLocal [cookMacForIxia $ndLinkLocal];
   
   if {$mType == "adv"} {
      switch $advType {
         "OverRide" {set advTypeValue "20 00 00 00"; set advTypeValue2 " 20 00 00 00 ";}
         "Solicited" {set advTypeValue "40 00 00 00"; set advTypeValue2 " 40 00 00 00 ";}
         "Router" {set advTypeValue "80 00 00 00"; set advTypeValue2 " 80 00 00 00 ";}
         "Solicited_OverRide" {set advTypeValue "60 00 00 00"; set advTypeValue2 " 60 00 00 00 ";}
         default {set advTypeValue "20 00 00 00"; set advTypeValue2 " 20 00 00 00 ";}
      }
   } else {
      set advTypeValue "00 00 00 00";
      set advTypeValue2 " 00 00 00 00 ";
   }

   set sIPCSum  [CookIPv6Addr "$sourceIp" space]
   set dIPCSum  [CookIPv6Addr "$destIp" space]
   set targetCSum [CookIPv6Addr "$targetAddr" space]

   if {$mType == "sol"} {
      set mValue "87"
      set type 135
   } elseif {$mType == "adv"} {
      set mValue "88"
      set type 136
   } else {
      result_error "Neighbor Discovery Function: ONLY Solicit (sol) and Advertisements (adv) are Supported"
      close_result_file
      report_end_test
      return -code return
   }
   # Get the checksum
   set cSum [GetICMPv6Checksum -sourceIp "$sIPCSum" \
      -destIp "$dIPCSum" \
      -type $type \
      -code $mCode \
      -advTypeValue $advTypeValue \
      -ndTargetAddr "$targetCSum" \
      -ndType $ndType \
      -ndLength $ndLength \
      -ndLinkLayerAddr $ndLinkLocal ]

   set newTargetAddr [CookIPv6Addr "$targetAddr" space]

   # Need to overwrite the next header as 3A and also decrement the csum if incr ND
   if {$ipSaMode == "incrIPv6"} {
      set ipSaMode 5;
      set sIpMask  96;
      set udfEnable "true" 
      set udfContinuousCount "false false"
      set udfInitval "3A \"$cSum\""
      if {$tag == "none"} {
         set udfOffset "20 56"
      } else {
         set udfOffset "24 60"
      }
      set udfCountertype "c8 c16"
      set udfUpdown "uuuu dduu"
      set udfRepeat "1 $numFrames"
      set udfStep "1 1"
   } else {
      set ipSaMode "ipV6Idle";
      set sIpMask  0;
      set udfEnable "true" 
      set udfContinuousCount "false"
      set udfInitval "3A"
      if {$tag == "none"} {
         set udfOffset "20"
      } else {
         set udfOffset "24"
      }
      set udfCountertype "c8"
      set udfUpdown "uuuu"
      set udfRepeat "1"
      set udfStep "1"
   }      
   # Set the frame size
   if {$tag != "none"} {
      #If tagged
      if {$mType == "adv"} {
         set frameSize 94
      } elseif {$mType == "sol"} {
         set frameSize 94
      }
   } else {
      if {$mType == "adv"} {
         set frameSize 90
      } elseif {$mType == "sol"} {
         set frameSize 90
      }
   }

   set dataPattern "$mValue $mCode $cSum${advTypeValue2}$newTargetAddr $ndType $ndLength $ndLinkLocal"
   #result_debug "Data = $dataPattern"
   set streamSent [SendIpv6Frame -txPortId $txPortId -sourceIp "$sourceIp" -destIp "$destIp" \
      -destMac "$destMac" -numFrames $numFrames -tag $tag -frameSize $frameSize -frameRate $frameRate \
      -percentage "$percentage" -nHeader "ipV6NoNextHeader" -sourceMac $sourceMac \
      -dataPattern "$dataPattern" -hopLimit $ipV6HopLimit -ipSaMode $ipSaMode -sIpMask $sIpMask \
      -udfEnable "true" -udfContinuousCount "$udfContinuousCount" -udfUpdown "$udfUpdown" \
      -udfRepeat "$udfRepeat" -udfInitval "$udfInitval" -udfOffset "$udfOffset" \
      -udfCountertype "$udfCountertype" -udfStep "$udfStep"]

   displayNDPacketFormat -txPortId $txPortId -destMac $destMac -ipSaMode $ipSaMode \
      -sourceMac $sourceMac -sourceIp $sourceIp -destIp $destIp -frameRate $frameRate \
      -targetAddr $newTargetAddr -mType $mType -mCode $mCode -tag $tag \
      -advType $advType -ndType $ndType -ndLength $ndLength -ndLinkLocal $ndLinkLocal \
      -percentage $percentage -numFrames $numFrames -frameSent $streamSent
}

##################################################################    
# Procedure Name: displayNDPacketFormat
# Description:
#     	Displays the decoded version of a MLD packet sent over
#       the specified port.
# Input args: 
# Output args:  None
# Return value: None
# Typical usage: 
#   displayNDPacketFormat -txPortId $txPortId -destMac $destMac \
#      -sourceMac $sourceMac -sourceIp $sourceIp -destIp $destIp \
#      -targetAddr $newTargetAddr -mType $mType -mCode $mCode -tag $tag \
#      -advType $advType -ndType $ndType -ndLength $ndLength \ 
#      -ndLinkLocal $ndLinkLocal\
#      -percentage $percentage -numFrames $numFrames -frameSent $streamSent 
# Category: Utility
##################################################################
proc displayNDPacketFormat {args} {
  parse_args displayMLDPacketFormat $args {
      txPortId    "1"
      destMac     "33:33:00:00:00:11"
      sourceMac   "00:A1:f1:00:00:01"
      sourceIp    "fe80::02a1:f1ff:fe00:0001"
      destIp      "ff02:0000:0000:0000:0000:0000:0000:0002"
      targetAddr  "ff02:0000:0000:0000:0000:0000:0000:0002"
      numFrames   "1"
      tag         "none"
      percentage  "1"
      frameRate   "default"
      mCode       "00"
      mType       "adv"
      advType     "OverRide"
      frameSent   "none"
      ndType      "00"
      ndLength    "00"
      ndLinkLocal "00 00 00 00 00 00"
      ipSaMode    "ipV6Idle"
   }
  set strType "packet"
  set numPacket $numFrames

  switch $mType {
     "adv" {set messageType "Advertisement";}
     "sol" {set messageType "Solicitation";}
     default {set messageType "ERROR";}
  }
  
  result_debug "Transmit $numFrames Neighbor $messageType from portId $txPortId"

  result_debug "$frameSent"
  result_debug " "

  set space1 14
  set space2 39
  set space3 53

  set str [format "%-*s %s" $space1 DestMac: $destMac]
  set str [format "%-*s %s" $space2 $str srcMac:]
  set str [format "%-*s %s" $space3 $str $sourceMac]
  result_debug "$str"

  if {$tag != "none"} {
     set str [format "%-*s %s" $space1 Tag: $tag]
     set str [format "%-*s %s" $space2 $str txPerc:]
     set str [format "%-*s %s" $space3 $str $percentage]
     result_debug "$str"
  } else {
     if {$frameRate != "default"} {
        set str [format "%-*s %s" $space1 frameRate: $frameRate]
        result_debug "$str"
     } else {
        set str [format "%-*s %s" $space1 txPerc: $percentage]
        result_debug "$str"
     }
  }

  set str [format "%-*s %s" $space1 ND_Type: $messageType]
  set str [format "%-*s %s" $space2 $str ICMP_Code:]
  set str [format "%-*s %s" $space3 $str $mCode]
  result_debug "$str"

  if {$ipSaMode == "5"} {
  set str [format "%-*s %s" $space1 Incr_ND: $numPacket]
  result_debug "$str"
  }

  if {$mType == "adv"} {
     set str [format "%-*s %s" $space1 Adv_Type: $advType]
     set str [format "%-*s %s" $space2 $str NDTypeLength:]
     set str [format "%-*s %s" $space3 $str ${ndType}${ndLength}]
     result_debug "$str"     
  } else {
     #set str [format "%-*s %s" $space1 DestIpV6Addr: $destIp]
     #result_debug "$str"
  }
  set str [format "%-*s %s" $space1 TrgtLinkLocal: $ndLinkLocal]
  result_debug "$str" 
  set str [format "%-*s %s" $space1 DestIpV6Addr: $destIp]
  result_debug "$str"
  set str [format "%-*s %s" $space1 ND_TargetAddr: $targetAddr]
  result_debug "$str"
  set str [format "%-*s %s" $space1 SrcIpV6Addr: $sourceIp]
  result_debug "$str"

  result_debug " "
}

