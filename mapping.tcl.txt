puts "--- Sourcing Mapping File ---"
global TrafficGen 

if { $TrafficGen == "ept" } {

global configurationFile

set cfgFile [lindex [string trim [split $configurationFile "/"] ] end]
set pwd1 [split [pwd] "/"]
if {[lsearch $pwd1 "Functionaltest"] != -1} {
set pathpwd "../../"
} else {
set pathpwd "../"
}

switch $cfgFile {

        "p1_x250_ipr.cfg" {
                puts "------ Sourcing ePTClient1.tcl ----------------"
                if { [catch {source $pathpwd/Lib/ePTLib/ePTClient1.tcl} err] } {
			puts "============> err -- $err"
		}
		
                }
        "p1_oly_g20xt.cfg" {
                puts "------ Sourcing ePTClient.tcl ----------------"
                if { [catch {source $pathpwd/Lib/ePTLib/ePTClient.tcl} err] } {

				puts "============> err -- $err"
			}
                }
        "ePT_olympic_2node.cfg" {
                puts "------ Sourcing ePTClient2.tcl ----------------"
                if { [catch {source $pathpwd/Lib/ePTLib/ePTClient2.tcl} err] } {

			puts "============> err -- $err"
		}
                }
	default {
                puts "------ Sourcing ePTClient_default.tcl ----------------"
		if { [catch {source $pathpwd/Lib/ePTLib/ePTClient.tcl} err] } {
			puts "============> err -- $err"
		}			
		}
}
proc ixputs {args} {
	ePTputs $args
}
proc ixServer_read {channel} {
	ePTServer_read $channel
}
proc ixDisconnectTclServer {{serverName ""}} {
	ePTDisconnectTclServer $serverName
}
proc ixInitialize {serverName} {
	ePTConnectToTclServer $serverName
}
proc ixConnectToTclServer {serverName} {
	ePTConnectToTclServer $serverName
}
proc ixLogin {userName} {
	ePTLogin $userName
}
proc ixLogout {} {
	ePTLogout
}
proc ixTakeOwnership {txRxList {takeType ""}} {
	ePTTakeOwnership $txRxList $takeType
}
proc ixPortTakeOwnership {chassis lm port {takeType ""}} {
	ePTPortTakeOwnership $chassis $lm $port $takeType
}
proc ixClearOwnership {{txRxList "" } {takeType ""}} {
	ePTClearOwnership $txRxList $takeType
}
proc ixPortClearOwnership {chassis lm port {takeType ""}} {
	ePTPortClearOwnership $chassis $lm $port $takeType
}
proc ixCheckOwnership {txRxList} {
	ePTCheckOwnership $txRxList
}
proc ixConnectToChassis {chassisList {cableLength cable3feet}} {
	ePTConnectToChassis $chassisList $cableLength $cable3feet
}
proc ixGetChassisID {chassisName} {
	ePTGetChassisID $chassisName
}
proc ixDisconnectFromChassis {args} {
	ePTDisconnectFromChassis $args
}
proc ixStartTransmit {PortList} {
	ePTStartTransmit $PortList
}
proc startTx {PortList} {
ePTStartTransmit $PortList
}
proc ixStartPortTransmit {chassis lm port} {
	ePTStartPortTransmit $chassis $lm $port
}
proc ixStopTransmit {PortList} {
	ePTStopTransmit $PortList
}
proc ixStopPortTransmit {chassis lm port} {
	ePTStopPortTransmit $chassis $lm $port
}
proc ixStartCapture {PortList} {
	ePTStartCapture $PortList
}
proc ixStopCapture {PortList} {
	ePTStopCapture $PortList
}
proc ixStartPortCapture {chassis lm port} {
	ePTStartPortCapture $chassis $lm $port
}
proc stopPortCapture {chassis lm port} {
	ePTStopPortCapture $chassis $lm $port
}
proc startPortCapture {chassis lm port} {
	ePTStartPortCapture $chassis $lm $port
}
proc ixStopPortCapture {chassis lm port {groupId 710} {create create} {destroy destroy}} {
	ePTStopPortCapture $chassis $lm $port $groupId $create $destroy
}
proc ixClearStats {PortList} {
	ePTClearStats $PortList
}
proc ixClearPortStats {chassis lm port} {
	ePTClearPortStats $chassis $lm $port
}
proc zeroPortStats {chassis lm port} {
        ePTClearPortStats $chassis $lm $port
}
proc ixDisablePortArpResponse {chassis lm port {write write}} {
	ePTDisablePortArpResponse $chassis  $lm $port $write
}
proc ixTransmitPortArpRequest {chassis lm port} {
	ePTTransmitPortArpRequest $chassis $lm $port
}
proc ixSetPacketStreamMode {TxRxArray {write nowrite}} {
	ePTSetPacketStreamMode $TxRxArray $write
}
proc ixSetPortPacketStreamMode {chassis lm port {write nowrite}} {
	ePTSetPortPacketStreamMode $chassis $lm $port $write
}
proc ixWritePortsToHardware {PortArray args} {
	ePTWritePortsToHardware $PortArray
}
proc writeConfigToHardware {PortArray args} {
	ePTWriteConfigToHardware $PortArray
}
proc ixWriteConfigToHardware {PortArray args} {
	ePTWriteConfigToHardware $PortArray
}
proc ixCheckTransmitDone {PortArray} {
	ePTCheckTransmitDone $PortArray
}
proc ixCheckPortTransmitDone {chassis lm port} {
	ePTCheckPortTransmitDone $chassis $lm $port 
}
proc ixCheckLinkState {PortArray {message messageOn}} {
	ePTCheckLinkState $PortArray $message
}
proc ixRequestStats {TxRxArray} {
	ePTRequestStats $TxRxArray
}
proc ixEnableArpResponse { mapType PortMap } {
	ePTEnableArpResponse $mapType $PortMap
}
proc ixEnablePortArpResponse { mapType chassis lm port {write write}} {
	ePTEnablePortArpResponse $mapType $chassis $lm $port $write
}
proc ixDisableArpResponse { PortMap } {
	ePTDisableArpResponse $PortMap
}
proc ixTransmitArpRequest {TxRxArray} {
	ePTTransmitArpRequest $TxRxArray
}
proc ixDisablePortArpResponse {chassis lm port {write write}} {
	ePTDisablePortArpResponse $chassis $lm $port $write
}
proc ixTransmitPortArpRequest {chassis lm port} {
	ePTTransmitPortArpRequest $chassis $lm $port
}
source $pathpwd/Lib/ePTLib/ePTUtils.tcl
source $pathpwd/Lib/ePTLib/ePTMisc.tcl 
source $pathpwd/Lib/ePTLib/ePTQinQTx.tcl
source $pathpwd/Lib/ePTLib/ePTSendPacket.tcl
source $pathpwd/Lib/ePTLib/ePTForwarding.tcl
source $pathpwd/Lib/ePTLib/ePT_nc.tcl
source $pathpwd/Lib/ePTLib/ePTStreams.tcl
source $pathpwd/Lib/ePTLib/ePTL3TxIpv6.tcl
source $pathpwd/Lib/ePTLib/ePTTx.tcl
source $pathpwd/Lib/ePTLib/ePTL3Tx.tcl
source $pathpwd/Lib/ePTLib/ePTswConf.tcl
source $pathpwd/Lib/ePTLib/ePTRx.tcl
source $pathpwd/Lib/ePTLib/ePTigmp.tcl
source $pathpwd/Lib/ePTLib/ePTPortMapping.tcl
source $pathpwd/Lib/ePTLib/ePTSystemSetup.tcl
} 
