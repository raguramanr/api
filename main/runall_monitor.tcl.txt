#!/usr/bin/tclsh

source ../Lib/mainLib.tcl

set  startTime [exec date]
set  executeBatFile 0
#set  modSummaryCfgPath "./cfg/modulesToBeSummarized.cfg"
# SK: Changed duplicated files to be referred under Autoweb/cgi-bin/cgiScripts
set  modSummaryCfgPath "./../Autoweb/cgi-bin/cgiScripts/modulesToBeSummarized.cfg"

# List of errors returned by main.tcl deemed FATAL
set fatalErrorList [list \
	"Unable to connect to switch after reboot" \
	"Cannot find config file" \
	"connectionBad" \
	"No response from the switch" \
	"Can't create dir" \
	"spawn id .* not open" \
	"invalid command name" \
	"Loop Condition" \
	"Config Booted is Factory Default after save reboot" \
        "CF is corrupted on DUT" \
	]

# Default user to send mail notification to.
set defaultRecipient "sqascauto@extremenetworks.com"

# List of modules that returned errors during run of main.tcl
set erroredModules [list]

load [lindex [glob "/usr/lib/libexpect*so*"] 0]
set LIB_PATH "../Lib"
lappend auto_path $LIB_PATH

gen_index ../Lib
gen_index .

source ../Lib/parse_args.tcl


# ------------------------------------------------------------------------------
# These 4 calls are REQUIRED for all sublevel libraries that use 
# result_xxxx functions to work.
set resultDir "RunAllMonitor_logs"
if { ! [file isdirectory $resultDir] } {
    ;# Create it!
    file mkdir $resultDir
}
set tStartTime [clock seconds]
set tStartDate [clock format [clock seconds] -format "%Y-%m-%d %I.%M.%S%p"]
set fd_res [open_result_file "runall-[clock format [clock seconds] -format "%I.%M%p"]-[pid]"]
;#--------------------------------------------------------------

set connectionTimeout 60


# Dump out usage information
proc print_usage {} {

    puts "\r"
    puts "USAGE: runall_monitor.tcl \
	    -cfg <config file> \
	    -regType <regType>"
    puts "           -regSubType <SubType> \
	    \[-platform <platform>] \
	    \[-blade <blade>] "
    puts "           \[-exclude <module>] \
	    \[-include <module>] \
	    \[-download <yes|no>
	    \[-mailTo <e-mail address>]"
    puts "  \[-noPost <Y>] "
    puts "  \[-i386ImagePath <image path to i386 image>]"
    puts "  \[-marinerImagePath <image path to mariner image>]"
    puts "  \[-aspenImagePath <image path to aspen image>]"
    puts "  \[-cougarImagePath <image path to cougar image>]"
    puts "  \[-x480ImagePath <image path to x480 image>]"
    puts "  \[-x870ImagePath <image path to x870 image>]"
    puts "  \[-NWIImagePath <image path to NWI image>]"
    puts "  \[-viperImagePath <image path to viper image>]"
    puts "  \[-bootrom <bootrom>]"
    puts "  \[-bootrom <bootrom>]"
    puts "  \[-obuild <software build>]"
    puts "\r"
    puts "      <cfg>: Path of the config file name (e.g. \
	    short/ptgm4x6.2.2b4.cfg)"
    puts "      <regType>: Type of Regression to be run \
	    (functional|snmp|cli|performance|scalability)"
    puts "      <regSubType>: Test Subtype (standard|ipRoute1|ipRoute2|ipRoute3|\
	    uploadanddownload)"
    puts "      \[<platform>]: Name of the platform"
    puts "           BD/Alpine/Summit7i/Summit48i/Summit48si/Summit5i/summit2/\
	    Summit4/Summit24e3/BT/Godzilla"
    puts "      \[<blade>]: "
    puts "          FM24T/FM32T/FM4X/G12SXi/F48Ti/F32T/G8Xi/F96Ti/F32Fi/\
	    G8Ti/Summit7i/Summit5i/Summit48si"
    puts "      \[<exclude>]: modules to be excluded from testing."
    puts "      \[<include>]: modules to be tested. The regression will only run \
	    those modules you specified"
    puts "	\[-download] <yes|no> Download image before starting. Default: \
	    yes"
    puts "      \[<mailTo>]: The email address to which you want to send the \
	    regression status "
    puts "      \[<-noPost>]: No posting to autoweb will happen if (-noPost Y) \
	    is given Note: no rerun will happen also."
    puts "      \[<i386ImagePath>]: ./exosi386.tgz"
    puts "      \[<marinerImagePath>]: ./exosmariner.tgz"
    puts "      \[<aspenImagePath>]: ./exosaspen.tgz"
    puts "      \[<cougarImagePath>]: ./exoscougar.tgz"
    puts "      \[<x480ImagePath>]: ./exosx480.tgz"
    puts "      \[<x870ImagePath>]: ./oniex870.tgz"
    puts "      \[<NWIImagePath>]: ./exosNWI.tgz"
    puts "      \[<viperImagePath>]: ./exosviper.tgz"
    puts "      \[<bootrom>]: bootver (assume in root of your location share)"
    puts "      \[<obuild>]: old sofware version (ie. 10.1.2.16)"
}



;# Function to do validation of input arguments
proc validateArgsRunall_Monitor { p_blade p_platform p_cfg p_regType p_regSubType \
	p_exclude p_include p_download p_noPost \
	p_mailTo p_i386ImagePath p_marinerImagePath p_aspenImagePath \
        p_cougarImagePath p_x480ImagePath p_NWIImagePath p_viperImagePath p_ImagePath p_image } {

    global defaultRecipient

    ;# From modulesToBeSummarized.cfg
    global clis
    global platformLists
    global bds summits aspens


    upvar $p_blade  blade
    upvar $p_platform platform
    upvar $p_cfg cfg
    upvar $p_regType regType 
    upvar $p_regSubType regSubType
    upvar $p_exclude exclude
    upvar $p_include include
    upvar $p_download download
    upvar $p_noPost noPost
    upvar $p_mailTo mailTo 
    upvar $p_i386ImagePath i386ImagePath 
    upvar $p_marinerImagePath marinerImagePath 
    upvar $p_aspenImagePath aspenImagePath 
    upvar $p_cougarImagePath cougarImagePath 
    upvar $p_x480ImagePath x480ImagePath
    upvar $p_x870ImagePath x870ImagePath
    upvar $p_NWIImagePath NWIImagePath 
    upvar $p_viperImagePath viperImagePath
    upvar $p_image image 

    if {$mailTo == ""} {
	set mailTo $defaultRecipient
    }
    
    if {$regType == "null"} {
	result_error "ERROR: regType: Regression Type to be run is required."
	return 0
    }
    
    if {$regSubType == "null"} {
	result_error "ERROR: regSubType: Regression Test Sub type required."
	return 0
    }

    if [regexp -nocase "summit" $platform] {
	set blade ""
    }

    if {$cfg == "null"} {
	result_error "ERROR: cfg name required."
	return 0
    }
    
    ;# Check that platform/blade is supported by autoweb.  The file written to 
    ;# autoweb data files must match what autoweb expects.  If platform/blade 
    ;# combo is incorrect, the data will be written, but won't show up when 
    ;# display.  For example, an AlpineFM32 directory might be created, but 
    ;# autoweb expects AlpineFM32T.
    if [regexp -nocase "cli" $regType] {
	;# Look at  $clis in modulesToBeSummarized.cfg...which is 
	;# generated from $cliTableConfig
	set ok 0
	set temp [format "cli%s%s" $platform $blade]
	foreach listMember $clis {
	    if [regexp -nocase $listMember $temp] {
		set ok 1
		break
	    }
	}
	if { $ok == 0 } {
	    regsub -all "cli" $clis "" supportedList 
	    result_debug "WARNING: Unsupported CLI blade/platform combination \
		    $platform:$blade may not post to autoweb correctly."
	    result_debug "WARNING: Autoweb supported combinations are $supportedList"
	}
    } elseif { [regexp -nocase "func|snmp" $regType] && \
	    [regexp -nocase "stand" $regSubType] } {
	;# Validate standard regressions
	;# These are generated from xxxTableConfig
	set ok 0
	set temp [format "%s%s" $platform $blade]	
	foreach platList $platformLists {
	    set curList [set $platList]
	    foreach listMember $curList {
		if [regexp -nocase $temp $listMember] {
		    set ok 1
		    break
		}
	    }
	    if {$ok == 1} {
		break
	    }
	}
	if { $ok == 0 } {
	    result_debug "WARNING: Unsupported Standard blade/platform \
		    combination $platform:$blade may not post to autoweb correctly"
	}
    }

    if {($platform == "null") && (![regexp -nocase {ipRoute[1-3]} \
	    $regSubType])}  {
	result_error "ERROR: platform name required."
	return 0
    }
    
    if {($platform != "null") && ([regexp -nocase {ipRoute[1-3]} \
	    $regSubType])} {
	# Do not exit, just ignore the extra parameter.
	result_debug "WARNING: regSubType=$regSubType, platform parameter is \
		being ignored."
    }
    
    if {($blade == "null") && (![regexp -nocase {ipRoute[1-3]} \
	    $regSubType])} {
	# Do not exit, just ignore the extra parameter.
	result_debug "WARNING: blade name required."
    }

    if {($blade != "null") && ([regexp -nocase {ipRoute[1-3]} \
	    $regSubType])} {
	# Do not exit, just ignore the extra parameter.
	result_debug "WARNING: regSubType=$regSubType, blade parameter is \
		being ignored."
    }

    if {($i386ImagePath == "NULL") && ($marinerImagePath == "NULL") && \
        ($aspenImagePath == "NULL") && ($x480ImagePath == "NULL") && ($x480ImagePath == "NULL") && \
	($viperImagePath == "NULL") && ($NWIImagePath == "NULL") } {
        # error, at least one of them needs to be set
	result_error "ERROR: marinerImagePath ,i386ImagePath,aspenImagePath NWIImagePath or \
                     x480ImagePath must be set"
	return 0
    } else {

        set marinerList [split $marinerImagePath /]
        set marinerFile [lindex $marinerList end]
        result_debug "marinerFile: $marinerFile"
        set i386List [split $i386ImagePath /]
        set i386File [lindex $i386List end]
        result_debug "i386File: $i386File"

        set aspenList [split $aspenImagePath /]
        set aspenFile [lindex $aspenList end]
        result_debug "aspenFile: $aspenFile"

        set cougarList [split $cougarImagePath /]
        set cougarFile [lindex $cougarList end]
        result_debug "cougarFile: $cougarFile"

        set x480List [split $x480ImagePath /]
        set x480File [lindex $x480List end]
        result_debug "x480File: $x480File"

        set x870List [split $x870ImagePath /]
        set x870File [lindex $x870List end]
        result_debug "x870File: $x870File"

        set NWIList [split $NWIImagePath /]
        set NWIFile [lindex $NWIList end]
        result_debug "NWIFile: $NWIFile"

        set viperList [split $viperImagePath /]
        set viperFile [lindex $viperList end]
        result_debug "viperFile: $viperFile"

        # parse out the build number
        if {$marinerImagePath != "NULL"} {
            # use marinerImagePath
            regsub "\.xos" $marinerFile "" marinerFile
            set marinerFileList [split $marinerFile -]
            regsub "[lindex $marinerFileList 0]-" $marinerFile "" image

        } elseif { $aspenImagePath != "NULL"} {
            # use aspenImagePath
            regsub "\.xos" $aspenFile "" aspenFile
            set aspenFileList [split $aspenFile -]
            regsub "[lindex $aspenFileList 0]-" $aspenFile "" image
        }  elseif { $cougarImagePath != "NULL"} {
            # use cougarImagePath
            regsub "\.xos" $cougarFile "" cougarFile
            set cougarFileList [split $cougarFile -]
            regsub "[lindex $cougarFileList 0]-" $cougarFile "" image
        }  elseif { $x480ImagePath != "NULL"} {
            # use x480ImagePath
            regsub "\.xos" $x480File "" x480File
            set x480FileList [split $x480File -]
            regsub "[lindex $x480FileList 0]-" $x480File "" image
        }  elseif { $x870ImagePath != "NULL"} {
            # use x870ImagePath
            regsub "\.xos" $x870File "" x870File
            set x870FileList [split $x870File -]
            regsub "[lindex $x870FileList 0]-" $x480File "" image
        }  elseif { $NWIImagePath != "NULL"} {
            # use NWIImagePath
            regsub "\.xos" $NWIFile "" NWIFile
            set NWIFileList [split $NWIFile -]
            regsub "[lindex $NWIFileList 0]-" $NWIFile "" image
        }  elseif { $viperImagePath != "NULL"} {
            # use viperImagePath
            regsub "\.xos" $viperFile "" viperFile
            set viperFileList [split $viperFile -]
            regsub "[lindex $viperFileList 0]-" $viperFile "" image
        } else { 
            # parse out using i386ImagePath
            regsub "\.xos" $i386File "" i386File
            set i386FileList [split $i386File -]
            set image [lindex $i386FileList end]
       } 
    }
        
    return 1
}


;# Procedure to handle copying the image to the tftp servers, then
;# downloading the image to the DUTs. 
proc handleImageDownload { cfg i386ImagePath marinerImagePath aspenImagePath \
                           cougarImagePath x480ImagePath NWIImagePath viperImagePath bootrom } {
    
    result_debug "*****************************************************"
    result_debug "          Starting Download Image Process"
    result_debug "*****************************************************"
    

    puts "cfg: $cfg marinerImagePath: $marinerImagePath i386ImagePath: \n
      $i386ImagePath aspenImagePath: $aspenImagePath cougarImagePath: $cougarImagePath x480ImagePath: $x480ImagePath x870ImagePath: $x870ImagePath NWIImagePath: $NWIImagePath viperImagePath: $viperImagePath\
       bootrom: $bootrom"

	    set dlStat [catch {exec tclsh LoadImage.tcl -cfg $cfg \
                -marinerImagePath $marinerImagePath \
                -i386ImagePath $i386ImagePath \
                -aspenImagePath $aspenImagePath \
                -cougarImagePath $cougarImagePath \
                -x480ImagePath $x480ImagePath \
                -x870ImagePath $x870ImagePath \
                -NWIImagePath $NWIImagePath \
                -viperImagePath $viperImagePath \
                -bootrom $bootrom >&@stdout} result]



	
	if {$dlStat != 0} {
	    result_error "\nERROR: Image download failed to DUTs!\nIf you do NOT\
		    want to download image, please use '-download no' option.\n"
	    result_error "$result"
	    return 0
	}
    return 1
}

proc handleAbortedModule { testModule regType platform blade image } {

    set build $image
    set imageVer [ getBuildNumber $build ]  
    set reportDir [ GetReportDir $testModule $regType $platform $blade $imageVer ".."]
    result_debug "Report dir for the aborted module : $reportDir"

    if { [ catch {exec mkdir $reportDir} result ] } {
	result_error "$result"
    }
    if { [ catch { open "$reportDir/report.txt" w } fd ] } {
	result_error "Can't open file : $reportDir/report.txt"
    }
    puts $fd "MODULE_ABORTED"
    close $fd
}


;# Check the result value returned by main.tcl for FATAL errors that we
;# want to ABORT the rest of the run.
proc checkFatalError { result  } {
    
    global fatalErrorList

    foreach errorString $fatalErrorList {
	
	result_debug "$errorString  $result"
	if [regexp -nocase $errorString $result] {
	    return 1
	}
    }
    return 0
}

;# Take care of running regression (main.tcl) and posting to the
;# web (automate.tcl).
proc runModuleRegression {testModule modeToUse regPath cfg noPost \
	createConfig regType regSubType platform blade image obuild } {

    global exclude
    global executeBatFile 
    global erroredModules
    global fd_res

    set errorCode 1

    set match ""
    set str "" 
    set skipModule ""

    ;# Check if this module is on the exclude list
    foreach excludeM $exclude {
	if {[regexp -nocase "(^$excludeM.*)"  $testModule match str]} {
	    set skipModule $str
	    break
	} 
    }
   
    if {$skipModule == ""} {

	set moduleStartTime [exec date]
	
	result_debug "Starting regression for $testModule START: $moduleStartTime...."
	result_debug "\tmain.tcl -mode $modeToUse -module $testModule \
		-regPath $regPath -cfg $cfg"

	;# Write logs to file before starting
	flush $fd_res
	catch { exec {tclsh} main.tcl -mode $modeToUse -module $testModule \
		-regPath ../$regPath -cfg $cfg -build $image -obuild $obuild >@stdout } result
#set result "testCompleted"


	result_debug "$testModule   main.tcl returned result: $result"
	;# If we get no result back, we assume abnormal termination
	;# If we get something other than testCompleted or testSkipped, we assume problem
	;#    with the test execution.
	if {(! [regexp -nocase {testCompleted|testSkipped} $result]) || ($result == "")} {
	    
	    global mailTo
	    ;# Send email notification
	    set  notificationData  "\nHOST PC:  [exec hostname] \
		    \nSTARTED:  $moduleStartTime \
		    \nENDED:    [exec date] \
		    \nIMAGE:    $image \
		    \nCFG:      $cfg \
		    \nPLATFORM: $platform \
		    \nBLADE:    $blade \
		    \nMODULE:   $testModule"
          set subject "$cfg Regression Aborted running $testModule with ERROR"

	    sendMailNotification $mailTo $subject \
		    "MAIN.TCL: $testModule\nERROR:$result\n$notificationData"
	    
	    result_error "MAIN.TCL: $testModule\n$result\n$notificationData"
	    lappend erroredModules $testModule
	    set errorCode 1

            handleAbortedModule $testModule $regType $platform $blade $image

	    ;# Check if the string returned from main.tcl constitutes a fatal
	    ;# error where we ABORT the rest of the regression.
	    if {[checkFatalError $result] == 1} {
		return "FATAL_ERROR"
	    }
	}
	
	after 2000
	
	if {[regexp -nocase -indices "(^Y)" $noPost matchedRange] == 1} {
	    result_debug "\tSkip call to automate.tcl." 
	    return $errorCode
	}

        if {$regSubType == "upgradedowngrade"} {
            set delimit ":"
        } else {
            set delimit ""
            # make sure to clear obuild since it's not needed
            set obuild ""
        }

	# Post results to autoweb

	# Adjust Aspen platform name if needed for Rushmore (v11.3) and beyond
	if { [regexp -nocase $platform "Aspen"] } {

	    regexp {([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)} $image match majorver minorver
	    if { ($majorver > 11) || \
                 (($majorver == 11) && ($minorver >= 3)) } {
		set platform "BD-8810"
	    }
	}

	if {$createConfig == 1} {
	    ;# We run this regardless if there was an error running this module, 
	    ;# because we want to process all modules and create a bat file
	    result_debug "\tautomate.tcl -regType $regType \
		    -regSubType $regSubType \
		    -build $image.xtr -platform $platform -blade $blade"
	    # Create rerun bat file
	    catch {exec {tclsh} automate.tcl -regType $regType \
		    -regSubType $regSubType \
		    -build $image$delimit$obuild -platform $platform \
		    -blade $blade >&@stdout } result

	    ;# No rerun required for performance
	    if {! [regexp -nocase "perf" $regType]} {
		set executeBatFile 1
	    }
	} else {

	     # Do NOT create rerun bat file
		result_debug "\tautomate.tcl -regType $regType \
			-regSubType $regSubType -build $image$delimit$obuild \
			-platform $platform -blade $blade -modules $testModule \
			-noconfig"
		# Create rerun bat file
		catch { exec {tclsh} automate.tcl -regType $regType \
			-regSubType $regSubType \
			-build $image$delimit$obuild -platform $platform \
			-blade $blade -modules $testModule -noconfig >&@stdout } \
			result
	}
#set result ""
	if {$result != ""} {
	    result_error "automate.tcl: $result"
	}
    }
    
    return $errorCode

}



################################################################################
#                                M A I N
################################################################################

result_debug "###################################################################"
result_debug "                    RUNALL_MONITOR.TCL STARTED!"
result_debug "###################################################################"
result_debug "[exec date]"

source ../Lib/parse_args.tcl

parse_args runall_monitor $argv {
    blade "null"
    platform "null"
    cfg "null"
    regType "null"
    regSubType "null"
    exclude ""
    include ""
    download "yes"
    noPost "N"
    mailTo ""
    i386ImagePath   "NULL"
    marinerImagePath   "NULL"
    aspenImagePath   "NULL"
    cougarImagePath   "NULL"
    x480ImagePath   "NULL"
    x870ImagePath   "NULL" 
    NWIImagePath   "NULL"
    viperImagePath   "NULL"
    bootrom "NULL"
    obuild ""
}

# check to see if testModuleList.cfg exists
if {![file exists $modSummaryCfgPath]} {
    result_error "\nERROR: $modSummaryCfgPath could not be found.  Please correct \
	    this error before re-running.\n"
    return 0
}

source $modSummaryCfgPath

set env(EXOS_PLATFORM_TYPE) 2
set image ""

;# NOTE: Pass by reference
if { ! [ validateArgs blade platform cfg regType regSubType exclude \
	include download noPost mailTo i386ImagePath \
        marinerImagePath aspenImagePath cougarImagePath x480ImagePath x870ImagePath NWIImagePath viperImagePath image ] } {
    print_usage
    return 0
}


set regressionModules [getRegressionModuleList $regType $regSubType]
if {$regressionModules == ""} {
    result_error "No modules list for regType:$regType regSubType:$regSubType"
    return 0
}


##################################################
#  Download image if needed 
###################################################
if {($image != "") && [regexp -nocase "yes" $download] } {

    if {! [handleImageDownload $cfg $i386ImagePath $marinerImagePath \
            $aspenImagePath $cougarImagePath $x480ImagePath $NWIImagePath $viperImagePath $bootrom ]} {
	
	set  notificationData  "\nHOST  PC:  [exec hostname] \
		\nSTARTED:  $startTime \
		\nENDED:    [exec date] \
		\nIMAGE:    $i386ImagePath \
		\nIMAGE:    $marinerImagePath \
		\nIMAGE:    $aspenImagePath \
		\nIMAGE:    $cougarImagePath \
                \nIMAGE:    $x480ImagePath \
                \nIMAGE:    $x870ImagePath \
                \nIMAGE:    $NWIImagePath \
                \nIMAGE:    $viperImagePath \
		\nCFG:      $cfg \
		\nINCLUDE:  $include \
		\nEXCLUDE:  $exclude \
		\nMODULES:  $regressionModules"
	;# Unable to download image.
	sendMailNotification $mailTo \
		"Image download for $cfg FAILED" \
		"Image download for $cfg FAILED. Please debug and restart. \
		$notificationData"
	
	result_error "IMAGE DOWNLOAD Failed!"
	return 0
    }
}
   

sleep 5

;# Get the regPath from head of $regressionModules
set regPath [lindex $regressionModules 0]
result_debug "regPath: $regPath"

if {$include != ""} {
    ;# Rebuild $regressionModules list with only included modules
    unset regressionModules
    set regressionModules $include
} else {
    ;# Remove regPath param from $regressionModules
    set regressionModules [lrange $regressionModules 1 \
	    [expr [llength $regressionModules] - 1] ]
}

set lastModule [lindex $regressionModules [expr \
	[llength $regressionModules] - 1]]

result_debug "REGRESSION MODULES FOR THIS RUN"
result_debug "$regressionModules"

;# Write logs to file
flush $fd_res

set createConfig 0
# Default mode to use for main.tcl (auto | dev | autodev )
set modeToUse "auto"
set modeFast   1  ;# Use auto for first module, then autodev for next

foreach testModule $regressionModules {

    set status "OK"

    puts "LAST: $lastModule  TEST:$testModule"
    if {([string equal -nocase $lastModule $testModule] == 1) && \
	    (! [regexp -nocase "perf" $regType])} {
	set createConfig 1
	result_debug "****** SETTING CREATE CONFIG to 1 ******"
    } 
    
    # For initial release, keep everything in AUTO mode
    set modeToUse "auto"
    
    puts "*************** RUNNING in $modeToUse *****************" 
    set status [runModuleRegression $testModule $modeToUse $regPath $cfg $noPost \
	    $createConfig $regType $regSubType $platform $blade $image $obuild]
    
    if [regexp -nocase "FATAL_ERROR" $status] {	
	result_debug "######################################################################"
	result_debug "            ** ABORTED ** RUNALL_MONITOR.TCL ** ABORTED **"
	result_debug "######################################################################"

	return 0  ;# QUIT
    }
}

 

;# Only execute re-run batch file if we created it in this run via automate.tcl
set batResult ""
if { $executeBatFile } {
    set nextBatchFile [genRerunBatFileName $regType $regSubType $platform $blade]
    
    result_debug "STARTED: $nextBatchFile on [exec date]"
    after 5000
    catch { exec ./$nextBatchFile >&@stdout } batResult
    if {$batResult != ""} {
	result_error "$batResult"
    }
    result_debug "FINISHED: $nextBatchFile on [exec date]"
}

set  notificationData  "\nHOST PC:  [exec hostname] \
	\nSTARTED:  $startTime \
	\nENDED:    [exec date] \
	\nIMAGE:    $i386ImagePath \
	\nIMAGE:    $marinerImagePath \
	\nIMAGE:    $aspenImagePath \
	\nIMAGE:    $cougarImagePath \
        \nIMAGE:    $x480ImagePath \
        \nIMAGE:    $x870ImagePath \
        \nIMAGE:    $NWIImagePath \
        \nIMAGE:    $viperImagePath \
	\nDOWNLOAD: $download \
	\nCFG:      $cfg \
	\nINCLUDE:  $include \
	\nEXCLUDE:  $exclude \
	\nMODULES:  $regressionModules\n"


if [llength $erroredModules] {
    set notificationData "$notificationData\n\
	    MODULES ABNORMALLY TERMINATED DURING RUN: $erroredModules"
}

if {$batResult != ""} {
    set notificationData "$notificationData\n\nRERUN ERROR: $batResult"
} elseif { $executeBatFile } {
    set notificationData "$notificationData\n\nBATCH FILE USED FOR 2nd PASS: $nextBatchFile\n\
	    [exec cat $nextBatchFile]\n"
}

sendMailNotification $mailTo \
	"RUNALL_MONITOR for $cfg finished" \
	"Congratulations! runall_monitor.tcl for $cfg has completed $regType tests.\n \
	$notificationData"


result_debug "######################################################################"
result_debug "                      RUNALL_MONITOR.TCL FINISHED!"
result_debug "######################################################################"
result_debug "$notificationData"
